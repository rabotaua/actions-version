var $3B1P3$http = require("http");
var $3B1P3$https = require("https");
var $3B1P3$net = require("net");
var $3B1P3$tls = require("tls");
var $3B1P3$events = require("events");
var $3B1P3$assert = require("assert");
var $3B1P3$util = require("util");
var $3B1P3$stream = require("stream");
var $3B1P3$buffer = require("buffer");
var $3B1P3$querystring = require("querystring");
var $3B1P3$streamweb = require("stream/web");
var $3B1P3$utiltypes = require("util/types");
var $3B1P3$nodestream = require("node:stream");
var $3B1P3$nodeutil = require("node:util");
var $3B1P3$nodeevents = require("node:events");
var $3B1P3$perf_hooks = require("perf_hooks");
var $3B1P3$worker_threads = require("worker_threads");
var $3B1P3$async_hooks = require("async_hooks");
var $3B1P3$console = require("console");
var $3B1P3$url = require("url");
var $3B1P3$zlib = require("zlib");
var $3B1P3$string_decoder = require("string_decoder");
var $3B1P3$diagnostics_channel = require("diagnostics_channel");
var $3B1P3$fs = require("fs");
var $3B1P3$os = require("os");
var $3B1P3$path = require("path");
var $3B1P3$crypto = require("crypto");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequirec5e5"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequirec5e5"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("cLRC3", function(module, exports) {
"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */ var $94c37631a9e74248$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $94c37631a9e74248$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $94c37631a9e74248$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $94c37631a9e74248$var$__createBinding(result, mod, k);
    }
    $94c37631a9e74248$var$__setModuleDefault(result, mod);
    return result;
};
var $94c37631a9e74248$var$__awaiter = module.exports && module.exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.HttpClient = module.exports.isHttps = module.exports.HttpClientResponse = module.exports.HttpClientError = module.exports.getProxyUrl = module.exports.MediaTypes = module.exports.Headers = module.exports.HttpCodes = void 0;

const $94c37631a9e74248$var$http = $94c37631a9e74248$var$__importStar($3B1P3$http);

const $94c37631a9e74248$var$https = $94c37631a9e74248$var$__importStar($3B1P3$https);

const $94c37631a9e74248$var$pm = $94c37631a9e74248$var$__importStar((parcelRequire("6TSFn")));

const $94c37631a9e74248$var$tunnel = $94c37631a9e74248$var$__importStar((parcelRequire("3jni9")));

var $bEavY = parcelRequire("bEavY");
var $94c37631a9e74248$var$HttpCodes;
(function(HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})($94c37631a9e74248$var$HttpCodes || (module.exports.HttpCodes = $94c37631a9e74248$var$HttpCodes = {}));
var $94c37631a9e74248$var$Headers;
(function(Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})($94c37631a9e74248$var$Headers || (module.exports.Headers = $94c37631a9e74248$var$Headers = {}));
var $94c37631a9e74248$var$MediaTypes;
(function(MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})($94c37631a9e74248$var$MediaTypes || (module.exports.MediaTypes = $94c37631a9e74248$var$MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */ function $94c37631a9e74248$var$getProxyUrl(serverUrl) {
    const proxyUrl = $94c37631a9e74248$var$pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : "";
}
module.exports.getProxyUrl = $94c37631a9e74248$var$getProxyUrl;
const $94c37631a9e74248$var$HttpRedirectCodes = [
    $94c37631a9e74248$var$HttpCodes.MovedPermanently,
    $94c37631a9e74248$var$HttpCodes.ResourceMoved,
    $94c37631a9e74248$var$HttpCodes.SeeOther,
    $94c37631a9e74248$var$HttpCodes.TemporaryRedirect,
    $94c37631a9e74248$var$HttpCodes.PermanentRedirect
];
const $94c37631a9e74248$var$HttpResponseRetryCodes = [
    $94c37631a9e74248$var$HttpCodes.BadGateway,
    $94c37631a9e74248$var$HttpCodes.ServiceUnavailable,
    $94c37631a9e74248$var$HttpCodes.GatewayTimeout
];
const $94c37631a9e74248$var$RetryableHttpVerbs = [
    "OPTIONS",
    "GET",
    "DELETE",
    "HEAD"
];
const $94c37631a9e74248$var$ExponentialBackoffCeiling = 10;
const $94c37631a9e74248$var$ExponentialBackoffTimeSlice = 5;
class $94c37631a9e74248$var$HttpClientError extends Error {
    constructor(message, statusCode){
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, $94c37631a9e74248$var$HttpClientError.prototype);
    }
}
module.exports.HttpClientError = $94c37631a9e74248$var$HttpClientError;
class $94c37631a9e74248$var$HttpClientResponse {
    constructor(message){
        this.message = message;
    }
    readBody() {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve)=>$94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
                    let output = Buffer.alloc(0);
                    this.message.on("data", (chunk)=>{
                        output = Buffer.concat([
                            output,
                            chunk
                        ]);
                    });
                    this.message.on("end", ()=>{
                        resolve(output.toString());
                    });
                }));
        });
    }
    readBodyBuffer() {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve)=>$94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
                    const chunks = [];
                    this.message.on("data", (chunk)=>{
                        chunks.push(chunk);
                    });
                    this.message.on("end", ()=>{
                        resolve(Buffer.concat(chunks));
                    });
                }));
        });
    }
}
module.exports.HttpClientResponse = $94c37631a9e74248$var$HttpClientResponse;
function $94c37631a9e74248$var$isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === "https:";
}
module.exports.isHttps = $94c37631a9e74248$var$isHttps;
class $94c37631a9e74248$var$HttpClient {
    constructor(userAgent, handlers, requestOptions){
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) this._ignoreSslError = requestOptions.ignoreSslError;
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) this._allowRedirects = requestOptions.allowRedirects;
            if (requestOptions.allowRedirectDowngrade != null) this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            if (requestOptions.maxRedirects != null) this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            if (requestOptions.keepAlive != null) this._keepAlive = requestOptions.keepAlive;
            if (requestOptions.allowRetries != null) this._allowRetries = requestOptions.allowRetries;
            if (requestOptions.maxRetries != null) this._maxRetries = requestOptions.maxRetries;
        }
    }
    options(requestUrl, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */ getJson(requestUrl, additionalHeaders = {}) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            additionalHeaders[$94c37631a9e74248$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.Accept, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[$94c37631a9e74248$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.Accept, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            additionalHeaders[$94c37631a9e74248$var$Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.ContentType, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[$94c37631a9e74248$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.Accept, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            additionalHeaders[$94c37631a9e74248$var$Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.ContentType, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[$94c37631a9e74248$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.Accept, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            additionalHeaders[$94c37631a9e74248$var$Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, $94c37631a9e74248$var$Headers.ContentType, $94c37631a9e74248$var$MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */ request(verb, requestUrl, data, headers) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            if (this._disposed) throw new Error("Client has already been disposed.");
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && $94c37631a9e74248$var$RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response && response.message && response.message.statusCode === $94c37631a9e74248$var$HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers)if (handler.canHandleAuthentication(response)) {
                        authenticationHandler = handler;
                        break;
                    }
                    if (authenticationHandler) return authenticationHandler.handleAuthentication(this, info, data);
                    else // We have received an unauthorized response but have no handlers to handle it.
                    // Let the response return to the caller.
                    return response;
                }
                let redirectsRemaining = this._maxRedirects;
                while(response.message.statusCode && $94c37631a9e74248$var$HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0){
                    const redirectUrl = response.message.headers["location"];
                    if (!redirectUrl) break;
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for(const header in headers)// header names are case insensitive
                        if (header.toLowerCase() === "authorization") delete headers[header];
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode || !$94c37631a9e74248$var$HttpResponseRetryCodes.includes(response.message.statusCode)) // If not a retry code, return immediately instead of retrying
                return response;
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            }while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */ dispose() {
        if (this._agent) this._agent.destroy();
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */ requestRaw(info, data) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve, reject)=>{
                function callbackForResult(err, res) {
                    if (err) reject(err);
                    else if (!res) // If `err` is not passed, then `res` must be passed.
                    reject(new Error("Unknown error"));
                    else resolve(res);
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */ requestRawWithCallback(info, data, onResult) {
        if (typeof data === "string") {
            if (!info.options.headers) info.options.headers = {};
            info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg)=>{
            const res = new $94c37631a9e74248$var$HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on("socket", (sock)=>{
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 180000, ()=>{
            if (socket) socket.end();
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on("error", function(err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === "string") req.write(data, "utf8");
        if (data && typeof data !== "string") {
            data.on("close", function() {
                req.end();
            });
            data.pipe(req);
        } else req.end();
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */ getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = $94c37631a9e74248$var$pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) return;
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? $94c37631a9e74248$var$https : $94c37631a9e74248$var$http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) info.options.headers["user-agent"] = this.userAgent;
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) for (const handler of this.handlers)handler.prepareRequest(info.options);
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) return Object.assign({}, $94c37631a9e74248$var$lowercaseKeys(this.requestOptions.headers), $94c37631a9e74248$var$lowercaseKeys(headers || {}));
        return $94c37631a9e74248$var$lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) clientHeader = $94c37631a9e74248$var$lowercaseKeys(this.requestOptions.headers)[header];
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = $94c37631a9e74248$var$pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) agent = this._proxyAgent;
        if (this._keepAlive && !useProxy) agent = this._agent;
        // if agent is already assigned use that agent.
        if (agent) return agent;
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) maxSockets = this.requestOptions.maxSockets || $94c37631a9e74248$var$http.globalAgent.maxSockets;
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets: maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                }), {
                    host: proxyUrl.hostname,
                    port: proxyUrl.port
                })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === "https:";
            if (usingSsl) tunnelAgent = overHttps ? $94c37631a9e74248$var$tunnel.httpsOverHttps : $94c37631a9e74248$var$tunnel.httpsOverHttp;
            else tunnelAgent = overHttps ? $94c37631a9e74248$var$tunnel.httpOverHttps : $94c37631a9e74248$var$tunnel.httpOverHttp;
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = {
                keepAlive: this._keepAlive,
                maxSockets: maxSockets
            };
            agent = usingSsl ? new $94c37631a9e74248$var$https.Agent(options) : new $94c37631a9e74248$var$http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) agent = usingSsl ? $94c37631a9e74248$var$https.globalAgent : $94c37631a9e74248$var$http.globalAgent;
        if (usingSsl && this._ignoreSslError) // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
        // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
        // we have to cast it to any and change it directly
        agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
        });
        return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) proxyAgent = this._proxyAgentDispatcher;
        // if agent is already assigned use that agent.
        if (proxyAgent) return proxyAgent;
        const usingSsl = parsedUrl.protocol === "https:";
        proxyAgent = new $bEavY.ProxyAgent(Object.assign({
            uri: proxyUrl.href,
            pipelining: !this._keepAlive ? 0 : 1
        }, (proxyUrl.username || proxyUrl.password) && {
            token: `${proxyUrl.username}:${proxyUrl.password}`
        }));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
        // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
        // we have to cast it to any and change it directly
        proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
            rejectUnauthorized: false
        });
        return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            retryNumber = Math.min($94c37631a9e74248$var$ExponentialBackoffCeiling, retryNumber);
            const ms = $94c37631a9e74248$var$ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise((resolve)=>setTimeout(()=>resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return $94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve, reject)=>$94c37631a9e74248$var$__awaiter(this, void 0, void 0, function*() {
                    const statusCode = res.message.statusCode || 0;
                    const response = {
                        statusCode: statusCode,
                        result: null,
                        headers: {}
                    };
                    // not found leads to null obj returned
                    if (statusCode === $94c37631a9e74248$var$HttpCodes.NotFound) resolve(response);
                    // get the result from the body
                    function dateTimeDeserializer(key, value) {
                        if (typeof value === "string") {
                            const a = new Date(value);
                            if (!isNaN(a.valueOf())) return a;
                        }
                        return value;
                    }
                    let obj;
                    let contents;
                    try {
                        contents = yield res.readBody();
                        if (contents && contents.length > 0) {
                            if (options && options.deserializeDates) obj = JSON.parse(contents, dateTimeDeserializer);
                            else obj = JSON.parse(contents);
                            response.result = obj;
                        }
                        response.headers = res.message.headers;
                    } catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                    }
                    // note that 3xx redirects are handled by the http layer.
                    if (statusCode > 299) {
                        let msg;
                        // if exception/error in body, attempt to get better error
                        if (obj && obj.message) msg = obj.message;
                        else if (contents && contents.length > 0) // it may be the case that the exception is in the body message as string
                        msg = contents;
                        else msg = `Failed request: (${statusCode})`;
                        const err = new $94c37631a9e74248$var$HttpClientError(msg, statusCode);
                        err.result = response.result;
                        reject(err);
                    } else resolve(response);
                }));
        });
    }
}
module.exports.HttpClient = $94c37631a9e74248$var$HttpClient;
const $94c37631a9e74248$var$lowercaseKeys = (obj)=>Object.keys(obj).reduce((c, k)=>(c[k.toLowerCase()] = obj[k], c), {});

});
parcelRegister("6TSFn", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.checkBypass = module.exports.getProxyUrl = void 0;
function $506248c1cb0cfead$var$getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === "https:";
    if ($506248c1cb0cfead$var$checkBypass(reqUrl)) return undefined;
    const proxyVar = (()=>{
        if (usingSsl) return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        else return process.env["http_proxy"] || process.env["HTTP_PROXY"];
    })();
    if (proxyVar) try {
        return new URL(proxyVar);
    } catch (_a) {
        if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new URL(`http://${proxyVar}`);
    }
    else return undefined;
}
module.exports.getProxyUrl = $506248c1cb0cfead$var$getProxyUrl;
function $506248c1cb0cfead$var$checkBypass(reqUrl) {
    if (!reqUrl.hostname) return false;
    const reqHost = reqUrl.hostname;
    if ($506248c1cb0cfead$var$isLoopbackAddress(reqHost)) return true;
    const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
    if (!noProxy) return false;
    // Determine the request port
    let reqPort;
    if (reqUrl.port) reqPort = Number(reqUrl.port);
    else if (reqUrl.protocol === "http:") reqPort = 80;
    else if (reqUrl.protocol === "https:") reqPort = 443;
    // Format the request hostname and hostname with port
    const upperReqHosts = [
        reqUrl.hostname.toUpperCase()
    ];
    if (typeof reqPort === "number") upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy.split(",").map((x)=>x.trim().toUpperCase()).filter((x)=>x)){
        if (upperNoProxyItem === "*" || upperReqHosts.some((x)=>x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) return true;
    }
    return false;
}
module.exports.checkBypass = $506248c1cb0cfead$var$checkBypass;
function $506248c1cb0cfead$var$isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
}

});

parcelRegister("3jni9", function(module, exports) {

module.exports = (parcelRequire("8E5Jn"));

});
parcelRegister("8E5Jn", function(module, exports) {

$parcel$export(module.exports, "httpOverHttp", () => $64b68130f47e31b5$export$25cbd437c61a3835, (v) => $64b68130f47e31b5$export$25cbd437c61a3835 = v);
$parcel$export(module.exports, "httpsOverHttp", () => $64b68130f47e31b5$export$c06e3df7111bae43, (v) => $64b68130f47e31b5$export$c06e3df7111bae43 = v);
$parcel$export(module.exports, "httpOverHttps", () => $64b68130f47e31b5$export$5d50e36ef656139f, (v) => $64b68130f47e31b5$export$5d50e36ef656139f = v);
$parcel$export(module.exports, "httpsOverHttps", () => $64b68130f47e31b5$export$212d6605025321cc, (v) => $64b68130f47e31b5$export$212d6605025321cc = v);
$parcel$export(module.exports, "debug", () => $64b68130f47e31b5$export$1c9f709888824e05, (v) => $64b68130f47e31b5$export$1c9f709888824e05 = v);
var $64b68130f47e31b5$export$25cbd437c61a3835;
var $64b68130f47e31b5$export$c06e3df7111bae43;
var $64b68130f47e31b5$export$5d50e36ef656139f;
var $64b68130f47e31b5$export$212d6605025321cc;
var $64b68130f47e31b5$export$1c9f709888824e05;
"use strict";







$64b68130f47e31b5$export$25cbd437c61a3835 = $64b68130f47e31b5$var$httpOverHttp;
$64b68130f47e31b5$export$c06e3df7111bae43 = $64b68130f47e31b5$var$httpsOverHttp;
$64b68130f47e31b5$export$5d50e36ef656139f = $64b68130f47e31b5$var$httpOverHttps;
$64b68130f47e31b5$export$212d6605025321cc = $64b68130f47e31b5$var$httpsOverHttps;
function $64b68130f47e31b5$var$httpOverHttp(options) {
    var agent = new $64b68130f47e31b5$var$TunnelingAgent(options);
    agent.request = $3B1P3$http.request;
    return agent;
}
function $64b68130f47e31b5$var$httpsOverHttp(options) {
    var agent = new $64b68130f47e31b5$var$TunnelingAgent(options);
    agent.request = $3B1P3$http.request;
    agent.createSocket = $64b68130f47e31b5$var$createSecureSocket;
    agent.defaultPort = 443;
    return agent;
}
function $64b68130f47e31b5$var$httpOverHttps(options) {
    var agent = new $64b68130f47e31b5$var$TunnelingAgent(options);
    agent.request = $3B1P3$https.request;
    return agent;
}
function $64b68130f47e31b5$var$httpsOverHttps(options) {
    var agent = new $64b68130f47e31b5$var$TunnelingAgent(options);
    agent.request = $3B1P3$https.request;
    agent.createSocket = $64b68130f47e31b5$var$createSecureSocket;
    agent.defaultPort = 443;
    return agent;
}
function $64b68130f47e31b5$var$TunnelingAgent(options) {
    var self = this;
    self.options = options || {};
    self.proxyOptions = self.options.proxy || {};
    self.maxSockets = self.options.maxSockets || $3B1P3$http.Agent.defaultMaxSockets;
    self.requests = [];
    self.sockets = [];
    self.on("free", function onFree(socket, host, port, localAddress) {
        var options = $64b68130f47e31b5$var$toOptions(host, port, localAddress);
        for(var i = 0, len = self.requests.length; i < len; ++i){
            var pending = self.requests[i];
            if (pending.host === options.host && pending.port === options.port) {
                // Detect the request to connect same origin server,
                // reuse the connection.
                self.requests.splice(i, 1);
                pending.request.onSocket(socket);
                return;
            }
        }
        socket.destroy();
        self.removeSocket(socket);
    });
}
$3B1P3$util.inherits($64b68130f47e31b5$var$TunnelingAgent, $3B1P3$events.EventEmitter);
$64b68130f47e31b5$var$TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
    var self = this;
    var options = $64b68130f47e31b5$var$mergeOptions({
        request: req
    }, self.options, $64b68130f47e31b5$var$toOptions(host, port, localAddress));
    if (self.sockets.length >= this.maxSockets) {
        // We are over limit so we'll add it to the queue.
        self.requests.push(options);
        return;
    }
    // If we are under maxSockets create a new one.
    self.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
            self.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
            self.removeSocket(socket);
            socket.removeListener("free", onFree);
            socket.removeListener("close", onCloseOrRemove);
            socket.removeListener("agentRemove", onCloseOrRemove);
        }
    });
};
$64b68130f47e31b5$var$TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
    var self = this;
    var placeholder = {};
    self.sockets.push(placeholder);
    var connectOptions = $64b68130f47e31b5$var$mergeOptions({}, self.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
            host: options.host + ":" + options.port
        }
    });
    if (options.localAddress) connectOptions.localAddress = options.localAddress;
    if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
    }
    $64b68130f47e31b5$var$debug("making CONNECT request");
    var connectReq = self.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false; // for v0.6
    connectReq.once("response", onResponse); // for v0.6
    connectReq.once("upgrade", onUpgrade); // for v0.6
    connectReq.once("connect", onConnect); // for v0.7 or later
    connectReq.once("error", onError);
    connectReq.end();
    function onResponse(res) {
        // Very hacky. This is necessary to avoid http-parser leaks.
        res.upgrade = true;
    }
    function onUpgrade(res, socket, head) {
        // Hacky.
        process.nextTick(function() {
            onConnect(res, socket, head);
        });
    }
    function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
            $64b68130f47e31b5$var$debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
            socket.destroy();
            var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self.removeSocket(placeholder);
            return;
        }
        if (head.length > 0) {
            $64b68130f47e31b5$var$debug("got illegal response body from proxy");
            socket.destroy();
            var error = new Error("got illegal response body from proxy");
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self.removeSocket(placeholder);
            return;
        }
        $64b68130f47e31b5$var$debug("tunneling connection has established");
        self.sockets[self.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
    }
    function onError(cause) {
        connectReq.removeAllListeners();
        $64b68130f47e31b5$var$debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self.removeSocket(placeholder);
    }
};
$64b68130f47e31b5$var$TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1) return;
    this.sockets.splice(pos, 1);
    var pending = this.requests.shift();
    if (pending) // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
        pending.request.onSocket(socket);
    });
};
function $64b68130f47e31b5$var$createSecureSocket(options, cb) {
    var self = this;
    $64b68130f47e31b5$var$TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = $64b68130f47e31b5$var$mergeOptions({}, self.options, {
            socket: socket,
            servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        // 0 is dummy port for v0.6
        var secureSocket = $3B1P3$tls.connect(0, tlsOptions);
        self.sockets[self.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
    });
}
function $64b68130f47e31b5$var$toOptions(host, port, localAddress) {
    if (typeof host === "string") return {
        host: host,
        port: port,
        localAddress: localAddress
    };
    return host; // for v0.11 or later
}
function $64b68130f47e31b5$var$mergeOptions(target) {
    for(var i = 1, len = arguments.length; i < len; ++i){
        var overrides = arguments[i];
        if (typeof overrides === "object") {
            var keys = Object.keys(overrides);
            for(var j = 0, keyLen = keys.length; j < keyLen; ++j){
                var k = keys[j];
                if (overrides[k] !== undefined) target[k] = overrides[k];
            }
        }
    }
    return target;
}
var $64b68130f47e31b5$var$debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) $64b68130f47e31b5$var$debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === "string") args[0] = "TUNNEL: " + args[0];
    else args.unshift("TUNNEL:");
    console.error.apply(console, args);
};
else $64b68130f47e31b5$var$debug = function() {};
$64b68130f47e31b5$export$1c9f709888824e05 = $64b68130f47e31b5$var$debug; // for test

});


parcelRegister("bEavY", function(module, exports) {

$parcel$export(module.exports, "ProxyAgent", () => $87ab961eea6bd6b2$export$6f9e642c23f9615d, (v) => $87ab961eea6bd6b2$export$6f9e642c23f9615d = v);
$parcel$export(module.exports, "fetch", () => $87ab961eea6bd6b2$export$e7aa7bc5c1b3cfb3, (v) => $87ab961eea6bd6b2$export$e7aa7bc5c1b3cfb3 = v);
var $87ab961eea6bd6b2$export$ab054a1ef92eeb01;
var $87ab961eea6bd6b2$export$1f2bb630327ac4b6;
var $87ab961eea6bd6b2$export$14963ee5c8637e11;
var $87ab961eea6bd6b2$export$3ea9790e91014eeb;
var $87ab961eea6bd6b2$export$f05c48a4001d5356;
var $87ab961eea6bd6b2$export$6f9e642c23f9615d;
var $87ab961eea6bd6b2$export$cfbc337f7857f27a;
var $87ab961eea6bd6b2$export$c3def51f5c0b7771;
var $87ab961eea6bd6b2$export$9af91951fcedc08c;
var $87ab961eea6bd6b2$export$e56ca57b32a6e9c7;
var $87ab961eea6bd6b2$export$ebbe0f536b18196e;
var $87ab961eea6bd6b2$export$30f3b02011db23c0;
var $87ab961eea6bd6b2$export$ea76ac48857e9378;
var $87ab961eea6bd6b2$export$6f0c702cbe7d6ed8;
var $87ab961eea6bd6b2$export$e7aa7bc5c1b3cfb3;
var $87ab961eea6bd6b2$export$79b704688b15c0f4;
var $87ab961eea6bd6b2$export$9f633d56d7ec90d3;
var $87ab961eea6bd6b2$export$7fa6c5b6f8193917;
var $87ab961eea6bd6b2$export$3963aa24c930693c;
var $87ab961eea6bd6b2$export$b6afa8811b7e644e;
var $87ab961eea6bd6b2$export$3c8f13373e08d457;
var $87ab961eea6bd6b2$export$79f8e34925aa870f;
var $87ab961eea6bd6b2$export$4b73629724933f6e;
// Cache & CacheStorage are tightly coupled with fetch. Even if it may run
// in an older version of Node, it doesn't have any use without fetch.
var $87ab961eea6bd6b2$export$50ac77867c9f1e40;
var $87ab961eea6bd6b2$export$b43e45590305ffaa;
var $87ab961eea6bd6b2$export$f3eb5caaef7b2b34;
var $87ab961eea6bd6b2$export$14dd963aa71ac36d;
var $87ab961eea6bd6b2$export$110700823644f4a6;
var $87ab961eea6bd6b2$export$85e6adb445fa3ef0;
var $87ab961eea6bd6b2$export$b00e4516a48bbc61;
var $87ab961eea6bd6b2$export$3909fb301d3dc8c9;
var $87ab961eea6bd6b2$export$b5fe3f66a567bec0;
var $87ab961eea6bd6b2$export$4938110305e6185f;
var $87ab961eea6bd6b2$export$43f28b24e1eb8181;
var $87ab961eea6bd6b2$export$64605811ab45167f;
var $87ab961eea6bd6b2$export$ba387509dbaf942e;
var $87ab961eea6bd6b2$export$8ff68bc3613e0197;
var $87ab961eea6bd6b2$export$e3431e6e5e89c327;
var $87ab961eea6bd6b2$export$44e9728040f17046;
var $87ab961eea6bd6b2$export$7219863409fc71b7;
"use strict";

var $9S8MD = parcelRequire("9S8MD");

var $2qRNu = parcelRequire("2qRNu");

var $k7roP = parcelRequire("k7roP");

var $fNXn9 = parcelRequire("fNXn9");

var $hvgBA = parcelRequire("hvgBA");

var $5HQxx = parcelRequire("5HQxx");

var $3zyxC = parcelRequire("3zyxC");
const { InvalidArgumentError: $87ab961eea6bd6b2$var$InvalidArgumentError } = $k7roP;

var $2mr52 = parcelRequire("2mr52");

var $8Vvyz = parcelRequire("8Vvyz");

var $7nLD2 = parcelRequire("7nLD2");

var $beZvN = parcelRequire("beZvN");

var $ewKZ2 = parcelRequire("ewKZ2");

var $v0cmP = parcelRequire("v0cmP");

var $4aEF5 = parcelRequire("4aEF5");

var $b9FWR = parcelRequire("b9FWR");

var $iOd5O = parcelRequire("iOd5O");
var $87ab961eea6bd6b2$require$getGlobalDispatcher = $iOd5O.getGlobalDispatcher;
var $87ab961eea6bd6b2$require$setGlobalDispatcher = $iOd5O.setGlobalDispatcher;

var $2KLMW = parcelRequire("2KLMW");

var $6exB3 = parcelRequire("6exB3");

var $9sNdt = parcelRequire("9sNdt");
let $87ab961eea6bd6b2$var$hasCrypto;

try {
    $87ab961eea6bd6b2$import$ddd3d8d4c32dbb7f;
    $87ab961eea6bd6b2$var$hasCrypto = true;
} catch  {
    $87ab961eea6bd6b2$var$hasCrypto = false;
}
Object.assign($2qRNu.prototype, $2mr52);
$87ab961eea6bd6b2$export$ab054a1ef92eeb01 = $2qRNu;
$87ab961eea6bd6b2$export$1f2bb630327ac4b6 = $9S8MD;
$87ab961eea6bd6b2$export$14963ee5c8637e11 = $fNXn9;
$87ab961eea6bd6b2$export$3ea9790e91014eeb = $hvgBA;
$87ab961eea6bd6b2$export$f05c48a4001d5356 = $5HQxx;
$87ab961eea6bd6b2$export$6f9e642c23f9615d = $4aEF5;
$87ab961eea6bd6b2$export$cfbc337f7857f27a = $b9FWR;
$87ab961eea6bd6b2$export$c3def51f5c0b7771 = $2KLMW;
$87ab961eea6bd6b2$export$9af91951fcedc08c = $6exB3;
$87ab961eea6bd6b2$export$e56ca57b32a6e9c7 = $9sNdt;
$87ab961eea6bd6b2$export$ebbe0f536b18196e = $8Vvyz;
$87ab961eea6bd6b2$export$30f3b02011db23c0 = $k7roP;
function $87ab961eea6bd6b2$var$makeDispatcher(fn) {
    return (url, opts, handler)=>{
        if (typeof opts === "function") {
            handler = opts;
            opts = null;
        }
        if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) throw new $87ab961eea6bd6b2$var$InvalidArgumentError("invalid url");
        if (opts != null && typeof opts !== "object") throw new $87ab961eea6bd6b2$var$InvalidArgumentError("invalid opts");
        if (opts && opts.path != null) {
            if (typeof opts.path !== "string") throw new $87ab961eea6bd6b2$var$InvalidArgumentError("invalid opts.path");
            let path = opts.path;
            if (!opts.path.startsWith("/")) path = `/${path}`;
            url = new URL($3zyxC.parseOrigin(url).origin + path);
        } else {
            if (!opts) opts = typeof url === "object" ? url : {};
            url = $3zyxC.parseURL(url);
        }
        const { agent: agent, dispatcher: dispatcher = $87ab961eea6bd6b2$require$getGlobalDispatcher() } = opts;
        if (agent) throw new $87ab961eea6bd6b2$var$InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        return fn.call(dispatcher, {
            ...opts,
            origin: url.origin,
            path: url.search ? `${url.pathname}${url.search}` : url.pathname,
            method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
    };
}
$87ab961eea6bd6b2$export$ea76ac48857e9378 = $87ab961eea6bd6b2$require$setGlobalDispatcher;
$87ab961eea6bd6b2$export$6f0c702cbe7d6ed8 = $87ab961eea6bd6b2$require$getGlobalDispatcher;










if ($3zyxC.nodeMajor > 16 || $3zyxC.nodeMajor === 16 && $3zyxC.nodeMinor >= 8) {
    let fetchImpl = null;
    $87ab961eea6bd6b2$export$e7aa7bc5c1b3cfb3 = async function fetch(resource) {
        if (!fetchImpl) fetchImpl = (parcelRequire("6liPj")).fetch;
        try {
            return await fetchImpl(...arguments);
        } catch (err) {
            if (typeof err === "object") Error.captureStackTrace(err, this);
            throw err;
        }
    };
    $87ab961eea6bd6b2$export$79b704688b15c0f4 = (parcelRequire("2qoFF")).Headers;
    $87ab961eea6bd6b2$export$9f633d56d7ec90d3 = (parcelRequire("fhz2k")).Response;
    $87ab961eea6bd6b2$export$7fa6c5b6f8193917 = (parcelRequire("7TBdE")).Request;
    $87ab961eea6bd6b2$export$3963aa24c930693c = (parcelRequire("e2Ka3")).FormData;
    $87ab961eea6bd6b2$export$b6afa8811b7e644e = (parcelRequire("gkgHW")).File;
    $87ab961eea6bd6b2$export$3c8f13373e08d457 = (parcelRequire("hJgHT")).FileReader;
    const { setGlobalOrigin: setGlobalOrigin, getGlobalOrigin: getGlobalOrigin } = (parcelRequire("kQbLp"));
    $87ab961eea6bd6b2$export$79f8e34925aa870f = setGlobalOrigin;
    $87ab961eea6bd6b2$export$4b73629724933f6e = getGlobalOrigin;
    const { CacheStorage: CacheStorage } = (parcelRequire("hcZFM"));
    const { kConstruct: kConstruct } = (parcelRequire("lIr97"));
    $87ab961eea6bd6b2$export$50ac77867c9f1e40 = new CacheStorage(kConstruct);
}


if ($3zyxC.nodeMajor >= 16) {
    const { deleteCookie: deleteCookie, getCookies: getCookies, getSetCookies: getSetCookies, setCookie: setCookie } = (parcelRequire("67n0z"));
    $87ab961eea6bd6b2$export$b43e45590305ffaa = deleteCookie;
    $87ab961eea6bd6b2$export$f3eb5caaef7b2b34 = getCookies;
    $87ab961eea6bd6b2$export$14dd963aa71ac36d = getSetCookies;
    $87ab961eea6bd6b2$export$110700823644f4a6 = setCookie;
    const { parseMIMEType: parseMIMEType, serializeAMimeType: serializeAMimeType } = (parcelRequire("dGZhg"));
    $87ab961eea6bd6b2$export$85e6adb445fa3ef0 = parseMIMEType;
    $87ab961eea6bd6b2$export$b00e4516a48bbc61 = serializeAMimeType;
}

if ($3zyxC.nodeMajor >= 18 && $87ab961eea6bd6b2$var$hasCrypto) {
    const { WebSocket: WebSocket } = (parcelRequire("itmCD"));
    $87ab961eea6bd6b2$export$3909fb301d3dc8c9 = WebSocket;
}
$87ab961eea6bd6b2$export$b5fe3f66a567bec0 = $87ab961eea6bd6b2$var$makeDispatcher($2mr52.request);
$87ab961eea6bd6b2$export$4938110305e6185f = $87ab961eea6bd6b2$var$makeDispatcher($2mr52.stream);
$87ab961eea6bd6b2$export$43f28b24e1eb8181 = $87ab961eea6bd6b2$var$makeDispatcher($2mr52.pipeline);
$87ab961eea6bd6b2$export$64605811ab45167f = $87ab961eea6bd6b2$var$makeDispatcher($2mr52.connect);
$87ab961eea6bd6b2$export$ba387509dbaf942e = $87ab961eea6bd6b2$var$makeDispatcher($2mr52.upgrade);
$87ab961eea6bd6b2$export$8ff68bc3613e0197 = $7nLD2;
$87ab961eea6bd6b2$export$e3431e6e5e89c327 = $ewKZ2;
$87ab961eea6bd6b2$export$44e9728040f17046 = $beZvN;
$87ab961eea6bd6b2$export$7219863409fc71b7 = $v0cmP;

});
parcelRegister("9S8MD", function(module, exports) {
// @ts-check
"use strict";




var $72fff8635e3b1e41$require$pipeline = $3B1P3$stream.pipeline;

var $3zyxC = parcelRequire("3zyxC");

var $fYEPk = parcelRequire("fYEPk");

var $6r15I = parcelRequire("6r15I");

var $rZcCt = parcelRequire("rZcCt");

var $k7roP = parcelRequire("k7roP");
var $72fff8635e3b1e41$require$RequestContentLengthMismatchError = $k7roP.RequestContentLengthMismatchError;
var $72fff8635e3b1e41$require$ResponseContentLengthMismatchError = $k7roP.ResponseContentLengthMismatchError;
var $72fff8635e3b1e41$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $72fff8635e3b1e41$require$RequestAbortedError = $k7roP.RequestAbortedError;
var $72fff8635e3b1e41$require$HeadersTimeoutError = $k7roP.HeadersTimeoutError;
var $72fff8635e3b1e41$require$HeadersOverflowError = $k7roP.HeadersOverflowError;
var $72fff8635e3b1e41$require$SocketError = $k7roP.SocketError;
var $72fff8635e3b1e41$require$InformationalError = $k7roP.InformationalError;
var $72fff8635e3b1e41$require$BodyTimeoutError = $k7roP.BodyTimeoutError;
var $72fff8635e3b1e41$require$HTTPParserError = $k7roP.HTTPParserError;
var $72fff8635e3b1e41$require$ResponseExceededMaxSizeError = $k7roP.ResponseExceededMaxSizeError;
var $72fff8635e3b1e41$require$ClientDestroyedError = $k7roP.ClientDestroyedError;

var $8Vvyz = parcelRequire("8Vvyz");

var $lbv7W = parcelRequire("lbv7W");
var $72fff8635e3b1e41$require$kUrl = $lbv7W.kUrl;
var $72fff8635e3b1e41$require$kReset = $lbv7W.kReset;
var $72fff8635e3b1e41$require$kServerName = $lbv7W.kServerName;
var $72fff8635e3b1e41$require$kClient = $lbv7W.kClient;
var $72fff8635e3b1e41$require$kBusy = $lbv7W.kBusy;
var $72fff8635e3b1e41$require$kParser = $lbv7W.kParser;
var $72fff8635e3b1e41$require$kConnect = $lbv7W.kConnect;
var $72fff8635e3b1e41$require$kBlocking = $lbv7W.kBlocking;
var $72fff8635e3b1e41$require$kResuming = $lbv7W.kResuming;
var $72fff8635e3b1e41$require$kRunning = $lbv7W.kRunning;
var $72fff8635e3b1e41$require$kPending = $lbv7W.kPending;
var $72fff8635e3b1e41$require$kSize = $lbv7W.kSize;
var $72fff8635e3b1e41$require$kWriting = $lbv7W.kWriting;
var $72fff8635e3b1e41$require$kQueue = $lbv7W.kQueue;
var $72fff8635e3b1e41$require$kConnected = $lbv7W.kConnected;
var $72fff8635e3b1e41$require$kConnecting = $lbv7W.kConnecting;
var $72fff8635e3b1e41$require$kNeedDrain = $lbv7W.kNeedDrain;
var $72fff8635e3b1e41$require$kNoRef = $lbv7W.kNoRef;
var $72fff8635e3b1e41$require$kKeepAliveDefaultTimeout = $lbv7W.kKeepAliveDefaultTimeout;
var $72fff8635e3b1e41$require$kHostHeader = $lbv7W.kHostHeader;
var $72fff8635e3b1e41$require$kPendingIdx = $lbv7W.kPendingIdx;
var $72fff8635e3b1e41$require$kRunningIdx = $lbv7W.kRunningIdx;
var $72fff8635e3b1e41$require$kError = $lbv7W.kError;
var $72fff8635e3b1e41$require$kPipelining = $lbv7W.kPipelining;
var $72fff8635e3b1e41$require$kSocket = $lbv7W.kSocket;
var $72fff8635e3b1e41$require$kKeepAliveTimeoutValue = $lbv7W.kKeepAliveTimeoutValue;
var $72fff8635e3b1e41$require$kMaxHeadersSize = $lbv7W.kMaxHeadersSize;
var $72fff8635e3b1e41$require$kKeepAliveMaxTimeout = $lbv7W.kKeepAliveMaxTimeout;
var $72fff8635e3b1e41$require$kKeepAliveTimeoutThreshold = $lbv7W.kKeepAliveTimeoutThreshold;
var $72fff8635e3b1e41$require$kHeadersTimeout = $lbv7W.kHeadersTimeout;
var $72fff8635e3b1e41$require$kBodyTimeout = $lbv7W.kBodyTimeout;
var $72fff8635e3b1e41$require$kStrictContentLength = $lbv7W.kStrictContentLength;
var $72fff8635e3b1e41$require$kConnector = $lbv7W.kConnector;
var $72fff8635e3b1e41$require$kMaxRedirections = $lbv7W.kMaxRedirections;
var $72fff8635e3b1e41$require$kMaxRequests = $lbv7W.kMaxRequests;
var $72fff8635e3b1e41$require$kCounter = $lbv7W.kCounter;
var $72fff8635e3b1e41$require$kClose = $lbv7W.kClose;
var $72fff8635e3b1e41$require$kDestroy = $lbv7W.kDestroy;
var $72fff8635e3b1e41$require$kDispatch = $lbv7W.kDispatch;
var $72fff8635e3b1e41$require$kInterceptors = $lbv7W.kInterceptors;
var $72fff8635e3b1e41$require$kLocalAddress = $lbv7W.kLocalAddress;
var $72fff8635e3b1e41$require$kMaxResponseSize = $lbv7W.kMaxResponseSize;
var $72fff8635e3b1e41$require$kHTTPConnVersion = $lbv7W.kHTTPConnVersion;
var $72fff8635e3b1e41$require$kHost = $lbv7W.kHost;
var $72fff8635e3b1e41$require$kHTTP2Session = $lbv7W.kHTTP2Session;
var $72fff8635e3b1e41$require$kHTTP2SessionState = $lbv7W.kHTTP2SessionState;
var $72fff8635e3b1e41$require$kHTTP2BuildRequest = $lbv7W.kHTTP2BuildRequest;
var $72fff8635e3b1e41$require$kHTTP2CopyHeaders = $lbv7W.kHTTP2CopyHeaders;
var $72fff8635e3b1e41$require$kHTTP1BuildRequest = $lbv7W.kHTTP1BuildRequest;
/** @type {import('http2')} */ let $72fff8635e3b1e41$var$http2;

try {
    $72fff8635e3b1e41$var$http2 = $72fff8635e3b1e41$import$dc5c58500bc5a0ce;
} catch  {
    // @ts-ignore
    $72fff8635e3b1e41$var$http2 = {
        constants: {}
    };
}
const { constants: { HTTP2_HEADER_AUTHORITY: $72fff8635e3b1e41$var$HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD: $72fff8635e3b1e41$var$HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH: $72fff8635e3b1e41$var$HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME: $72fff8635e3b1e41$var$HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH: $72fff8635e3b1e41$var$HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT: $72fff8635e3b1e41$var$HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS: $72fff8635e3b1e41$var$HTTP2_HEADER_STATUS } } = $72fff8635e3b1e41$var$http2;
// Experimental
let $72fff8635e3b1e41$var$h2ExperimentalWarned = false;
const $72fff8635e3b1e41$var$FastBuffer = Buffer[Symbol.species];
const $72fff8635e3b1e41$var$kClosedResolve = Symbol("kClosedResolve");
const $72fff8635e3b1e41$var$channels = {};

try {
    const diagnosticsChannel = $72fff8635e3b1e41$import$448217ca25882f04;
    $72fff8635e3b1e41$var$channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
    $72fff8635e3b1e41$var$channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
    $72fff8635e3b1e41$var$channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
    $72fff8635e3b1e41$var$channels.connected = diagnosticsChannel.channel("undici:client:connected");
} catch  {
    $72fff8635e3b1e41$var$channels.sendHeaders = {
        hasSubscribers: false
    };
    $72fff8635e3b1e41$var$channels.beforeConnect = {
        hasSubscribers: false
    };
    $72fff8635e3b1e41$var$channels.connectError = {
        hasSubscribers: false
    };
    $72fff8635e3b1e41$var$channels.connected = {
        hasSubscribers: false
    };
}
/**
 * @type {import('../types/client').default}
 */ class $72fff8635e3b1e41$var$Client extends $rZcCt {
    /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */ constructor(url, { interceptors: interceptors, maxHeaderSize: maxHeaderSize, headersTimeout: headersTimeout, socketTimeout: socketTimeout, requestTimeout: requestTimeout, connectTimeout: connectTimeout, bodyTimeout: bodyTimeout, idleTimeout: idleTimeout, keepAlive: keepAlive, keepAliveTimeout: keepAliveTimeout, maxKeepAliveTimeout: maxKeepAliveTimeout, keepAliveMaxTimeout: keepAliveMaxTimeout, keepAliveTimeoutThreshold: keepAliveTimeoutThreshold, socketPath: socketPath, pipelining: pipelining, tls: tls, strictContentLength: strictContentLength, maxCachedSessions: maxCachedSessions, maxRedirections: maxRedirections, connect: connect, maxRequestsPerClient: maxRequestsPerClient, localAddress: localAddress, maxResponseSize: maxResponseSize, autoSelectFamily: autoSelectFamily, autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout, allowH2: // h2
    allowH2, maxConcurrentStreams: maxConcurrentStreams } = {}){
        super();
        if (keepAlive !== undefined) throw new $72fff8635e3b1e41$require$InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        if (socketTimeout !== undefined) throw new $72fff8635e3b1e41$require$InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        if (requestTimeout !== undefined) throw new $72fff8635e3b1e41$require$InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        if (idleTimeout !== undefined) throw new $72fff8635e3b1e41$require$InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        if (maxKeepAliveTimeout !== undefined) throw new $72fff8635e3b1e41$require$InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("invalid maxHeaderSize");
        if (socketPath != null && typeof socketPath !== "string") throw new $72fff8635e3b1e41$require$InvalidArgumentError("invalid socketPath");
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("invalid connectTimeout");
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("invalid keepAliveTimeout");
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("invalid keepAliveMaxTimeout");
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("headersTimeout must be a positive integer or zero");
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") throw new $72fff8635e3b1e41$require$InvalidArgumentError("connect must be a function or an object");
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("maxRedirections must be a positive number");
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("maxRequestsPerClient must be a positive number");
        if (localAddress != null && (typeof localAddress !== "string" || $3B1P3$net.isIP(localAddress) === 0)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("localAddress must be valid string IP address");
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("maxResponseSize must be a positive number");
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        // h2
        if (allowH2 != null && typeof allowH2 !== "boolean") throw new $72fff8635e3b1e41$require$InvalidArgumentError("allowH2 must be a valid boolean value");
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new $72fff8635e3b1e41$require$InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        if (typeof connect !== "function") connect = $8Vvyz({
            ...tls,
            maxCachedSessions: maxCachedSessions,
            allowH2: allowH2,
            socketPath: socketPath,
            timeout: connectTimeout,
            ...$3zyxC.nodeHasAutoSelectFamily && autoSelectFamily ? {
                autoSelectFamily: autoSelectFamily,
                autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout
            } : undefined,
            ...connect
        });
        this[$72fff8635e3b1e41$require$kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [
            $9sNdt({
                maxRedirections: maxRedirections
            })
        ];
        this[$72fff8635e3b1e41$require$kUrl] = $3zyxC.parseOrigin(url);
        this[$72fff8635e3b1e41$require$kConnector] = connect;
        this[$72fff8635e3b1e41$require$kSocket] = null;
        this[$72fff8635e3b1e41$require$kPipelining] = pipelining != null ? pipelining : 1;
        this[$72fff8635e3b1e41$require$kMaxHeadersSize] = maxHeaderSize || $3B1P3$http.maxHeaderSize;
        this[$72fff8635e3b1e41$require$kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[$72fff8635e3b1e41$require$kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;
        this[$72fff8635e3b1e41$require$kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[$72fff8635e3b1e41$require$kKeepAliveTimeoutValue] = this[$72fff8635e3b1e41$require$kKeepAliveDefaultTimeout];
        this[$72fff8635e3b1e41$require$kServerName] = null;
        this[$72fff8635e3b1e41$require$kLocalAddress] = localAddress != null ? localAddress : null;
        this[$72fff8635e3b1e41$require$kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
        ;
        this[$72fff8635e3b1e41$require$kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
        ;
        this[$72fff8635e3b1e41$require$kHostHeader] = `host: ${this[$72fff8635e3b1e41$require$kUrl].hostname}${this[$72fff8635e3b1e41$require$kUrl].port ? `:${this[$72fff8635e3b1e41$require$kUrl].port}` : ""}\r\n`;
        this[$72fff8635e3b1e41$require$kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;
        this[$72fff8635e3b1e41$require$kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;
        this[$72fff8635e3b1e41$require$kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[$72fff8635e3b1e41$require$kMaxRedirections] = maxRedirections;
        this[$72fff8635e3b1e41$require$kMaxRequests] = maxRequestsPerClient;
        this[$72fff8635e3b1e41$var$kClosedResolve] = null;
        this[$72fff8635e3b1e41$require$kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[$72fff8635e3b1e41$require$kHTTPConnVersion] = "h1";
        // HTTP/2
        this[$72fff8635e3b1e41$require$kHTTP2Session] = null;
        this[$72fff8635e3b1e41$require$kHTTP2SessionState] = !allowH2 ? null : {
            // streams: null, // Fixed queue of streams - For future support of `push`
            openStreams: 0,
            maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
        };
        this[$72fff8635e3b1e41$require$kHost] = `${this[$72fff8635e3b1e41$require$kUrl].hostname}${this[$72fff8635e3b1e41$require$kUrl].port ? `:${this[$72fff8635e3b1e41$require$kUrl].port}` : ""}`;
        // kQueue is built up of 3 sections separated by
        // the kRunningIdx and kPendingIdx indices.
        // |   complete   |   running   |   pending   |
        //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
        // kRunningIdx points to the first running element.
        // kPendingIdx points to the first pending element.
        // This implements a fast queue with an amortized
        // time of O(1).
        this[$72fff8635e3b1e41$require$kQueue] = [];
        this[$72fff8635e3b1e41$require$kRunningIdx] = 0;
        this[$72fff8635e3b1e41$require$kPendingIdx] = 0;
    }
    get pipelining() {
        return this[$72fff8635e3b1e41$require$kPipelining];
    }
    set pipelining(value) {
        this[$72fff8635e3b1e41$require$kPipelining] = value;
        $72fff8635e3b1e41$var$resume(this, true);
    }
    get [$72fff8635e3b1e41$require$kPending]() {
        return this[$72fff8635e3b1e41$require$kQueue].length - this[$72fff8635e3b1e41$require$kPendingIdx];
    }
    get [$72fff8635e3b1e41$require$kRunning]() {
        return this[$72fff8635e3b1e41$require$kPendingIdx] - this[$72fff8635e3b1e41$require$kRunningIdx];
    }
    get [$72fff8635e3b1e41$require$kSize]() {
        return this[$72fff8635e3b1e41$require$kQueue].length - this[$72fff8635e3b1e41$require$kRunningIdx];
    }
    get [$72fff8635e3b1e41$require$kConnected]() {
        return !!this[$72fff8635e3b1e41$require$kSocket] && !this[$72fff8635e3b1e41$require$kConnecting] && !this[$72fff8635e3b1e41$require$kSocket].destroyed;
    }
    get [$72fff8635e3b1e41$require$kBusy]() {
        const socket = this[$72fff8635e3b1e41$require$kSocket];
        return socket && (socket[$72fff8635e3b1e41$require$kReset] || socket[$72fff8635e3b1e41$require$kWriting] || socket[$72fff8635e3b1e41$require$kBlocking]) || this[$72fff8635e3b1e41$require$kSize] >= (this[$72fff8635e3b1e41$require$kPipelining] || 1) || this[$72fff8635e3b1e41$require$kPending] > 0;
    }
    /* istanbul ignore: only used for test */ [$72fff8635e3b1e41$require$kConnect](cb) {
        $72fff8635e3b1e41$var$connect(this);
        this.once("connect", cb);
    }
    [$72fff8635e3b1e41$require$kDispatch](opts, handler) {
        const origin = opts.origin || this[$72fff8635e3b1e41$require$kUrl].origin;
        const request = this[$72fff8635e3b1e41$require$kHTTPConnVersion] === "h2" ? $6r15I[$72fff8635e3b1e41$require$kHTTP2BuildRequest](origin, opts, handler) : $6r15I[$72fff8635e3b1e41$require$kHTTP1BuildRequest](origin, opts, handler);
        this[$72fff8635e3b1e41$require$kQueue].push(request);
        if (this[$72fff8635e3b1e41$require$kResuming]) ;
        else if ($3zyxC.bodyLength(request.body) == null && $3zyxC.isIterable(request.body)) {
            // Wait a tick in case stream/iterator is ended in the same tick.
            this[$72fff8635e3b1e41$require$kResuming] = 1;
            process.nextTick($72fff8635e3b1e41$var$resume, this);
        } else $72fff8635e3b1e41$var$resume(this, true);
        if (this[$72fff8635e3b1e41$require$kResuming] && this[$72fff8635e3b1e41$require$kNeedDrain] !== 2 && this[$72fff8635e3b1e41$require$kBusy]) this[$72fff8635e3b1e41$require$kNeedDrain] = 2;
        return this[$72fff8635e3b1e41$require$kNeedDrain] < 2;
    }
    async [$72fff8635e3b1e41$require$kClose]() {
        // TODO: for H2 we need to gracefully flush the remaining enqueued
        // request and close each stream.
        return new Promise((resolve)=>{
            if (!this[$72fff8635e3b1e41$require$kSize]) resolve(null);
            else this[$72fff8635e3b1e41$var$kClosedResolve] = resolve;
        });
    }
    async [$72fff8635e3b1e41$require$kDestroy](err) {
        return new Promise((resolve)=>{
            const requests = this[$72fff8635e3b1e41$require$kQueue].splice(this[$72fff8635e3b1e41$require$kPendingIdx]);
            for(let i = 0; i < requests.length; i++){
                const request = requests[i];
                $72fff8635e3b1e41$var$errorRequest(this, request, err);
            }
            const callback = ()=>{
                if (this[$72fff8635e3b1e41$var$kClosedResolve]) {
                    // TODO (fix): Should we error here with ClientDestroyedError?
                    this[$72fff8635e3b1e41$var$kClosedResolve]();
                    this[$72fff8635e3b1e41$var$kClosedResolve] = null;
                }
                resolve();
            };
            if (this[$72fff8635e3b1e41$require$kHTTP2Session] != null) {
                $3zyxC.destroy(this[$72fff8635e3b1e41$require$kHTTP2Session], err);
                this[$72fff8635e3b1e41$require$kHTTP2Session] = null;
                this[$72fff8635e3b1e41$require$kHTTP2SessionState] = null;
            }
            if (!this[$72fff8635e3b1e41$require$kSocket]) queueMicrotask(callback);
            else $3zyxC.destroy(this[$72fff8635e3b1e41$require$kSocket].on("close", callback), err);
            $72fff8635e3b1e41$var$resume(this);
        });
    }
}
function $72fff8635e3b1e41$var$onHttp2SessionError(err) {
    $3B1P3$assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    this[$72fff8635e3b1e41$require$kSocket][$72fff8635e3b1e41$require$kError] = err;
    $72fff8635e3b1e41$var$onError(this[$72fff8635e3b1e41$require$kClient], err);
}
function $72fff8635e3b1e41$var$onHttp2FrameError(type, code, id) {
    const err = new $72fff8635e3b1e41$require$InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
    if (id === 0) {
        this[$72fff8635e3b1e41$require$kSocket][$72fff8635e3b1e41$require$kError] = err;
        $72fff8635e3b1e41$var$onError(this[$72fff8635e3b1e41$require$kClient], err);
    }
}
function $72fff8635e3b1e41$var$onHttp2SessionEnd() {
    $3zyxC.destroy(this, new $72fff8635e3b1e41$require$SocketError("other side closed"));
    $3zyxC.destroy(this[$72fff8635e3b1e41$require$kSocket], new $72fff8635e3b1e41$require$SocketError("other side closed"));
}
function $72fff8635e3b1e41$var$onHTTP2GoAway(code) {
    const client = this[$72fff8635e3b1e41$require$kClient];
    const err = new $72fff8635e3b1e41$require$InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
    client[$72fff8635e3b1e41$require$kSocket] = null;
    client[$72fff8635e3b1e41$require$kHTTP2Session] = null;
    if (client.destroyed) {
        $3B1P3$assert(this[$72fff8635e3b1e41$require$kPending] === 0);
        // Fail entire queue.
        const requests = client[$72fff8635e3b1e41$require$kQueue].splice(client[$72fff8635e3b1e41$require$kRunningIdx]);
        for(let i = 0; i < requests.length; i++){
            const request = requests[i];
            $72fff8635e3b1e41$var$errorRequest(this, request, err);
        }
    } else if (client[$72fff8635e3b1e41$require$kRunning] > 0) {
        // Fail head of pipeline.
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]++] = null;
        $72fff8635e3b1e41$var$errorRequest(client, request, err);
    }
    client[$72fff8635e3b1e41$require$kPendingIdx] = client[$72fff8635e3b1e41$require$kRunningIdx];
    $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] === 0);
    client.emit("disconnect", client[$72fff8635e3b1e41$require$kUrl], [
        client
    ], err);
    $72fff8635e3b1e41$var$resume(client);
}

var $jGj3E = parcelRequire("jGj3E");

var $9sNdt = parcelRequire("9sNdt");
const $72fff8635e3b1e41$var$EMPTY_BUF = Buffer.alloc(0);



async function $72fff8635e3b1e41$var$lazyllhttp() {
    const llhttpWasmData = process.env.JEST_WORKER_ID ? (parcelRequire("gxO6E")) : undefined;
    let mod;
    try {
        mod = await WebAssembly.compile(Buffer.from((parcelRequire("hzsOQ")), "base64"));
    } catch (e) {
        /* istanbul ignore next */ // We could check if the error was caused by the simd option not
        // being enabled, but the occurring of this other error
        // * https://github.com/emscripten-core/emscripten/issues/11495
        // got me to remove that check to avoid breaking Node 12.
        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || (parcelRequire("gxO6E")), "base64"));
    }
    return await WebAssembly.instantiate(mod, {
        env: {
            /* eslint-disable camelcase */ wasm_on_url: (p, at, len)=>{
                /* istanbul ignore next */ return 0;
            },
            wasm_on_status: (p, at, len)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                const start = at - $72fff8635e3b1e41$var$currentBufferPtr + $72fff8635e3b1e41$var$currentBufferRef.byteOffset;
                return $72fff8635e3b1e41$var$currentParser.onStatus(new $72fff8635e3b1e41$var$FastBuffer($72fff8635e3b1e41$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_message_begin: (p)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                return $72fff8635e3b1e41$var$currentParser.onMessageBegin() || 0;
            },
            wasm_on_header_field: (p, at, len)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                const start = at - $72fff8635e3b1e41$var$currentBufferPtr + $72fff8635e3b1e41$var$currentBufferRef.byteOffset;
                return $72fff8635e3b1e41$var$currentParser.onHeaderField(new $72fff8635e3b1e41$var$FastBuffer($72fff8635e3b1e41$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_header_value: (p, at, len)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                const start = at - $72fff8635e3b1e41$var$currentBufferPtr + $72fff8635e3b1e41$var$currentBufferRef.byteOffset;
                return $72fff8635e3b1e41$var$currentParser.onHeaderValue(new $72fff8635e3b1e41$var$FastBuffer($72fff8635e3b1e41$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                return $72fff8635e3b1e41$var$currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
            },
            wasm_on_body: (p, at, len)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                const start = at - $72fff8635e3b1e41$var$currentBufferPtr + $72fff8635e3b1e41$var$currentBufferRef.byteOffset;
                return $72fff8635e3b1e41$var$currentParser.onBody(new $72fff8635e3b1e41$var$FastBuffer($72fff8635e3b1e41$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_message_complete: (p)=>{
                $3B1P3$assert.strictEqual($72fff8635e3b1e41$var$currentParser.ptr, p);
                return $72fff8635e3b1e41$var$currentParser.onMessageComplete() || 0;
            }
        }
    });
}
let $72fff8635e3b1e41$var$llhttpInstance = null;
let $72fff8635e3b1e41$var$llhttpPromise = $72fff8635e3b1e41$var$lazyllhttp();
$72fff8635e3b1e41$var$llhttpPromise.catch();
let $72fff8635e3b1e41$var$currentParser = null;
let $72fff8635e3b1e41$var$currentBufferRef = null;
let $72fff8635e3b1e41$var$currentBufferSize = 0;
let $72fff8635e3b1e41$var$currentBufferPtr = null;
const $72fff8635e3b1e41$var$TIMEOUT_HEADERS = 1;
const $72fff8635e3b1e41$var$TIMEOUT_BODY = 2;
const $72fff8635e3b1e41$var$TIMEOUT_IDLE = 3;
class $72fff8635e3b1e41$var$Parser {
    constructor(client, socket, { exports: exports }){
        $3B1P3$assert(Number.isFinite(client[$72fff8635e3b1e41$require$kMaxHeadersSize]) && client[$72fff8635e3b1e41$require$kMaxHeadersSize] > 0);
        this.llhttp = exports;
        this.ptr = this.llhttp.llhttp_alloc($jGj3E.TYPE.RESPONSE);
        this.client = client;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client[$72fff8635e3b1e41$require$kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client[$72fff8635e3b1e41$require$kMaxResponseSize];
    }
    setTimeout(value, type) {
        this.timeoutType = type;
        if (value !== this.timeoutValue) {
            $fYEPk.clearTimeout(this.timeout);
            if (value) {
                this.timeout = $fYEPk.setTimeout($72fff8635e3b1e41$var$onParserTimeout, value, this);
                // istanbul ignore else: only for jest
                if (this.timeout.unref) this.timeout.unref();
            } else this.timeout = null;
            this.timeoutValue = value;
        } else if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
    }
    resume() {
        if (this.socket.destroyed || !this.paused) return;
        $3B1P3$assert(this.ptr != null);
        $3B1P3$assert($72fff8635e3b1e41$var$currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        $3B1P3$assert(this.timeoutType === $72fff8635e3b1e41$var$TIMEOUT_BODY);
        if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
        this.paused = false;
        this.execute(this.socket.read() || $72fff8635e3b1e41$var$EMPTY_BUF) // Flush parser.
        ;
        this.readMore();
    }
    readMore() {
        while(!this.paused && this.ptr){
            const chunk = this.socket.read();
            if (chunk === null) break;
            this.execute(chunk);
        }
    }
    execute(data) {
        $3B1P3$assert(this.ptr != null);
        $3B1P3$assert($72fff8635e3b1e41$var$currentParser == null);
        $3B1P3$assert(!this.paused);
        const { socket: socket, llhttp: llhttp } = this;
        if (data.length > $72fff8635e3b1e41$var$currentBufferSize) {
            if ($72fff8635e3b1e41$var$currentBufferPtr) llhttp.free($72fff8635e3b1e41$var$currentBufferPtr);
            $72fff8635e3b1e41$var$currentBufferSize = Math.ceil(data.length / 4096) * 4096;
            $72fff8635e3b1e41$var$currentBufferPtr = llhttp.malloc($72fff8635e3b1e41$var$currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, $72fff8635e3b1e41$var$currentBufferPtr, $72fff8635e3b1e41$var$currentBufferSize).set(data);
        // Call `execute` on the wasm parser.
        // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
        // and finally the length of bytes to parse.
        // The return value is an error code or `constants.ERROR.OK`.
        try {
            let ret;
            try {
                $72fff8635e3b1e41$var$currentBufferRef = data;
                $72fff8635e3b1e41$var$currentParser = this;
                ret = llhttp.llhttp_execute(this.ptr, $72fff8635e3b1e41$var$currentBufferPtr, data.length);
            /* eslint-disable-next-line no-useless-catch */ } catch (err) {
                /* istanbul ignore next: difficult to make a test case for */ throw err;
            } finally{
                $72fff8635e3b1e41$var$currentParser = null;
                $72fff8635e3b1e41$var$currentBufferRef = null;
            }
            const offset = llhttp.llhttp_get_error_pos(this.ptr) - $72fff8635e3b1e41$var$currentBufferPtr;
            if (ret === $jGj3E.ERROR.PAUSED_UPGRADE) this.onUpgrade(data.slice(offset));
            else if (ret === $jGj3E.ERROR.PAUSED) {
                this.paused = true;
                socket.unshift(data.slice(offset));
            } else if (ret !== $jGj3E.ERROR.OK) {
                const ptr = llhttp.llhttp_get_error_reason(this.ptr);
                let message = "";
                /* istanbul ignore else: difficult to make a test case for */ if (ptr) {
                    const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
                    message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
                }
                throw new $72fff8635e3b1e41$require$HTTPParserError(message, $jGj3E.ERROR[ret], data.slice(offset));
            }
        } catch (err) {
            $3zyxC.destroy(socket, err);
        }
    }
    destroy() {
        $3B1P3$assert(this.ptr != null);
        $3B1P3$assert($72fff8635e3b1e41$var$currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        $fYEPk.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
    }
    onStatus(buf) {
        this.statusText = buf.toString();
    }
    onMessageBegin() {
        const { socket: socket, client: client } = this;
        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) return -1;
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        if (!request) return -1;
    }
    onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) this.headers.push(buf);
        else this.headers[len - 1] = Buffer.concat([
            this.headers[len - 1],
            buf
        ]);
        this.trackHeader(buf.length);
    }
    onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
            this.headers.push(buf);
            len += 1;
        } else this.headers[len - 1] = Buffer.concat([
            this.headers[len - 1],
            buf
        ]);
        const key = this.headers[len - 2];
        if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") this.keepAlive += buf.toString();
        else if (key.length === 10 && key.toString().toLowerCase() === "connection") this.connection += buf.toString();
        else if (key.length === 14 && key.toString().toLowerCase() === "content-length") this.contentLength += buf.toString();
        this.trackHeader(buf.length);
    }
    trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) $3zyxC.destroy(this.socket, new $72fff8635e3b1e41$require$HeadersOverflowError());
    }
    onUpgrade(head) {
        const { upgrade: upgrade, client: client, socket: socket, headers: headers, statusCode: statusCode } = this;
        $3B1P3$assert(upgrade);
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        $3B1P3$assert(request);
        $3B1P3$assert(!socket.destroyed);
        $3B1P3$assert(socket === client[$72fff8635e3b1e41$require$kSocket]);
        $3B1P3$assert(!this.paused);
        $3B1P3$assert(request.upgrade || request.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        $3B1P3$assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head);
        socket[$72fff8635e3b1e41$require$kParser].destroy();
        socket[$72fff8635e3b1e41$require$kParser] = null;
        socket[$72fff8635e3b1e41$require$kClient] = null;
        socket[$72fff8635e3b1e41$require$kError] = null;
        socket.removeListener("error", $72fff8635e3b1e41$var$onSocketError).removeListener("readable", $72fff8635e3b1e41$var$onSocketReadable).removeListener("end", $72fff8635e3b1e41$var$onSocketEnd).removeListener("close", $72fff8635e3b1e41$var$onSocketClose);
        client[$72fff8635e3b1e41$require$kSocket] = null;
        client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]++] = null;
        client.emit("disconnect", client[$72fff8635e3b1e41$require$kUrl], [
            client
        ], new $72fff8635e3b1e41$require$InformationalError("upgrade"));
        try {
            request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
            $3zyxC.destroy(socket, err);
        }
        $72fff8635e3b1e41$var$resume(client);
    }
    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client: client, socket: socket, headers: headers, statusText: statusText } = this;
        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) return -1;
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        /* istanbul ignore next: difficult to make a test case for */ if (!request) return -1;
        $3B1P3$assert(!this.upgrade);
        $3B1P3$assert(this.statusCode < 200);
        if (statusCode === 100) {
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$SocketError("bad response", $3zyxC.getSocketInfo(socket)));
            return -1;
        }
        /* this can only happen if server is misbehaving */ if (upgrade && !request.upgrade) {
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$SocketError("bad upgrade", $3zyxC.getSocketInfo(socket)));
            return -1;
        }
        $3B1P3$assert.strictEqual(this.timeoutType, $72fff8635e3b1e41$var$TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request.method === "HEAD" && !socket[$72fff8635e3b1e41$require$kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
            const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[$72fff8635e3b1e41$require$kBodyTimeout];
            this.setTimeout(bodyTimeout, $72fff8635e3b1e41$var$TIMEOUT_BODY);
        } else if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
        if (request.method === "CONNECT") {
            $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] === 1);
            this.upgrade = true;
            return 2;
        }
        if (upgrade) {
            $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] === 1);
            this.upgrade = true;
            return 2;
        }
        $3B1P3$assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client[$72fff8635e3b1e41$require$kPipelining]) {
            const keepAliveTimeout = this.keepAlive ? $3zyxC.parseKeepAliveTimeout(this.keepAlive) : null;
            if (keepAliveTimeout != null) {
                const timeout = Math.min(keepAliveTimeout - client[$72fff8635e3b1e41$require$kKeepAliveTimeoutThreshold], client[$72fff8635e3b1e41$require$kKeepAliveMaxTimeout]);
                if (timeout <= 0) socket[$72fff8635e3b1e41$require$kReset] = true;
                else client[$72fff8635e3b1e41$require$kKeepAliveTimeoutValue] = timeout;
            } else client[$72fff8635e3b1e41$require$kKeepAliveTimeoutValue] = client[$72fff8635e3b1e41$require$kKeepAliveDefaultTimeout];
        } else // Stop more requests from being dispatched.
        socket[$72fff8635e3b1e41$require$kReset] = true;
        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request.aborted) return -1;
        if (request.method === "HEAD") return 1;
        if (statusCode < 200) return 1;
        if (socket[$72fff8635e3b1e41$require$kBlocking]) {
            socket[$72fff8635e3b1e41$require$kBlocking] = false;
            $72fff8635e3b1e41$var$resume(client);
        }
        return pause ? $jGj3E.ERROR.PAUSED : 0;
    }
    onBody(buf) {
        const { client: client, socket: socket, statusCode: statusCode, maxResponseSize: maxResponseSize } = this;
        if (socket.destroyed) return -1;
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        $3B1P3$assert(request);
        $3B1P3$assert.strictEqual(this.timeoutType, $72fff8635e3b1e41$var$TIMEOUT_BODY);
        if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
        $3B1P3$assert(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$ResponseExceededMaxSizeError());
            return -1;
        }
        this.bytesRead += buf.length;
        if (request.onData(buf) === false) return $jGj3E.ERROR.PAUSED;
    }
    onMessageComplete() {
        const { client: client, socket: socket, statusCode: statusCode, upgrade: upgrade, headers: headers, contentLength: contentLength, bytesRead: bytesRead, shouldKeepAlive: shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
        if (upgrade) return;
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        $3B1P3$assert(request);
        $3B1P3$assert(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        $3B1P3$assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) return;
        /* istanbul ignore next: should be handled by llhttp? */ if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$ResponseContentLengthMismatchError());
            return -1;
        }
        request.onComplete(headers);
        client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]++] = null;
        if (socket[$72fff8635e3b1e41$require$kWriting]) {
            $3B1P3$assert.strictEqual(client[$72fff8635e3b1e41$require$kRunning], 0);
            // Response completed before request.
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$InformationalError("reset"));
            return $jGj3E.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$InformationalError("reset"));
            return $jGj3E.ERROR.PAUSED;
        } else if (socket[$72fff8635e3b1e41$require$kReset] && client[$72fff8635e3b1e41$require$kRunning] === 0) {
            // Destroy socket once all requests have completed.
            // The request at the tail of the pipeline is the one
            // that requested reset and no further requests should
            // have been queued since then.
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$InformationalError("reset"));
            return $jGj3E.ERROR.PAUSED;
        } else if (client[$72fff8635e3b1e41$require$kPipelining] === 1) // We must wait a full event loop cycle to reuse this socket to make sure
        // that non-spec compliant servers are not closing the connection even if they
        // said they won't.
        setImmediate($72fff8635e3b1e41$var$resume, client);
        else $72fff8635e3b1e41$var$resume(client);
    }
}
function $72fff8635e3b1e41$var$onParserTimeout(parser) {
    const { socket: socket, timeoutType: timeoutType, client: client } = parser;
    /* istanbul ignore else */ if (timeoutType === $72fff8635e3b1e41$var$TIMEOUT_HEADERS) {
        if (!socket[$72fff8635e3b1e41$require$kWriting] || socket.writableNeedDrain || client[$72fff8635e3b1e41$require$kRunning] > 1) {
            $3B1P3$assert(!parser.paused, "cannot be paused while waiting for headers");
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$HeadersTimeoutError());
        }
    } else if (timeoutType === $72fff8635e3b1e41$var$TIMEOUT_BODY) {
        if (!parser.paused) $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$BodyTimeoutError());
    } else if (timeoutType === $72fff8635e3b1e41$var$TIMEOUT_IDLE) {
        $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] === 0 && client[$72fff8635e3b1e41$require$kKeepAliveTimeoutValue]);
        $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$InformationalError("socket idle timeout"));
    }
}
function $72fff8635e3b1e41$var$onSocketReadable() {
    const { [$72fff8635e3b1e41$require$kParser]: parser } = this;
    if (parser) parser.readMore();
}
function $72fff8635e3b1e41$var$onSocketError(err) {
    const { [$72fff8635e3b1e41$require$kClient]: client, [$72fff8635e3b1e41$require$kParser]: parser } = this;
    $3B1P3$assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    if (client[$72fff8635e3b1e41$require$kHTTPConnVersion] !== "h2") // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
    // to the user.
    {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
            // We treat all incoming data so for as a valid response.
            parser.onMessageComplete();
            return;
        }
    }
    this[$72fff8635e3b1e41$require$kError] = err;
    $72fff8635e3b1e41$var$onError(this[$72fff8635e3b1e41$require$kClient], err);
}
function $72fff8635e3b1e41$var$onError(client, err) {
    if (client[$72fff8635e3b1e41$require$kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        // Error is not caused by running request and not a recoverable
        // socket error.
        $3B1P3$assert(client[$72fff8635e3b1e41$require$kPendingIdx] === client[$72fff8635e3b1e41$require$kRunningIdx]);
        const requests = client[$72fff8635e3b1e41$require$kQueue].splice(client[$72fff8635e3b1e41$require$kRunningIdx]);
        for(let i = 0; i < requests.length; i++){
            const request = requests[i];
            $72fff8635e3b1e41$var$errorRequest(client, request, err);
        }
        $3B1P3$assert(client[$72fff8635e3b1e41$require$kSize] === 0);
    }
}
function $72fff8635e3b1e41$var$onSocketEnd() {
    const { [$72fff8635e3b1e41$require$kParser]: parser, [$72fff8635e3b1e41$require$kClient]: client } = this;
    if (client[$72fff8635e3b1e41$require$kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
            // We treat all incoming data so far as a valid response.
            parser.onMessageComplete();
            return;
        }
    }
    $3zyxC.destroy(this, new $72fff8635e3b1e41$require$SocketError("other side closed", $3zyxC.getSocketInfo(this)));
}
function $72fff8635e3b1e41$var$onSocketClose() {
    const { [$72fff8635e3b1e41$require$kClient]: client, [$72fff8635e3b1e41$require$kParser]: parser } = this;
    if (client[$72fff8635e3b1e41$require$kHTTPConnVersion] === "h1" && parser) {
        if (!this[$72fff8635e3b1e41$require$kError] && parser.statusCode && !parser.shouldKeepAlive) // We treat all incoming data so far as a valid response.
        parser.onMessageComplete();
        this[$72fff8635e3b1e41$require$kParser].destroy();
        this[$72fff8635e3b1e41$require$kParser] = null;
    }
    const err = this[$72fff8635e3b1e41$require$kError] || new $72fff8635e3b1e41$require$SocketError("closed", $3zyxC.getSocketInfo(this));
    client[$72fff8635e3b1e41$require$kSocket] = null;
    if (client.destroyed) {
        $3B1P3$assert(client[$72fff8635e3b1e41$require$kPending] === 0);
        // Fail entire queue.
        const requests = client[$72fff8635e3b1e41$require$kQueue].splice(client[$72fff8635e3b1e41$require$kRunningIdx]);
        for(let i = 0; i < requests.length; i++){
            const request = requests[i];
            $72fff8635e3b1e41$var$errorRequest(client, request, err);
        }
    } else if (client[$72fff8635e3b1e41$require$kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        // Fail head of pipeline.
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
        client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]++] = null;
        $72fff8635e3b1e41$var$errorRequest(client, request, err);
    }
    client[$72fff8635e3b1e41$require$kPendingIdx] = client[$72fff8635e3b1e41$require$kRunningIdx];
    $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] === 0);
    client.emit("disconnect", client[$72fff8635e3b1e41$require$kUrl], [
        client
    ], err);
    $72fff8635e3b1e41$var$resume(client);
}
async function $72fff8635e3b1e41$var$connect(client) {
    $3B1P3$assert(!client[$72fff8635e3b1e41$require$kConnecting]);
    $3B1P3$assert(!client[$72fff8635e3b1e41$require$kSocket]);
    let { host: host, hostname: hostname, protocol: protocol, port: port } = client[$72fff8635e3b1e41$require$kUrl];
    // Resolve ipv6
    if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        $3B1P3$assert(idx !== -1);
        const ip = hostname.substring(1, idx);
        $3B1P3$assert($3B1P3$net.isIP(ip));
        hostname = ip;
    }
    client[$72fff8635e3b1e41$require$kConnecting] = true;
    if ($72fff8635e3b1e41$var$channels.beforeConnect.hasSubscribers) $72fff8635e3b1e41$var$channels.beforeConnect.publish({
        connectParams: {
            host: host,
            hostname: hostname,
            protocol: protocol,
            port: port,
            servername: client[$72fff8635e3b1e41$require$kServerName],
            localAddress: client[$72fff8635e3b1e41$require$kLocalAddress]
        },
        connector: client[$72fff8635e3b1e41$require$kConnector]
    });
    try {
        const socket = await new Promise((resolve, reject)=>{
            client[$72fff8635e3b1e41$require$kConnector]({
                host: host,
                hostname: hostname,
                protocol: protocol,
                port: port,
                servername: client[$72fff8635e3b1e41$require$kServerName],
                localAddress: client[$72fff8635e3b1e41$require$kLocalAddress]
            }, (err, socket)=>{
                if (err) reject(err);
                else resolve(socket);
            });
        });
        if (client.destroyed) {
            $3zyxC.destroy(socket.on("error", ()=>{}), new $72fff8635e3b1e41$require$ClientDestroyedError());
            return;
        }
        client[$72fff8635e3b1e41$require$kConnecting] = false;
        $3B1P3$assert(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
            if (!$72fff8635e3b1e41$var$h2ExperimentalWarned) {
                $72fff8635e3b1e41$var$h2ExperimentalWarned = true;
                process.emitWarning("H2 support is experimental, expect them to change at any time.", {
                    code: "UNDICI-H2"
                });
            }
            const session = $72fff8635e3b1e41$var$http2.connect(client[$72fff8635e3b1e41$require$kUrl], {
                createConnection: ()=>socket,
                peerMaxConcurrentStreams: client[$72fff8635e3b1e41$require$kHTTP2SessionState].maxConcurrentStreams
            });
            client[$72fff8635e3b1e41$require$kHTTPConnVersion] = "h2";
            session[$72fff8635e3b1e41$require$kClient] = client;
            session[$72fff8635e3b1e41$require$kSocket] = socket;
            session.on("error", $72fff8635e3b1e41$var$onHttp2SessionError);
            session.on("frameError", $72fff8635e3b1e41$var$onHttp2FrameError);
            session.on("end", $72fff8635e3b1e41$var$onHttp2SessionEnd);
            session.on("goaway", $72fff8635e3b1e41$var$onHTTP2GoAway);
            session.on("close", $72fff8635e3b1e41$var$onSocketClose);
            session.unref();
            client[$72fff8635e3b1e41$require$kHTTP2Session] = session;
            socket[$72fff8635e3b1e41$require$kHTTP2Session] = session;
        } else {
            if (!$72fff8635e3b1e41$var$llhttpInstance) {
                $72fff8635e3b1e41$var$llhttpInstance = await $72fff8635e3b1e41$var$llhttpPromise;
                $72fff8635e3b1e41$var$llhttpPromise = null;
            }
            socket[$72fff8635e3b1e41$require$kNoRef] = false;
            socket[$72fff8635e3b1e41$require$kWriting] = false;
            socket[$72fff8635e3b1e41$require$kReset] = false;
            socket[$72fff8635e3b1e41$require$kBlocking] = false;
            socket[$72fff8635e3b1e41$require$kParser] = new $72fff8635e3b1e41$var$Parser(client, socket, $72fff8635e3b1e41$var$llhttpInstance);
        }
        socket[$72fff8635e3b1e41$require$kCounter] = 0;
        socket[$72fff8635e3b1e41$require$kMaxRequests] = client[$72fff8635e3b1e41$require$kMaxRequests];
        socket[$72fff8635e3b1e41$require$kClient] = client;
        socket[$72fff8635e3b1e41$require$kError] = null;
        socket.on("error", $72fff8635e3b1e41$var$onSocketError).on("readable", $72fff8635e3b1e41$var$onSocketReadable).on("end", $72fff8635e3b1e41$var$onSocketEnd).on("close", $72fff8635e3b1e41$var$onSocketClose);
        client[$72fff8635e3b1e41$require$kSocket] = socket;
        if ($72fff8635e3b1e41$var$channels.connected.hasSubscribers) $72fff8635e3b1e41$var$channels.connected.publish({
            connectParams: {
                host: host,
                hostname: hostname,
                protocol: protocol,
                port: port,
                servername: client[$72fff8635e3b1e41$require$kServerName],
                localAddress: client[$72fff8635e3b1e41$require$kLocalAddress]
            },
            connector: client[$72fff8635e3b1e41$require$kConnector],
            socket: socket
        });
        client.emit("connect", client[$72fff8635e3b1e41$require$kUrl], [
            client
        ]);
    } catch (err) {
        if (client.destroyed) return;
        client[$72fff8635e3b1e41$require$kConnecting] = false;
        if ($72fff8635e3b1e41$var$channels.connectError.hasSubscribers) $72fff8635e3b1e41$var$channels.connectError.publish({
            connectParams: {
                host: host,
                hostname: hostname,
                protocol: protocol,
                port: port,
                servername: client[$72fff8635e3b1e41$require$kServerName],
                localAddress: client[$72fff8635e3b1e41$require$kLocalAddress]
            },
            connector: client[$72fff8635e3b1e41$require$kConnector],
            error: err
        });
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
            $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] === 0);
            while(client[$72fff8635e3b1e41$require$kPending] > 0 && client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kPendingIdx]].servername === client[$72fff8635e3b1e41$require$kServerName]){
                const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kPendingIdx]++];
                $72fff8635e3b1e41$var$errorRequest(client, request, err);
            }
        } else $72fff8635e3b1e41$var$onError(client, err);
        client.emit("connectionError", client[$72fff8635e3b1e41$require$kUrl], [
            client
        ], err);
    }
    $72fff8635e3b1e41$var$resume(client);
}
function $72fff8635e3b1e41$var$emitDrain(client) {
    client[$72fff8635e3b1e41$require$kNeedDrain] = 0;
    client.emit("drain", client[$72fff8635e3b1e41$require$kUrl], [
        client
    ]);
}
function $72fff8635e3b1e41$var$resume(client, sync) {
    if (client[$72fff8635e3b1e41$require$kResuming] === 2) return;
    client[$72fff8635e3b1e41$require$kResuming] = 2;
    $72fff8635e3b1e41$var$_resume(client, sync);
    client[$72fff8635e3b1e41$require$kResuming] = 0;
    if (client[$72fff8635e3b1e41$require$kRunningIdx] > 256) {
        client[$72fff8635e3b1e41$require$kQueue].splice(0, client[$72fff8635e3b1e41$require$kRunningIdx]);
        client[$72fff8635e3b1e41$require$kPendingIdx] -= client[$72fff8635e3b1e41$require$kRunningIdx];
        client[$72fff8635e3b1e41$require$kRunningIdx] = 0;
    }
}
function $72fff8635e3b1e41$var$_resume(client, sync) {
    while(true){
        if (client.destroyed) {
            $3B1P3$assert(client[$72fff8635e3b1e41$require$kPending] === 0);
            return;
        }
        if (client[$72fff8635e3b1e41$var$kClosedResolve] && !client[$72fff8635e3b1e41$require$kSize]) {
            client[$72fff8635e3b1e41$var$kClosedResolve]();
            client[$72fff8635e3b1e41$var$kClosedResolve] = null;
            return;
        }
        const socket = client[$72fff8635e3b1e41$require$kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
            if (client[$72fff8635e3b1e41$require$kSize] === 0) {
                if (!socket[$72fff8635e3b1e41$require$kNoRef] && socket.unref) {
                    socket.unref();
                    socket[$72fff8635e3b1e41$require$kNoRef] = true;
                }
            } else if (socket[$72fff8635e3b1e41$require$kNoRef] && socket.ref) {
                socket.ref();
                socket[$72fff8635e3b1e41$require$kNoRef] = false;
            }
            if (client[$72fff8635e3b1e41$require$kSize] === 0) {
                if (socket[$72fff8635e3b1e41$require$kParser].timeoutType !== $72fff8635e3b1e41$var$TIMEOUT_IDLE) socket[$72fff8635e3b1e41$require$kParser].setTimeout(client[$72fff8635e3b1e41$require$kKeepAliveTimeoutValue], $72fff8635e3b1e41$var$TIMEOUT_IDLE);
            } else if (client[$72fff8635e3b1e41$require$kRunning] > 0 && socket[$72fff8635e3b1e41$require$kParser].statusCode < 200) {
                if (socket[$72fff8635e3b1e41$require$kParser].timeoutType !== $72fff8635e3b1e41$var$TIMEOUT_HEADERS) {
                    const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kRunningIdx]];
                    const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[$72fff8635e3b1e41$require$kHeadersTimeout];
                    socket[$72fff8635e3b1e41$require$kParser].setTimeout(headersTimeout, $72fff8635e3b1e41$var$TIMEOUT_HEADERS);
                }
            }
        }
        if (client[$72fff8635e3b1e41$require$kBusy]) client[$72fff8635e3b1e41$require$kNeedDrain] = 2;
        else if (client[$72fff8635e3b1e41$require$kNeedDrain] === 2) {
            if (sync) {
                client[$72fff8635e3b1e41$require$kNeedDrain] = 1;
                process.nextTick($72fff8635e3b1e41$var$emitDrain, client);
            } else $72fff8635e3b1e41$var$emitDrain(client);
            continue;
        }
        if (client[$72fff8635e3b1e41$require$kPending] === 0) return;
        if (client[$72fff8635e3b1e41$require$kRunning] >= (client[$72fff8635e3b1e41$require$kPipelining] || 1)) return;
        const request = client[$72fff8635e3b1e41$require$kQueue][client[$72fff8635e3b1e41$require$kPendingIdx]];
        if (client[$72fff8635e3b1e41$require$kUrl].protocol === "https:" && client[$72fff8635e3b1e41$require$kServerName] !== request.servername) {
            if (client[$72fff8635e3b1e41$require$kRunning] > 0) return;
            client[$72fff8635e3b1e41$require$kServerName] = request.servername;
            if (socket && socket.servername !== request.servername) {
                $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$InformationalError("servername changed"));
                return;
            }
        }
        if (client[$72fff8635e3b1e41$require$kConnecting]) return;
        if (!socket && !client[$72fff8635e3b1e41$require$kHTTP2Session]) {
            $72fff8635e3b1e41$var$connect(client);
            return;
        }
        if (socket.destroyed || socket[$72fff8635e3b1e41$require$kWriting] || socket[$72fff8635e3b1e41$require$kReset] || socket[$72fff8635e3b1e41$require$kBlocking]) return;
        if (client[$72fff8635e3b1e41$require$kRunning] > 0 && !request.idempotent) // Non-idempotent request cannot be retried.
        // Ensure that no other requests are inflight and
        // could cause failure.
        return;
        if (client[$72fff8635e3b1e41$require$kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) // Don't dispatch an upgrade until all preceding requests have completed.
        // A misbehaving server might upgrade the connection before all pipelined
        // request has completed.
        return;
        if (client[$72fff8635e3b1e41$require$kRunning] > 0 && $3zyxC.bodyLength(request.body) !== 0 && ($3zyxC.isStream(request.body) || $3zyxC.isAsyncIterable(request.body))) // Request with stream or iterator body can error while other requests
        // are inflight and indirectly error those as well.
        // Ensure this doesn't happen by waiting for inflight
        // to complete before dispatching.
        // Request with stream or iterator body cannot be retried.
        // Ensure that no other requests are inflight and
        // could cause failure.
        return;
        if (!request.aborted && $72fff8635e3b1e41$var$write(client, request)) client[$72fff8635e3b1e41$require$kPendingIdx]++;
        else client[$72fff8635e3b1e41$require$kQueue].splice(client[$72fff8635e3b1e41$require$kPendingIdx], 1);
    }
}
// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
function $72fff8635e3b1e41$var$shouldSendContentLength(method) {
    return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
}
function $72fff8635e3b1e41$var$write(client, request) {
    if (client[$72fff8635e3b1e41$require$kHTTPConnVersion] === "h2") {
        $72fff8635e3b1e41$var$writeH2(client, client[$72fff8635e3b1e41$require$kHTTP2Session], request);
        return;
    }
    const { body: body, method: method, path: path, host: host, upgrade: upgrade, headers: headers, blocking: blocking, reset: reset } = request;
    // https://tools.ietf.org/html/rfc7231#section-4.3.1
    // https://tools.ietf.org/html/rfc7231#section-4.3.2
    // https://tools.ietf.org/html/rfc7231#section-4.3.5
    // Sending a payload body on a request that does not
    // expect it can cause undefined behavior on some
    // servers and corrupt connection state. Do not
    // re-use the connection for further requests.
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") // Try to read EOF in order to get length.
    body.read(0);
    const bodyLength = $3zyxC.bodyLength(body);
    let contentLength = bodyLength;
    if (contentLength === null) contentLength = request.contentLength;
    if (contentLength === 0 && !expectsPayload) // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.
    contentLength = null;
    // https://github.com/nodejs/undici/issues/2046
    // A user agent may send a Content-Length header with 0 value, this should be allowed.
    if ($72fff8635e3b1e41$var$shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
        if (client[$72fff8635e3b1e41$require$kStrictContentLength]) {
            $72fff8635e3b1e41$var$errorRequest(client, request, new $72fff8635e3b1e41$require$RequestContentLengthMismatchError());
            return false;
        }
        process.emitWarning(new $72fff8635e3b1e41$require$RequestContentLengthMismatchError());
    }
    const socket = client[$72fff8635e3b1e41$require$kSocket];
    try {
        request.onConnect((err)=>{
            if (request.aborted || request.completed) return;
            $72fff8635e3b1e41$var$errorRequest(client, request, err || new $72fff8635e3b1e41$require$RequestAbortedError());
            $3zyxC.destroy(socket, new $72fff8635e3b1e41$require$InformationalError("aborted"));
        });
    } catch (err) {
        $72fff8635e3b1e41$var$errorRequest(client, request, err);
    }
    if (request.aborted) return false;
    if (method === "HEAD") // https://github.com/mcollina/undici/issues/258
    // Close after a HEAD request to interop with misbehaving servers
    // that may send a body in the response.
    socket[$72fff8635e3b1e41$require$kReset] = true;
    if (upgrade || method === "CONNECT") // On CONNECT or upgrade, block pipeline from dispatching further
    // requests on this connection.
    socket[$72fff8635e3b1e41$require$kReset] = true;
    if (reset != null) socket[$72fff8635e3b1e41$require$kReset] = reset;
    if (client[$72fff8635e3b1e41$require$kMaxRequests] && socket[$72fff8635e3b1e41$require$kCounter]++ >= client[$72fff8635e3b1e41$require$kMaxRequests]) socket[$72fff8635e3b1e41$require$kReset] = true;
    if (blocking) socket[$72fff8635e3b1e41$require$kBlocking] = true;
    let header = `${method} ${path} HTTP/1.1\r\n`;
    if (typeof host === "string") header += `host: ${host}\r\n`;
    else header += client[$72fff8635e3b1e41$require$kHostHeader];
    if (upgrade) header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`;
    else if (client[$72fff8635e3b1e41$require$kPipelining] && !socket[$72fff8635e3b1e41$require$kReset]) header += "connection: keep-alive\r\n";
    else header += "connection: close\r\n";
    if (headers) header += headers;
    if ($72fff8635e3b1e41$var$channels.sendHeaders.hasSubscribers) $72fff8635e3b1e41$var$channels.sendHeaders.publish({
        request: request,
        headers: header,
        socket: socket
    });
    /* istanbul ignore else: assertion */ if (!body || bodyLength === 0) {
        if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
        else {
            $3B1P3$assert(contentLength === null, "no body must not have content length");
            socket.write(`${header}\r\n`, "latin1");
        }
        request.onRequestSent();
    } else if ($3zyxC.isBuffer(body)) {
        $3B1P3$assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
        socket.write(body);
        socket.uncork();
        request.onBodySent(body);
        request.onRequestSent();
        if (!expectsPayload) socket[$72fff8635e3b1e41$require$kReset] = true;
    } else if ($3zyxC.isBlobLike(body)) {
        if (typeof body.stream === "function") $72fff8635e3b1e41$var$writeIterable({
            body: body.stream(),
            client: client,
            request: request,
            socket: socket,
            contentLength: contentLength,
            header: header,
            expectsPayload: expectsPayload
        });
        else $72fff8635e3b1e41$var$writeBlob({
            body: body,
            client: client,
            request: request,
            socket: socket,
            contentLength: contentLength,
            header: header,
            expectsPayload: expectsPayload
        });
    } else if ($3zyxC.isStream(body)) $72fff8635e3b1e41$var$writeStream({
        body: body,
        client: client,
        request: request,
        socket: socket,
        contentLength: contentLength,
        header: header,
        expectsPayload: expectsPayload
    });
    else if ($3zyxC.isIterable(body)) $72fff8635e3b1e41$var$writeIterable({
        body: body,
        client: client,
        request: request,
        socket: socket,
        contentLength: contentLength,
        header: header,
        expectsPayload: expectsPayload
    });
    else $3B1P3$assert(false);
    return true;
}
function $72fff8635e3b1e41$var$writeH2(client, session, request) {
    const { body: body, method: method, path: path, host: host, upgrade: upgrade, expectContinue: expectContinue, signal: signal, headers: reqHeaders } = request;
    let headers;
    if (typeof reqHeaders === "string") headers = $6r15I[$72fff8635e3b1e41$require$kHTTP2CopyHeaders](reqHeaders.trim());
    else headers = reqHeaders;
    if (upgrade) {
        $72fff8635e3b1e41$var$errorRequest(client, request, new Error("Upgrade not supported for H2"));
        return false;
    }
    try {
        // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
        request.onConnect((err)=>{
            if (request.aborted || request.completed) return;
            $72fff8635e3b1e41$var$errorRequest(client, request, err || new $72fff8635e3b1e41$require$RequestAbortedError());
        });
    } catch (err) {
        $72fff8635e3b1e41$var$errorRequest(client, request, err);
    }
    if (request.aborted) return false;
    /** @type {import('node:http2').ClientHttp2Stream} */ let stream;
    const h2State = client[$72fff8635e3b1e41$require$kHTTP2SessionState];
    headers[$72fff8635e3b1e41$var$HTTP2_HEADER_AUTHORITY] = host || client[$72fff8635e3b1e41$require$kHost];
    headers[$72fff8635e3b1e41$var$HTTP2_HEADER_METHOD] = method;
    if (method === "CONNECT") {
        session.ref();
        // we are already connected, streams are pending, first request
        // will create a new stream. We trigger a request to create the stream and wait until
        // `ready` event is triggered
        // We disabled endStream to allow the user to write to the stream
        stream = session.request(headers, {
            endStream: false,
            signal: signal
        });
        if (stream.id && !stream.pending) {
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
        } else stream.once("ready", ()=>{
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
        });
        stream.once("close", ()=>{
            h2State.openStreams -= 1;
            // TODO(HTTP/2): unref only if current streams count is 0
            if (h2State.openStreams === 0) session.unref();
        });
        return true;
    }
    // https://tools.ietf.org/html/rfc7540#section-8.3
    // :path and :scheme headers must be omited when sending CONNECT
    headers[$72fff8635e3b1e41$var$HTTP2_HEADER_PATH] = path;
    headers[$72fff8635e3b1e41$var$HTTP2_HEADER_SCHEME] = "https";
    // https://tools.ietf.org/html/rfc7231#section-4.3.1
    // https://tools.ietf.org/html/rfc7231#section-4.3.2
    // https://tools.ietf.org/html/rfc7231#section-4.3.5
    // Sending a payload body on a request that does not
    // expect it can cause undefined behavior on some
    // servers and corrupt connection state. Do not
    // re-use the connection for further requests.
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") // Try to read EOF in order to get length.
    body.read(0);
    let contentLength = $3zyxC.bodyLength(body);
    if (contentLength == null) contentLength = request.contentLength;
    if (contentLength === 0 || !expectsPayload) // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.
    contentLength = null;
    // https://github.com/nodejs/undici/issues/2046
    // A user agent may send a Content-Length header with 0 value, this should be allowed.
    if ($72fff8635e3b1e41$var$shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
        if (client[$72fff8635e3b1e41$require$kStrictContentLength]) {
            $72fff8635e3b1e41$var$errorRequest(client, request, new $72fff8635e3b1e41$require$RequestContentLengthMismatchError());
            return false;
        }
        process.emitWarning(new $72fff8635e3b1e41$require$RequestContentLengthMismatchError());
    }
    if (contentLength != null) {
        $3B1P3$assert(body, "no body must not have content length");
        headers[$72fff8635e3b1e41$var$HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
    }
    session.ref();
    const shouldEndStream = method === "GET" || method === "HEAD";
    if (expectContinue) {
        headers[$72fff8635e3b1e41$var$HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, {
            endStream: shouldEndStream,
            signal: signal
        });
        stream.once("continue", writeBodyH2);
    } else {
        stream = session.request(headers, {
            endStream: shouldEndStream,
            signal: signal
        });
        writeBodyH2();
    }
    // Increment counter as we have new several streams open
    ++h2State.openStreams;
    stream.once("response", (headers)=>{
        const { [$72fff8635e3b1e41$var$HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers;
        if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) stream.pause();
    });
    stream.once("end", ()=>{
        request.onComplete([]);
    });
    stream.on("data", (chunk)=>{
        if (request.onData(chunk) === false) stream.pause();
    });
    stream.once("close", ()=>{
        h2State.openStreams -= 1;
        // TODO(HTTP/2): unref only if current streams count is 0
        if (h2State.openStreams === 0) session.unref();
    });
    stream.once("error", function(err) {
        if (client[$72fff8635e3b1e41$require$kHTTP2Session] && !client[$72fff8635e3b1e41$require$kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
            h2State.streams -= 1;
            $3zyxC.destroy(stream, err);
        }
    });
    stream.once("frameError", (type, code)=>{
        const err = new $72fff8635e3b1e41$require$InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
        $72fff8635e3b1e41$var$errorRequest(client, request, err);
        if (client[$72fff8635e3b1e41$require$kHTTP2Session] && !client[$72fff8635e3b1e41$require$kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
            h2State.streams -= 1;
            $3zyxC.destroy(stream, err);
        }
    });
    // stream.on('aborted', () => {
    //   // TODO(HTTP/2): Support aborted
    // })
    // stream.on('timeout', () => {
    //   // TODO(HTTP/2): Support timeout
    // })
    // stream.on('push', headers => {
    //   // TODO(HTTP/2): Suppor push
    // })
    // stream.on('trailers', headers => {
    //   // TODO(HTTP/2): Support trailers
    // })
    return true;
    function writeBodyH2() {
        /* istanbul ignore else: assertion */ if (!body) request.onRequestSent();
        else if ($3zyxC.isBuffer(body)) {
            $3B1P3$assert(contentLength === body.byteLength, "buffer body must have content length");
            stream.cork();
            stream.write(body);
            stream.uncork();
            stream.end();
            request.onBodySent(body);
            request.onRequestSent();
        } else if ($3zyxC.isBlobLike(body)) {
            if (typeof body.stream === "function") $72fff8635e3b1e41$var$writeIterable({
                client: client,
                request: request,
                contentLength: contentLength,
                h2stream: stream,
                expectsPayload: expectsPayload,
                body: body.stream(),
                socket: client[$72fff8635e3b1e41$require$kSocket],
                header: ""
            });
            else $72fff8635e3b1e41$var$writeBlob({
                body: body,
                client: client,
                request: request,
                contentLength: contentLength,
                expectsPayload: expectsPayload,
                h2stream: stream,
                header: "",
                socket: client[$72fff8635e3b1e41$require$kSocket]
            });
        } else if ($3zyxC.isStream(body)) $72fff8635e3b1e41$var$writeStream({
            body: body,
            client: client,
            request: request,
            contentLength: contentLength,
            expectsPayload: expectsPayload,
            socket: client[$72fff8635e3b1e41$require$kSocket],
            h2stream: stream,
            header: ""
        });
        else if ($3zyxC.isIterable(body)) $72fff8635e3b1e41$var$writeIterable({
            body: body,
            client: client,
            request: request,
            contentLength: contentLength,
            expectsPayload: expectsPayload,
            header: "",
            h2stream: stream,
            socket: client[$72fff8635e3b1e41$require$kSocket]
        });
        else $3B1P3$assert(false);
    }
}
function $72fff8635e3b1e41$var$writeStream({ h2stream: h2stream, body: body, client: client, request: request, socket: socket, contentLength: contentLength, header: header, expectsPayload: expectsPayload }) {
    $3B1P3$assert(contentLength !== 0 || client[$72fff8635e3b1e41$require$kRunning] === 0, "stream body cannot be pipelined");
    if (client[$72fff8635e3b1e41$require$kHTTPConnVersion] === "h2") {
        // For HTTP/2, is enough to pipe the stream
        const pipe = $72fff8635e3b1e41$require$pipeline(body, h2stream, (err)=>{
            if (err) {
                $3zyxC.destroy(body, err);
                $3zyxC.destroy(h2stream, err);
            } else request.onRequestSent();
        });
        pipe.on("data", onPipeData);
        pipe.once("end", ()=>{
            pipe.removeListener("data", onPipeData);
            $3zyxC.destroy(pipe);
        });
        function onPipeData(chunk) {
            request.onBodySent(chunk);
        }
        return;
    }
    let finished = false;
    const writer = new $72fff8635e3b1e41$var$AsyncWriter({
        socket: socket,
        request: request,
        contentLength: contentLength,
        client: client,
        expectsPayload: expectsPayload,
        header: header
    });
    const onData = function(chunk) {
        if (finished) return;
        try {
            if (!writer.write(chunk) && this.pause) this.pause();
        } catch (err) {
            $3zyxC.destroy(this, err);
        }
    };
    const onDrain = function() {
        if (finished) return;
        if (body.resume) body.resume();
    };
    const onAbort = function() {
        if (finished) return;
        const err = new $72fff8635e3b1e41$require$RequestAbortedError();
        queueMicrotask(()=>onFinished(err));
    };
    const onFinished = function(err) {
        if (finished) return;
        finished = true;
        $3B1P3$assert(socket.destroyed || socket[$72fff8635e3b1e41$require$kWriting] && client[$72fff8635e3b1e41$require$kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) try {
            writer.end();
        } catch (er) {
            err = er;
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) $3zyxC.destroy(body, err);
        else $3zyxC.destroy(body);
    };
    body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
    if (body.resume) body.resume();
    socket.on("drain", onDrain).on("error", onFinished);
}
async function $72fff8635e3b1e41$var$writeBlob({ h2stream: h2stream, body: body, client: client, request: request, socket: socket, contentLength: contentLength, header: header, expectsPayload: expectsPayload }) {
    $3B1P3$assert(contentLength === body.size, "blob body must have content length");
    const isH2 = client[$72fff8635e3b1e41$require$kHTTPConnVersion] === "h2";
    try {
        if (contentLength != null && contentLength !== body.size) throw new $72fff8635e3b1e41$require$RequestContentLengthMismatchError();
        const buffer = Buffer.from(await body.arrayBuffer());
        if (isH2) {
            h2stream.cork();
            h2stream.write(buffer);
            h2stream.uncork();
        } else {
            socket.cork();
            socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
            socket.write(buffer);
            socket.uncork();
        }
        request.onBodySent(buffer);
        request.onRequestSent();
        if (!expectsPayload) socket[$72fff8635e3b1e41$require$kReset] = true;
        $72fff8635e3b1e41$var$resume(client);
    } catch (err) {
        $3zyxC.destroy(isH2 ? h2stream : socket, err);
    }
}
async function $72fff8635e3b1e41$var$writeIterable({ h2stream: h2stream, body: body, client: client, request: request, socket: socket, contentLength: contentLength, header: header, expectsPayload: expectsPayload }) {
    $3B1P3$assert(contentLength !== 0 || client[$72fff8635e3b1e41$require$kRunning] === 0, "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
        if (callback) {
            const cb = callback;
            callback = null;
            cb();
        }
    }
    const waitForDrain = ()=>new Promise((resolve, reject)=>{
            $3B1P3$assert(callback === null);
            if (socket[$72fff8635e3b1e41$require$kError]) reject(socket[$72fff8635e3b1e41$require$kError]);
            else callback = resolve;
        });
    if (client[$72fff8635e3b1e41$require$kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
            // It's up to the user to somehow abort the async iterable.
            for await (const chunk of body){
                if (socket[$72fff8635e3b1e41$require$kError]) throw socket[$72fff8635e3b1e41$require$kError];
                const res = h2stream.write(chunk);
                request.onBodySent(chunk);
                if (!res) await waitForDrain();
            }
        } catch (err) {
            h2stream.destroy(err);
        } finally{
            request.onRequestSent();
            h2stream.end();
            h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
    }
    socket.on("close", onDrain).on("drain", onDrain);
    const writer = new $72fff8635e3b1e41$var$AsyncWriter({
        socket: socket,
        request: request,
        contentLength: contentLength,
        client: client,
        expectsPayload: expectsPayload,
        header: header
    });
    try {
        // It's up to the user to somehow abort the async iterable.
        for await (const chunk of body){
            if (socket[$72fff8635e3b1e41$require$kError]) throw socket[$72fff8635e3b1e41$require$kError];
            if (!writer.write(chunk)) await waitForDrain();
        }
        writer.end();
    } catch (err) {
        writer.destroy(err);
    } finally{
        socket.off("close", onDrain).off("drain", onDrain);
    }
}
class $72fff8635e3b1e41$var$AsyncWriter {
    constructor({ socket: socket, request: request, contentLength: contentLength, client: client, expectsPayload: expectsPayload, header: header }){
        this.socket = socket;
        this.request = request;
        this.contentLength = contentLength;
        this.client = client;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[$72fff8635e3b1e41$require$kWriting] = true;
    }
    write(chunk) {
        const { socket: socket, request: request, contentLength: contentLength, client: client, bytesWritten: bytesWritten, expectsPayload: expectsPayload, header: header } = this;
        if (socket[$72fff8635e3b1e41$require$kError]) throw socket[$72fff8635e3b1e41$require$kError];
        if (socket.destroyed) return false;
        const len = Buffer.byteLength(chunk);
        if (!len) return true;
        // We should defer writing chunks.
        if (contentLength !== null && bytesWritten + len > contentLength) {
            if (client[$72fff8635e3b1e41$require$kStrictContentLength]) throw new $72fff8635e3b1e41$require$RequestContentLengthMismatchError();
            process.emitWarning(new $72fff8635e3b1e41$require$RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
            if (!expectsPayload) socket[$72fff8635e3b1e41$require$kReset] = true;
            if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
            else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
        }
        if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
        this.bytesWritten += len;
        const ret = socket.write(chunk);
        socket.uncork();
        request.onBodySent(chunk);
        if (!ret) {
            if (socket[$72fff8635e3b1e41$require$kParser].timeout && socket[$72fff8635e3b1e41$require$kParser].timeoutType === $72fff8635e3b1e41$var$TIMEOUT_HEADERS) // istanbul ignore else: only for jest
            {
                if (socket[$72fff8635e3b1e41$require$kParser].timeout.refresh) socket[$72fff8635e3b1e41$require$kParser].timeout.refresh();
            }
        }
        return ret;
    }
    end() {
        const { socket: socket, contentLength: contentLength, client: client, bytesWritten: bytesWritten, expectsPayload: expectsPayload, header: header, request: request } = this;
        request.onRequestSent();
        socket[$72fff8635e3b1e41$require$kWriting] = false;
        if (socket[$72fff8635e3b1e41$require$kError]) throw socket[$72fff8635e3b1e41$require$kError];
        if (socket.destroyed) return;
        if (bytesWritten === 0) {
            if (expectsPayload) // https://tools.ietf.org/html/rfc7230#section-3.3.2
            // A user agent SHOULD send a Content-Length in a request message when
            // no Transfer-Encoding is sent and the request method defines a meaning
            // for an enclosed payload body.
            socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
            else socket.write(`${header}\r\n`, "latin1");
        } else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
        if (contentLength !== null && bytesWritten !== contentLength) {
            if (client[$72fff8635e3b1e41$require$kStrictContentLength]) throw new $72fff8635e3b1e41$require$RequestContentLengthMismatchError();
            else process.emitWarning(new $72fff8635e3b1e41$require$RequestContentLengthMismatchError());
        }
        if (socket[$72fff8635e3b1e41$require$kParser].timeout && socket[$72fff8635e3b1e41$require$kParser].timeoutType === $72fff8635e3b1e41$var$TIMEOUT_HEADERS) // istanbul ignore else: only for jest
        {
            if (socket[$72fff8635e3b1e41$require$kParser].timeout.refresh) socket[$72fff8635e3b1e41$require$kParser].timeout.refresh();
        }
        $72fff8635e3b1e41$var$resume(client);
    }
    destroy(err) {
        const { socket: socket, client: client } = this;
        socket[$72fff8635e3b1e41$require$kWriting] = false;
        if (err) {
            $3B1P3$assert(client[$72fff8635e3b1e41$require$kRunning] <= 1, "pipeline should only contain this request");
            $3zyxC.destroy(socket, err);
        }
    }
}
function $72fff8635e3b1e41$var$errorRequest(client, request, err) {
    try {
        request.onError(err);
        $3B1P3$assert(request.aborted);
    } catch (err) {
        client.emit("error", err);
    }
}
module.exports = $72fff8635e3b1e41$var$Client;

});
parcelRegister("3zyxC", function(module, exports) {
"use strict";


var $lbv7W = parcelRequire("lbv7W");
var $299f6f209e67ca2f$require$kDestroyed = $lbv7W.kDestroyed;
var $299f6f209e67ca2f$require$kBodyUsed = $lbv7W.kBodyUsed;

var $299f6f209e67ca2f$require$IncomingMessage = $3B1P3$http.IncomingMessage;



var $k7roP = parcelRequire("k7roP");
var $299f6f209e67ca2f$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $299f6f209e67ca2f$require$Blob = $3B1P3$buffer.Blob;


var $299f6f209e67ca2f$require$stringify = $3B1P3$querystring.stringify;

var $e2qgS = parcelRequire("e2qgS");
var $299f6f209e67ca2f$require$headerNameLowerCasedRecord = $e2qgS.headerNameLowerCasedRecord;
const [$299f6f209e67ca2f$var$nodeMajor, $299f6f209e67ca2f$var$nodeMinor] = process.versions.node.split(".").map((v)=>Number(v));
function $299f6f209e67ca2f$var$nop() {}
function $299f6f209e67ca2f$var$isStream(obj) {
    return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
}
// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
function $299f6f209e67ca2f$var$isBlobLike(object) {
    return $299f6f209e67ca2f$require$Blob && object instanceof $299f6f209e67ca2f$require$Blob || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
}
function $299f6f209e67ca2f$var$buildURL(url, queryParams) {
    if (url.includes("?") || url.includes("#")) throw new Error('Query params cannot be passed when url already contains "?" or "#".');
    const stringified = $299f6f209e67ca2f$require$stringify(queryParams);
    if (stringified) url += "?" + stringified;
    return url;
}
function $299f6f209e67ca2f$var$parseURL(url) {
    if (typeof url === "string") {
        url = new URL(url);
        if (!/^https?:/.test(url.origin || url.protocol)) throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        return url;
    }
    if (!url || typeof url !== "object") throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
    if (!/^https?:/.test(url.origin || url.protocol)) throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    if (!(url instanceof URL)) {
        if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        if (url.path != null && typeof url.path !== "string") throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        if (url.pathname != null && typeof url.pathname !== "string") throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        if (url.hostname != null && typeof url.hostname !== "string") throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        if (url.origin != null && typeof url.origin !== "string") throw new $299f6f209e67ca2f$require$InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
        let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
        if (origin.endsWith("/")) origin = origin.substring(0, origin.length - 1);
        if (path && !path.startsWith("/")) path = `/${path}`;
        // new URL(path, origin) is unsafe when `path` contains an absolute URL
        // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
        // If first parameter is a relative URL, second param is required, and will be used as the base URL.
        // If first parameter is an absolute URL, a given second param will be ignored.
        url = new URL(origin + path);
    }
    return url;
}
function $299f6f209e67ca2f$var$parseOrigin(url) {
    url = $299f6f209e67ca2f$var$parseURL(url);
    if (url.pathname !== "/" || url.search || url.hash) throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid url");
    return url;
}
function $299f6f209e67ca2f$var$getHostname(host) {
    if (host[0] === "[") {
        const idx = host.indexOf("]");
        $3B1P3$assert(idx !== -1);
        return host.substring(1, idx);
    }
    const idx = host.indexOf(":");
    if (idx === -1) return host;
    return host.substring(0, idx);
}
// IP addresses are not valid server names per RFC6066
// > Currently, the only server names supported are DNS hostnames
function $299f6f209e67ca2f$var$getServerName(host) {
    if (!host) return null;
    $3B1P3$assert.strictEqual(typeof host, "string");
    const servername = $299f6f209e67ca2f$var$getHostname(host);
    if ($3B1P3$net.isIP(servername)) return "";
    return servername;
}
function $299f6f209e67ca2f$var$deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
function $299f6f209e67ca2f$var$isAsyncIterable(obj) {
    return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
}
function $299f6f209e67ca2f$var$isIterable(obj) {
    return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
}
function $299f6f209e67ca2f$var$bodyLength(body) {
    if (body == null) return 0;
    else if ($299f6f209e67ca2f$var$isStream(body)) {
        const state = body._readableState;
        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    } else if ($299f6f209e67ca2f$var$isBlobLike(body)) return body.size != null ? body.size : null;
    else if ($299f6f209e67ca2f$var$isBuffer(body)) return body.byteLength;
    return null;
}
function $299f6f209e67ca2f$var$isDestroyed(stream) {
    return !stream || !!(stream.destroyed || stream[$299f6f209e67ca2f$require$kDestroyed]);
}
function $299f6f209e67ca2f$var$isReadableAborted(stream) {
    const state = stream && stream._readableState;
    return $299f6f209e67ca2f$var$isDestroyed(stream) && state && !state.endEmitted;
}
function $299f6f209e67ca2f$var$destroy(stream, err) {
    if (stream == null || !$299f6f209e67ca2f$var$isStream(stream) || $299f6f209e67ca2f$var$isDestroyed(stream)) return;
    if (typeof stream.destroy === "function") {
        if (Object.getPrototypeOf(stream).constructor === $299f6f209e67ca2f$require$IncomingMessage) // See: https://github.com/nodejs/node/pull/38505/files
        stream.socket = null;
        stream.destroy(err);
    } else if (err) process.nextTick((stream, err)=>{
        stream.emit("error", err);
    }, stream, err);
    if (stream.destroyed !== true) stream[$299f6f209e67ca2f$require$kDestroyed] = true;
}
const $299f6f209e67ca2f$var$KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
function $299f6f209e67ca2f$var$parseKeepAliveTimeout(val) {
    const m = val.toString().match($299f6f209e67ca2f$var$KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1], 10) * 1000 : null;
}
/**
 * Retrieves a header name and returns its lowercase value.
 * @param {string | Buffer} value Header name
 * @returns {string}
 */ function $299f6f209e67ca2f$var$headerNameToString(value) {
    return $299f6f209e67ca2f$require$headerNameLowerCasedRecord[value] || value.toLowerCase();
}
function $299f6f209e67ca2f$var$parseHeaders(headers, obj = {}) {
    // For H2 support
    if (!Array.isArray(headers)) return headers;
    for(let i = 0; i < headers.length; i += 2){
        const key = headers[i].toString().toLowerCase();
        let val = obj[key];
        if (!val) {
            if (Array.isArray(headers[i + 1])) obj[key] = headers[i + 1].map((x)=>x.toString("utf8"));
            else obj[key] = headers[i + 1].toString("utf8");
        } else {
            if (!Array.isArray(val)) {
                val = [
                    val
                ];
                obj[key] = val;
            }
            val.push(headers[i + 1].toString("utf8"));
        }
    }
    // See https://github.com/nodejs/node/pull/46528
    if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
    return obj;
}
function $299f6f209e67ca2f$var$parseRawHeaders(headers) {
    const ret = [];
    let hasContentLength = false;
    let contentDispositionIdx = -1;
    for(let n = 0; n < headers.length; n += 2){
        const key = headers[n + 0].toString();
        const val = headers[n + 1].toString("utf8");
        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
            ret.push(key, val);
            hasContentLength = true;
        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) contentDispositionIdx = ret.push(key, val) - 1;
        else ret.push(key, val);
    }
    // See https://github.com/nodejs/node/pull/46528
    if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
    return ret;
}
function $299f6f209e67ca2f$var$isBuffer(buffer) {
    // See, https://github.com/mcollina/undici/pull/319
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
}
function $299f6f209e67ca2f$var$validateHandler(handler, method, upgrade) {
    if (!handler || typeof handler !== "object") throw new $299f6f209e67ca2f$require$InvalidArgumentError("handler must be an object");
    if (typeof handler.onConnect !== "function") throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onConnect method");
    if (typeof handler.onError !== "function") throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onError method");
    if (typeof handler.onBodySent !== "function" && handler.onBodySent !== undefined) throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onBodySent method");
    if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onUpgrade method");
    } else {
        if (typeof handler.onHeaders !== "function") throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onHeaders method");
        if (typeof handler.onData !== "function") throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onData method");
        if (typeof handler.onComplete !== "function") throw new $299f6f209e67ca2f$require$InvalidArgumentError("invalid onComplete method");
    }
}
// A body is disturbed if it has been read from and it cannot
// be re-used without losing state or data.
function $299f6f209e67ca2f$var$isDisturbed(body) {
    return !!(body && ($3B1P3$stream.isDisturbed ? $3B1P3$stream.isDisturbed(body) || body[$299f6f209e67ca2f$require$kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
     : body[$299f6f209e67ca2f$require$kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || $299f6f209e67ca2f$var$isReadableAborted(body)));
}
function $299f6f209e67ca2f$var$isErrored(body) {
    return !!(body && ($3B1P3$stream.isErrored ? $3B1P3$stream.isErrored(body) : /state: 'errored'/.test($3B1P3$util.inspect(body))));
}
function $299f6f209e67ca2f$var$isReadable(body) {
    return !!(body && ($3B1P3$stream.isReadable ? $3B1P3$stream.isReadable(body) : /state: 'readable'/.test($3B1P3$util.inspect(body))));
}
function $299f6f209e67ca2f$var$getSocketInfo(socket) {
    return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
    };
}
async function* $299f6f209e67ca2f$var$convertIterableToBuffer(iterable) {
    for await (const chunk of iterable)yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
}
let $299f6f209e67ca2f$var$ReadableStream;

function $299f6f209e67ca2f$var$ReadableStreamFrom(iterable) {
    if (!$299f6f209e67ca2f$var$ReadableStream) $299f6f209e67ca2f$var$ReadableStream = $3B1P3$streamweb.ReadableStream;
    if ($299f6f209e67ca2f$var$ReadableStream.from) return $299f6f209e67ca2f$var$ReadableStream.from($299f6f209e67ca2f$var$convertIterableToBuffer(iterable));
    let iterator;
    return new $299f6f209e67ca2f$var$ReadableStream({
        async start () {
            iterator = iterable[Symbol.asyncIterator]();
        },
        async pull (controller) {
            const { done: done, value: value } = await iterator.next();
            if (done) queueMicrotask(()=>{
                controller.close();
            });
            else {
                const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
                controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
        },
        async cancel (reason) {
            await iterator.return();
        }
    }, 0);
}
// The chunk should be a FormData instance and contains
// all the required methods.
function $299f6f209e67ca2f$var$isFormDataLike(object) {
    return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
}
function $299f6f209e67ca2f$var$throwIfAborted(signal) {
    if (!signal) return;
    if (typeof signal.throwIfAborted === "function") signal.throwIfAborted();
    else if (signal.aborted) {
        // DOMException not available < v17.0.0
        const err = new Error("The operation was aborted");
        err.name = "AbortError";
        throw err;
    }
}
function $299f6f209e67ca2f$var$addAbortListener(signal, listener) {
    if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, {
            once: true
        });
        return ()=>signal.removeEventListener("abort", listener);
    }
    signal.addListener("abort", listener);
    return ()=>signal.removeListener("abort", listener);
}
const $299f6f209e67ca2f$var$hasToWellFormed = !!String.prototype.toWellFormed;
/**
 * @param {string} val
 */ function $299f6f209e67ca2f$var$toUSVString(val) {
    if ($299f6f209e67ca2f$var$hasToWellFormed) return `${val}`.toWellFormed();
    else if ($3B1P3$util.toUSVString) return $3B1P3$util.toUSVString(val);
    return `${val}`;
}
// Parsed accordingly to RFC 9110
// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
function $299f6f209e67ca2f$var$parseRangeHeader(range) {
    if (range == null || range === "") return {
        start: 0,
        end: null,
        size: null
    };
    const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
    return m ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
    } : null;
}
const $299f6f209e67ca2f$var$kEnumerableProperty = Object.create(null);
$299f6f209e67ca2f$var$kEnumerableProperty.enumerable = true;
module.exports = {
    kEnumerableProperty: $299f6f209e67ca2f$var$kEnumerableProperty,
    nop: $299f6f209e67ca2f$var$nop,
    isDisturbed: $299f6f209e67ca2f$var$isDisturbed,
    isErrored: $299f6f209e67ca2f$var$isErrored,
    isReadable: $299f6f209e67ca2f$var$isReadable,
    toUSVString: $299f6f209e67ca2f$var$toUSVString,
    isReadableAborted: $299f6f209e67ca2f$var$isReadableAborted,
    isBlobLike: $299f6f209e67ca2f$var$isBlobLike,
    parseOrigin: $299f6f209e67ca2f$var$parseOrigin,
    parseURL: $299f6f209e67ca2f$var$parseURL,
    getServerName: $299f6f209e67ca2f$var$getServerName,
    isStream: $299f6f209e67ca2f$var$isStream,
    isIterable: $299f6f209e67ca2f$var$isIterable,
    isAsyncIterable: $299f6f209e67ca2f$var$isAsyncIterable,
    isDestroyed: $299f6f209e67ca2f$var$isDestroyed,
    headerNameToString: $299f6f209e67ca2f$var$headerNameToString,
    parseRawHeaders: $299f6f209e67ca2f$var$parseRawHeaders,
    parseHeaders: $299f6f209e67ca2f$var$parseHeaders,
    parseKeepAliveTimeout: $299f6f209e67ca2f$var$parseKeepAliveTimeout,
    destroy: $299f6f209e67ca2f$var$destroy,
    bodyLength: $299f6f209e67ca2f$var$bodyLength,
    deepClone: $299f6f209e67ca2f$var$deepClone,
    ReadableStreamFrom: $299f6f209e67ca2f$var$ReadableStreamFrom,
    isBuffer: $299f6f209e67ca2f$var$isBuffer,
    validateHandler: $299f6f209e67ca2f$var$validateHandler,
    getSocketInfo: $299f6f209e67ca2f$var$getSocketInfo,
    isFormDataLike: $299f6f209e67ca2f$var$isFormDataLike,
    buildURL: $299f6f209e67ca2f$var$buildURL,
    throwIfAborted: $299f6f209e67ca2f$var$throwIfAborted,
    addAbortListener: $299f6f209e67ca2f$var$addAbortListener,
    parseRangeHeader: $299f6f209e67ca2f$var$parseRangeHeader,
    nodeMajor: $299f6f209e67ca2f$var$nodeMajor,
    nodeMinor: $299f6f209e67ca2f$var$nodeMinor,
    nodeHasAutoSelectFamily: $299f6f209e67ca2f$var$nodeMajor > 18 || $299f6f209e67ca2f$var$nodeMajor === 18 && $299f6f209e67ca2f$var$nodeMinor >= 13,
    safeHTTPMethods: [
        "GET",
        "HEAD",
        "OPTIONS",
        "TRACE"
    ]
};

});
parcelRegister("lbv7W", function(module, exports) {
module.exports = {
    kClose: Symbol("close"),
    kDestroy: Symbol("destroy"),
    kDispatch: Symbol("dispatch"),
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kConnecting: Symbol("connecting"),
    kHeadersList: Symbol("headers list"),
    kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kHeadersTimeout: Symbol("headers timeout"),
    kBodyTimeout: Symbol("body timeout"),
    kServerName: Symbol("server name"),
    kLocalAddress: Symbol("local address"),
    kHost: Symbol("host"),
    kNoRef: Symbol("no ref"),
    kBodyUsed: Symbol("used"),
    kRunning: Symbol("running"),
    kBlocking: Symbol("blocking"),
    kPending: Symbol("pending"),
    kSize: Symbol("size"),
    kBusy: Symbol("busy"),
    kQueued: Symbol("queued"),
    kFree: Symbol("free"),
    kConnected: Symbol("connected"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol.for("nodejs.stream.destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClients: Symbol("clients"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelining"),
    kSocket: Symbol("socket"),
    kHostHeader: Symbol("host header"),
    kConnector: Symbol("connector"),
    kStrictContentLength: Symbol("strict content length"),
    kMaxRedirections: Symbol("maxRedirections"),
    kMaxRequests: Symbol("maxRequestsPerClient"),
    kProxy: Symbol("proxy agent options"),
    kCounter: Symbol("socket request counter"),
    kInterceptors: Symbol("dispatch interceptors"),
    kMaxResponseSize: Symbol("max response size"),
    kHTTP2Session: Symbol("http2Session"),
    kHTTP2SessionState: Symbol("http2Session state"),
    kHTTP2BuildRequest: Symbol("http2 build request"),
    kHTTP1BuildRequest: Symbol("http1 build request"),
    kHTTP2CopyHeaders: Symbol("http2 copy headers"),
    kHTTPConnVersion: Symbol("http connection version"),
    kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
    kConstruct: Symbol("constructable")
};

});

parcelRegister("k7roP", function(module, exports) {
"use strict";
class $ea59b70f1de51268$var$UndiciError extends Error {
    constructor(message){
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
    }
}
class $ea59b70f1de51268$var$ConnectTimeoutError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
    }
}
class $ea59b70f1de51268$var$HeadersTimeoutError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
}
class $ea59b70f1de51268$var$HeadersOverflowError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
    }
}
class $ea59b70f1de51268$var$BodyTimeoutError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
    }
}
class $ea59b70f1de51268$var$ResponseStatusCodeError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message, statusCode, headers, body){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
    }
}
class $ea59b70f1de51268$var$InvalidArgumentError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
    }
}
class $ea59b70f1de51268$var$InvalidReturnValueError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
}
class $ea59b70f1de51268$var$RequestAbortedError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
    }
}
class $ea59b70f1de51268$var$InformationalError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
    }
}
class $ea59b70f1de51268$var$RequestContentLengthMismatchError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
    }
}
class $ea59b70f1de51268$var$ResponseContentLengthMismatchError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
    }
}
class $ea59b70f1de51268$var$ClientDestroyedError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
    }
}
class $ea59b70f1de51268$var$ClientClosedError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
    }
}
class $ea59b70f1de51268$var$SocketError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message, socket){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
    }
}
class $ea59b70f1de51268$var$NotSupportedError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
    }
}
class $ea59b70f1de51268$var$BalancedPoolMissingUpstreamError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
    }
}
class $ea59b70f1de51268$var$HTTPParserError extends Error {
    constructor(message, code, data){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : undefined;
        this.data = data ? data.toString() : undefined;
    }
}
class $ea59b70f1de51268$var$ResponseExceededMaxSizeError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
    }
}
class $ea59b70f1de51268$var$RequestRetryError extends $ea59b70f1de51268$var$UndiciError {
    constructor(message, code, { headers: headers, data: data }){
        super(message);
        Error.captureStackTrace(this, $ea59b70f1de51268$var$RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
    }
}
module.exports = {
    HTTPParserError: $ea59b70f1de51268$var$HTTPParserError,
    UndiciError: $ea59b70f1de51268$var$UndiciError,
    HeadersTimeoutError: $ea59b70f1de51268$var$HeadersTimeoutError,
    HeadersOverflowError: $ea59b70f1de51268$var$HeadersOverflowError,
    BodyTimeoutError: $ea59b70f1de51268$var$BodyTimeoutError,
    RequestContentLengthMismatchError: $ea59b70f1de51268$var$RequestContentLengthMismatchError,
    ConnectTimeoutError: $ea59b70f1de51268$var$ConnectTimeoutError,
    ResponseStatusCodeError: $ea59b70f1de51268$var$ResponseStatusCodeError,
    InvalidArgumentError: $ea59b70f1de51268$var$InvalidArgumentError,
    InvalidReturnValueError: $ea59b70f1de51268$var$InvalidReturnValueError,
    RequestAbortedError: $ea59b70f1de51268$var$RequestAbortedError,
    ClientDestroyedError: $ea59b70f1de51268$var$ClientDestroyedError,
    ClientClosedError: $ea59b70f1de51268$var$ClientClosedError,
    InformationalError: $ea59b70f1de51268$var$InformationalError,
    SocketError: $ea59b70f1de51268$var$SocketError,
    NotSupportedError: $ea59b70f1de51268$var$NotSupportedError,
    ResponseContentLengthMismatchError: $ea59b70f1de51268$var$ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError: $ea59b70f1de51268$var$BalancedPoolMissingUpstreamError,
    ResponseExceededMaxSizeError: $ea59b70f1de51268$var$ResponseExceededMaxSizeError,
    RequestRetryError: $ea59b70f1de51268$var$RequestRetryError
};

});

parcelRegister("e2qgS", function(module, exports) {
"use strict";
/** @type {Record<string, string | undefined>} */ const $a385a18294f03cc5$var$headerNameLowerCasedRecord = {};
// https://developer.mozilla.org/docs/Web/HTTP/Headers
const $a385a18294f03cc5$var$wellknownHeaderNames = [
    "Accept",
    "Accept-Encoding",
    "Accept-Language",
    "Accept-Ranges",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Age",
    "Allow",
    "Alt-Svc",
    "Alt-Used",
    "Authorization",
    "Cache-Control",
    "Clear-Site-Data",
    "Connection",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-Length",
    "Content-Location",
    "Content-Range",
    "Content-Security-Policy",
    "Content-Security-Policy-Report-Only",
    "Content-Type",
    "Cookie",
    "Cross-Origin-Embedder-Policy",
    "Cross-Origin-Opener-Policy",
    "Cross-Origin-Resource-Policy",
    "Date",
    "Device-Memory",
    "Downlink",
    "ECT",
    "ETag",
    "Expect",
    "Expect-CT",
    "Expires",
    "Forwarded",
    "From",
    "Host",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Range",
    "If-Unmodified-Since",
    "Keep-Alive",
    "Last-Modified",
    "Link",
    "Location",
    "Max-Forwards",
    "Origin",
    "Permissions-Policy",
    "Pragma",
    "Proxy-Authenticate",
    "Proxy-Authorization",
    "RTT",
    "Range",
    "Referer",
    "Referrer-Policy",
    "Refresh",
    "Retry-After",
    "Sec-WebSocket-Accept",
    "Sec-WebSocket-Extensions",
    "Sec-WebSocket-Key",
    "Sec-WebSocket-Protocol",
    "Sec-WebSocket-Version",
    "Server",
    "Server-Timing",
    "Service-Worker-Allowed",
    "Service-Worker-Navigation-Preload",
    "Set-Cookie",
    "SourceMap",
    "Strict-Transport-Security",
    "Supports-Loading-Mode",
    "TE",
    "Timing-Allow-Origin",
    "Trailer",
    "Transfer-Encoding",
    "Upgrade",
    "Upgrade-Insecure-Requests",
    "User-Agent",
    "Vary",
    "Via",
    "WWW-Authenticate",
    "X-Content-Type-Options",
    "X-DNS-Prefetch-Control",
    "X-Frame-Options",
    "X-Permitted-Cross-Domain-Policies",
    "X-Powered-By",
    "X-Requested-With",
    "X-XSS-Protection"
];
for(let i = 0; i < $a385a18294f03cc5$var$wellknownHeaderNames.length; ++i){
    const key = $a385a18294f03cc5$var$wellknownHeaderNames[i];
    const lowerCasedKey = key.toLowerCase();
    $a385a18294f03cc5$var$headerNameLowerCasedRecord[key] = $a385a18294f03cc5$var$headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
}
// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf($a385a18294f03cc5$var$headerNameLowerCasedRecord, null);
module.exports = {
    wellknownHeaderNames: $a385a18294f03cc5$var$wellknownHeaderNames,
    headerNameLowerCasedRecord: $a385a18294f03cc5$var$headerNameLowerCasedRecord
};

});


parcelRegister("fYEPk", function(module, exports) {
"use strict";
let $ba1c20fa48247c30$var$fastNow = Date.now();
let $ba1c20fa48247c30$var$fastNowTimeout;
const $ba1c20fa48247c30$var$fastTimers = [];
function $ba1c20fa48247c30$var$onTimeout() {
    $ba1c20fa48247c30$var$fastNow = Date.now();
    let len = $ba1c20fa48247c30$var$fastTimers.length;
    let idx = 0;
    while(idx < len){
        const timer = $ba1c20fa48247c30$var$fastTimers[idx];
        if (timer.state === 0) timer.state = $ba1c20fa48247c30$var$fastNow + timer.delay;
        else if (timer.state > 0 && $ba1c20fa48247c30$var$fastNow >= timer.state) {
            timer.state = -1;
            timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
            timer.state = -2;
            if (idx !== len - 1) $ba1c20fa48247c30$var$fastTimers[idx] = $ba1c20fa48247c30$var$fastTimers.pop();
            else $ba1c20fa48247c30$var$fastTimers.pop();
            len -= 1;
        } else idx += 1;
    }
    if ($ba1c20fa48247c30$var$fastTimers.length > 0) $ba1c20fa48247c30$var$refreshTimeout();
}
function $ba1c20fa48247c30$var$refreshTimeout() {
    if ($ba1c20fa48247c30$var$fastNowTimeout && $ba1c20fa48247c30$var$fastNowTimeout.refresh) $ba1c20fa48247c30$var$fastNowTimeout.refresh();
    else {
        clearTimeout($ba1c20fa48247c30$var$fastNowTimeout);
        $ba1c20fa48247c30$var$fastNowTimeout = setTimeout($ba1c20fa48247c30$var$onTimeout, 1e3);
        if ($ba1c20fa48247c30$var$fastNowTimeout.unref) $ba1c20fa48247c30$var$fastNowTimeout.unref();
    }
}
class $ba1c20fa48247c30$var$Timeout {
    constructor(callback, delay, opaque){
        this.callback = callback;
        this.delay = delay;
        this.opaque = opaque;
        //  -2 not in timer list
        //  -1 in timer list but inactive
        //   0 in timer list waiting for time
        // > 0 in timer list waiting for time to expire
        this.state = -2;
        this.refresh();
    }
    refresh() {
        if (this.state === -2) {
            $ba1c20fa48247c30$var$fastTimers.push(this);
            if (!$ba1c20fa48247c30$var$fastNowTimeout || $ba1c20fa48247c30$var$fastTimers.length === 1) $ba1c20fa48247c30$var$refreshTimeout();
        }
        this.state = 0;
    }
    clear() {
        this.state = -1;
    }
}
module.exports = {
    setTimeout (callback, delay, opaque) {
        return delay < 1e3 ? setTimeout(callback, delay, opaque) : new $ba1c20fa48247c30$var$Timeout(callback, delay, opaque);
    },
    clearTimeout (timeout) {
        if (timeout instanceof $ba1c20fa48247c30$var$Timeout) timeout.clear();
        else clearTimeout(timeout);
    }
};

});

parcelRegister("6r15I", function(module, exports) {
"use strict";

var $k7roP = parcelRequire("k7roP");
var $4af61c5fecccac4e$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $4af61c5fecccac4e$require$NotSupportedError = $k7roP.NotSupportedError;


var $lbv7W = parcelRequire("lbv7W");
var $4af61c5fecccac4e$require$kHTTP2BuildRequest = $lbv7W.kHTTP2BuildRequest;
var $4af61c5fecccac4e$require$kHTTP2CopyHeaders = $lbv7W.kHTTP2CopyHeaders;
var $4af61c5fecccac4e$require$kHTTP1BuildRequest = $lbv7W.kHTTP1BuildRequest;

var $3zyxC = parcelRequire("3zyxC");
// tokenRegExp and headerCharRegex have been lifted from
// https://github.com/nodejs/node/blob/main/lib/_http_common.js
/**
 * Verifies that the given val is a valid HTTP token
 * per the rules defined in RFC 7230
 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
 */ const $4af61c5fecccac4e$var$tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
/**
 * Matches if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 */ const $4af61c5fecccac4e$var$headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
// Verifies that a given path is valid does not contain control chars \x00 to \x20
const $4af61c5fecccac4e$var$invalidPathRegex = /[^\u0021-\u00ff]/;
const $4af61c5fecccac4e$var$kHandler = Symbol("handler");
const $4af61c5fecccac4e$var$channels = {};
let $4af61c5fecccac4e$var$extractBody;

try {
    const diagnosticsChannel = $4af61c5fecccac4e$import$8c11996ea4346c54;
    $4af61c5fecccac4e$var$channels.create = diagnosticsChannel.channel("undici:request:create");
    $4af61c5fecccac4e$var$channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
    $4af61c5fecccac4e$var$channels.headers = diagnosticsChannel.channel("undici:request:headers");
    $4af61c5fecccac4e$var$channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
    $4af61c5fecccac4e$var$channels.error = diagnosticsChannel.channel("undici:request:error");
} catch  {
    $4af61c5fecccac4e$var$channels.create = {
        hasSubscribers: false
    };
    $4af61c5fecccac4e$var$channels.bodySent = {
        hasSubscribers: false
    };
    $4af61c5fecccac4e$var$channels.headers = {
        hasSubscribers: false
    };
    $4af61c5fecccac4e$var$channels.trailers = {
        hasSubscribers: false
    };
    $4af61c5fecccac4e$var$channels.error = {
        hasSubscribers: false
    };
}

class $4af61c5fecccac4e$var$Request {
    constructor(origin, { path: path, method: method, body: body, headers: headers, query: query, idempotent: idempotent, blocking: blocking, upgrade: upgrade, headersTimeout: headersTimeout, bodyTimeout: bodyTimeout, reset: reset, throwOnError: throwOnError, expectContinue: expectContinue }, handler){
        if (typeof path !== "string") throw new $4af61c5fecccac4e$require$InvalidArgumentError("path must be a string");
        else if (path[0] !== "/" && !(path.startsWith("http://") || path.startsWith("https://")) && method !== "CONNECT") throw new $4af61c5fecccac4e$require$InvalidArgumentError("path must be an absolute URL or start with a slash");
        else if ($4af61c5fecccac4e$var$invalidPathRegex.exec(path) !== null) throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid request path");
        if (typeof method !== "string") throw new $4af61c5fecccac4e$require$InvalidArgumentError("method must be a string");
        else if ($4af61c5fecccac4e$var$tokenRegExp.exec(method) === null) throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid request method");
        if (upgrade && typeof upgrade !== "string") throw new $4af61c5fecccac4e$require$InvalidArgumentError("upgrade must be a string");
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid headersTimeout");
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid bodyTimeout");
        if (reset != null && typeof reset !== "boolean") throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid reset");
        if (expectContinue != null && typeof expectContinue !== "boolean") throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid expectContinue");
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body == null) this.body = null;
        else if ($3zyxC.isStream(body)) {
            this.body = body;
            const rState = this.body._readableState;
            if (!rState || !rState.autoDestroy) {
                this.endHandler = function autoDestroy() {
                    $3zyxC.destroy(this);
                };
                this.body.on("end", this.endHandler);
            }
            this.errorHandler = (err)=>{
                if (this.abort) this.abort(err);
                else this.error = err;
            };
            this.body.on("error", this.errorHandler);
        } else if ($3zyxC.isBuffer(body)) this.body = body.byteLength ? body : null;
        else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
        else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;
        else if (typeof body === "string") this.body = body.length ? Buffer.from(body) : null;
        else if ($3zyxC.isFormDataLike(body) || $3zyxC.isIterable(body) || $3zyxC.isBlobLike(body)) this.body = body;
        else throw new $4af61c5fecccac4e$require$InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query ? $3zyxC.buildURL(path, query) : path;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset == null ? null : reset;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        // Only for H2
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
            if (headers.length % 2 !== 0) throw new $4af61c5fecccac4e$require$InvalidArgumentError("headers array must be even");
            for(let i = 0; i < headers.length; i += 2)$4af61c5fecccac4e$var$processHeader(this, headers[i], headers[i + 1]);
        } else if (headers && typeof headers === "object") {
            const keys = Object.keys(headers);
            for(let i = 0; i < keys.length; i++){
                const key = keys[i];
                $4af61c5fecccac4e$var$processHeader(this, key, headers[key]);
            }
        } else if (headers != null) throw new $4af61c5fecccac4e$require$InvalidArgumentError("headers must be an object or an array");
        if ($3zyxC.isFormDataLike(this.body)) {
            if ($3zyxC.nodeMajor < 16 || $3zyxC.nodeMajor === 16 && $3zyxC.nodeMinor < 8) throw new $4af61c5fecccac4e$require$InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
            if (!$4af61c5fecccac4e$var$extractBody) $4af61c5fecccac4e$var$extractBody = (parcelRequire("8J9Tb")).extractBody;
            const [bodyStream, contentType] = $4af61c5fecccac4e$var$extractBody(body);
            if (this.contentType == null) {
                this.contentType = contentType;
                this.headers += `content-type: ${contentType}\r\n`;
            }
            this.body = bodyStream.stream;
            this.contentLength = bodyStream.length;
        } else if ($3zyxC.isBlobLike(body) && this.contentType == null && body.type) {
            this.contentType = body.type;
            this.headers += `content-type: ${body.type}\r\n`;
        }
        $3zyxC.validateHandler(handler, method, upgrade);
        this.servername = $3zyxC.getServerName(this.host);
        this[$4af61c5fecccac4e$var$kHandler] = handler;
        if ($4af61c5fecccac4e$var$channels.create.hasSubscribers) $4af61c5fecccac4e$var$channels.create.publish({
            request: this
        });
    }
    onBodySent(chunk) {
        if (this[$4af61c5fecccac4e$var$kHandler].onBodySent) try {
            return this[$4af61c5fecccac4e$var$kHandler].onBodySent(chunk);
        } catch (err) {
            this.abort(err);
        }
    }
    onRequestSent() {
        if ($4af61c5fecccac4e$var$channels.bodySent.hasSubscribers) $4af61c5fecccac4e$var$channels.bodySent.publish({
            request: this
        });
        if (this[$4af61c5fecccac4e$var$kHandler].onRequestSent) try {
            return this[$4af61c5fecccac4e$var$kHandler].onRequestSent();
        } catch (err) {
            this.abort(err);
        }
    }
    onConnect(abort) {
        $3B1P3$assert(!this.aborted);
        $3B1P3$assert(!this.completed);
        if (this.error) abort(this.error);
        else {
            this.abort = abort;
            return this[$4af61c5fecccac4e$var$kHandler].onConnect(abort);
        }
    }
    onHeaders(statusCode, headers, resume, statusText) {
        $3B1P3$assert(!this.aborted);
        $3B1P3$assert(!this.completed);
        if ($4af61c5fecccac4e$var$channels.headers.hasSubscribers) $4af61c5fecccac4e$var$channels.headers.publish({
            request: this,
            response: {
                statusCode: statusCode,
                headers: headers,
                statusText: statusText
            }
        });
        try {
            return this[$4af61c5fecccac4e$var$kHandler].onHeaders(statusCode, headers, resume, statusText);
        } catch (err) {
            this.abort(err);
        }
    }
    onData(chunk) {
        $3B1P3$assert(!this.aborted);
        $3B1P3$assert(!this.completed);
        try {
            return this[$4af61c5fecccac4e$var$kHandler].onData(chunk);
        } catch (err) {
            this.abort(err);
            return false;
        }
    }
    onUpgrade(statusCode, headers, socket) {
        $3B1P3$assert(!this.aborted);
        $3B1P3$assert(!this.completed);
        return this[$4af61c5fecccac4e$var$kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
        this.onFinally();
        $3B1P3$assert(!this.aborted);
        this.completed = true;
        if ($4af61c5fecccac4e$var$channels.trailers.hasSubscribers) $4af61c5fecccac4e$var$channels.trailers.publish({
            request: this,
            trailers: trailers
        });
        try {
            return this[$4af61c5fecccac4e$var$kHandler].onComplete(trailers);
        } catch (err) {
            // TODO (fix): This might be a bad idea?
            this.onError(err);
        }
    }
    onError(error) {
        this.onFinally();
        if ($4af61c5fecccac4e$var$channels.error.hasSubscribers) $4af61c5fecccac4e$var$channels.error.publish({
            request: this,
            error: error
        });
        if (this.aborted) return;
        this.aborted = true;
        return this[$4af61c5fecccac4e$var$kHandler].onError(error);
    }
    onFinally() {
        if (this.errorHandler) {
            this.body.off("error", this.errorHandler);
            this.errorHandler = null;
        }
        if (this.endHandler) {
            this.body.off("end", this.endHandler);
            this.endHandler = null;
        }
    }
    // TODO: adjust to support H2
    addHeader(key, value) {
        $4af61c5fecccac4e$var$processHeader(this, key, value);
        return this;
    }
    static [$4af61c5fecccac4e$require$kHTTP1BuildRequest](origin, opts, handler) {
        // TODO: Migrate header parsing here, to make Requests
        // HTTP agnostic
        return new $4af61c5fecccac4e$var$Request(origin, opts, handler);
    }
    static [$4af61c5fecccac4e$require$kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = {
            ...opts,
            headers: null
        };
        const request = new $4af61c5fecccac4e$var$Request(origin, opts, handler);
        request.headers = {};
        if (Array.isArray(headers)) {
            if (headers.length % 2 !== 0) throw new $4af61c5fecccac4e$require$InvalidArgumentError("headers array must be even");
            for(let i = 0; i < headers.length; i += 2)$4af61c5fecccac4e$var$processHeader(request, headers[i], headers[i + 1], true);
        } else if (headers && typeof headers === "object") {
            const keys = Object.keys(headers);
            for(let i = 0; i < keys.length; i++){
                const key = keys[i];
                $4af61c5fecccac4e$var$processHeader(request, key, headers[key], true);
            }
        } else if (headers != null) throw new $4af61c5fecccac4e$require$InvalidArgumentError("headers must be an object or an array");
        return request;
    }
    static [$4af61c5fecccac4e$require$kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders){
            const [key, value] = header.split(": ");
            if (value == null || value.length === 0) continue;
            if (headers[key]) headers[key] += `,${value}`;
            else headers[key] = value;
        }
        return headers;
    }
}
function $4af61c5fecccac4e$var$processHeaderValue(key, val, skipAppend) {
    if (val && typeof val === "object") throw new $4af61c5fecccac4e$require$InvalidArgumentError(`invalid ${key} header`);
    val = val != null ? `${val}` : "";
    if ($4af61c5fecccac4e$var$headerCharRegex.exec(val) !== null) throw new $4af61c5fecccac4e$require$InvalidArgumentError(`invalid ${key} header`);
    return skipAppend ? val : `${key}: ${val}\r\n`;
}
function $4af61c5fecccac4e$var$processHeader(request, key, val, skipAppend = false) {
    if (val && typeof val === "object" && !Array.isArray(val)) throw new $4af61c5fecccac4e$require$InvalidArgumentError(`invalid ${key} header`);
    else if (val === undefined) return;
    if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
        if ($4af61c5fecccac4e$var$headerCharRegex.exec(val) !== null) throw new $4af61c5fecccac4e$require$InvalidArgumentError(`invalid ${key} header`);
        // Consumed by Client
        request.host = val;
    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
        request.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request.contentLength)) throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid content-length header");
    } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
        request.contentType = val;
        if (skipAppend) request.headers[key] = $4af61c5fecccac4e$var$processHeaderValue(key, val, skipAppend);
        else request.headers += $4af61c5fecccac4e$var$processHeaderValue(key, val);
    } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid transfer-encoding header");
    else if (key.length === 10 && key.toLowerCase() === "connection") {
        const value = typeof val === "string" ? val.toLowerCase() : null;
        if (value !== "close" && value !== "keep-alive") throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid connection header");
        else if (value === "close") request.reset = true;
    } else if (key.length === 10 && key.toLowerCase() === "keep-alive") throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid keep-alive header");
    else if (key.length === 7 && key.toLowerCase() === "upgrade") throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid upgrade header");
    else if (key.length === 6 && key.toLowerCase() === "expect") throw new $4af61c5fecccac4e$require$NotSupportedError("expect header not supported");
    else if ($4af61c5fecccac4e$var$tokenRegExp.exec(key) === null) throw new $4af61c5fecccac4e$require$InvalidArgumentError("invalid header key");
    else {
        if (Array.isArray(val)) {
            for(let i = 0; i < val.length; i++)if (skipAppend) {
                if (request.headers[key]) request.headers[key] += `,${$4af61c5fecccac4e$var$processHeaderValue(key, val[i], skipAppend)}`;
                else request.headers[key] = $4af61c5fecccac4e$var$processHeaderValue(key, val[i], skipAppend);
            } else request.headers += $4af61c5fecccac4e$var$processHeaderValue(key, val[i]);
        } else if (skipAppend) request.headers[key] = $4af61c5fecccac4e$var$processHeaderValue(key, val, skipAppend);
        else request.headers += $4af61c5fecccac4e$var$processHeaderValue(key, val);
    }
}
module.exports = $4af61c5fecccac4e$var$Request;

});
parcelRegister("8J9Tb", function(module, exports) {
"use strict";

var $dRxbw = parcelRequire("dRxbw");

var $3zyxC = parcelRequire("3zyxC");

var $f1lDT = parcelRequire("f1lDT");
var $65aa326fdb4fb3c1$require$ReadableStreamFrom = $f1lDT.ReadableStreamFrom;
var $65aa326fdb4fb3c1$require$isBlobLike = $f1lDT.isBlobLike;
var $65aa326fdb4fb3c1$require$isReadableStreamLike = $f1lDT.isReadableStreamLike;
var $65aa326fdb4fb3c1$require$readableStreamClose = $f1lDT.readableStreamClose;
var $65aa326fdb4fb3c1$require$createDeferredPromise = $f1lDT.createDeferredPromise;
var $65aa326fdb4fb3c1$require$fullyReadBody = $f1lDT.fullyReadBody;

var $e2Ka3 = parcelRequire("e2Ka3");
var $65aa326fdb4fb3c1$require$FormData = $e2Ka3.FormData;

var $hxvf1 = parcelRequire("hxvf1");
var $65aa326fdb4fb3c1$require$kState = $hxvf1.kState;

var $2BhCx = parcelRequire("2BhCx");
var $65aa326fdb4fb3c1$require$webidl = $2BhCx.webidl;

var $leEOP = parcelRequire("leEOP");
var $65aa326fdb4fb3c1$require$DOMException = $leEOP.DOMException;
var $65aa326fdb4fb3c1$require$structuredClone = $leEOP.structuredClone;

var $65aa326fdb4fb3c1$require$Blob = $3B1P3$buffer.Blob;
var $65aa326fdb4fb3c1$require$NativeFile = $3B1P3$buffer.File;

var $lbv7W = parcelRequire("lbv7W");
var $65aa326fdb4fb3c1$require$kBodyUsed = $lbv7W.kBodyUsed;


var $3zyxC = parcelRequire("3zyxC");
var $65aa326fdb4fb3c1$require$isErrored = $3zyxC.isErrored;

var $65aa326fdb4fb3c1$require$isUint8Array = $3B1P3$utiltypes.isUint8Array;
var $65aa326fdb4fb3c1$require$isArrayBuffer = $3B1P3$utiltypes.isArrayBuffer;

var $gkgHW = parcelRequire("gkgHW");
var $65aa326fdb4fb3c1$require$UndiciFile = $gkgHW.File;

var $dGZhg = parcelRequire("dGZhg");
var $65aa326fdb4fb3c1$require$parseMIMEType = $dGZhg.parseMIMEType;
var $65aa326fdb4fb3c1$require$serializeAMimeType = $dGZhg.serializeAMimeType;
let $65aa326fdb4fb3c1$var$ReadableStream = globalThis.ReadableStream;
/** @type {globalThis['File']} */ const $65aa326fdb4fb3c1$var$File = $65aa326fdb4fb3c1$require$NativeFile !== null && $65aa326fdb4fb3c1$require$NativeFile !== void 0 ? $65aa326fdb4fb3c1$require$NativeFile : $65aa326fdb4fb3c1$require$UndiciFile;
const $65aa326fdb4fb3c1$var$textEncoder = new TextEncoder();
const $65aa326fdb4fb3c1$var$textDecoder = new TextDecoder();

// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
function $65aa326fdb4fb3c1$var$extractBody(object, keepalive = false) {
    if (!$65aa326fdb4fb3c1$var$ReadableStream) $65aa326fdb4fb3c1$var$ReadableStream = $3B1P3$streamweb.ReadableStream;
    // 1. Let stream be null.
    let stream = null;
    // 2. If object is a ReadableStream object, then set stream to object.
    if (object instanceof $65aa326fdb4fb3c1$var$ReadableStream) stream = object;
    else if ($65aa326fdb4fb3c1$require$isBlobLike(object)) // 3. Otherwise, if object is a Blob object, set stream to the
    //    result of running object’s get stream.
    stream = object.stream();
    else // 4. Otherwise, set stream to a new ReadableStream object, and set
    //    up stream.
    stream = new $65aa326fdb4fb3c1$var$ReadableStream({
        async pull (controller) {
            controller.enqueue(typeof source === "string" ? $65aa326fdb4fb3c1$var$textEncoder.encode(source) : source);
            queueMicrotask(()=>$65aa326fdb4fb3c1$require$readableStreamClose(controller));
        },
        start () {},
        type: undefined
    });
    // 5. Assert: stream is a ReadableStream object.
    $3B1P3$assert($65aa326fdb4fb3c1$require$isReadableStreamLike(stream));
    // 6. Let action be null.
    let action = null;
    // 7. Let source be null.
    let source = null;
    // 8. Let length be null.
    let length = null;
    // 9. Let type be null.
    let type = null;
    // 10. Switch on object:
    if (typeof object === "string") {
        // Set source to the UTF-8 encoding of object.
        // Note: setting source to a Uint8Array here breaks some mocking assumptions.
        source = object;
        // Set type to `text/plain;charset=UTF-8`.
        type = "text/plain;charset=UTF-8";
    } else if (object instanceof URLSearchParams) {
        // URLSearchParams
        // spec says to run application/x-www-form-urlencoded on body.list
        // this is implemented in Node.js as apart of an URLSearchParams instance toString method
        // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
        // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100
        // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
        source = object.toString();
        // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
        type = "application/x-www-form-urlencoded;charset=UTF-8";
    } else if ($65aa326fdb4fb3c1$require$isArrayBuffer(object)) // BufferSource/ArrayBuffer
    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.slice());
    else if (ArrayBuffer.isView(object)) // BufferSource/ArrayBufferView
    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
    else if ($3zyxC.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
        const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
        /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ const escape = (str)=>str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
        const normalizeLinefeeds = (value)=>value.replace(/\r?\n|\r/g, "\r\n");
        // Set action to this step: run the multipart/form-data
        // encoding algorithm, with object’s entry list and UTF-8.
        // - This ensures that the body is immutable and can't be changed afterwords
        // - That the content-length is calculated in advance.
        // - And that all parts are pre-encoded and ready to be sent.
        const blobParts = [];
        const rn = new Uint8Array([
            13,
            10
        ]) // '\r\n'
        ;
        length = 0;
        let hasUnknownSizeValue = false;
        for (const [name, value] of object)if (typeof value === "string") {
            const chunk = $65aa326fdb4fb3c1$var$textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
            blobParts.push(chunk);
            length += chunk.byteLength;
        } else {
            const chunk = $65aa326fdb4fb3c1$var$textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + "\r\n" + `Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
            blobParts.push(chunk, value, rn);
            if (typeof value.size === "number") length += chunk.byteLength + value.size + rn.byteLength;
            else hasUnknownSizeValue = true;
        }
        const chunk = $65aa326fdb4fb3c1$var$textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk);
        length += chunk.byteLength;
        if (hasUnknownSizeValue) length = null;
        // Set source to object.
        source = object;
        action = async function*() {
            for (const part of blobParts)if (part.stream) yield* part.stream();
            else yield part;
        };
        // Set type to `multipart/form-data; boundary=`,
        // followed by the multipart/form-data boundary string generated
        // by the multipart/form-data encoding algorithm.
        type = "multipart/form-data; boundary=" + boundary;
    } else if ($65aa326fdb4fb3c1$require$isBlobLike(object)) {
        // Blob
        // Set source to object.
        source = object;
        // Set length to object’s size.
        length = object.size;
        // If object’s type attribute is not the empty byte sequence, set
        // type to its value.
        if (object.type) type = object.type;
    } else if (typeof object[Symbol.asyncIterator] === "function") {
        // If keepalive is true, then throw a TypeError.
        if (keepalive) throw new TypeError("keepalive");
        // If object is disturbed or locked, then throw a TypeError.
        if ($3zyxC.isDisturbed(object) || object.locked) throw new TypeError("Response body object should not be disturbed or locked");
        stream = object instanceof $65aa326fdb4fb3c1$var$ReadableStream ? object : $65aa326fdb4fb3c1$require$ReadableStreamFrom(object);
    }
    // 11. If source is a byte sequence, then set action to a
    // step that returns source and length to source’s length.
    if (typeof source === "string" || $3zyxC.isBuffer(source)) length = Buffer.byteLength(source);
    // 12. If action is non-null, then run these steps in in parallel:
    if (action != null) {
        // Run action.
        let iterator;
        stream = new $65aa326fdb4fb3c1$var$ReadableStream({
            async start () {
                iterator = action(object)[Symbol.asyncIterator]();
            },
            async pull (controller) {
                const { value: value, done: done } = await iterator.next();
                if (done) // When running action is done, close stream.
                queueMicrotask(()=>{
                    controller.close();
                });
                else // Whenever one or more bytes are available and stream is not errored,
                // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
                // bytes into stream.
                if (!$65aa326fdb4fb3c1$require$isErrored(stream)) controller.enqueue(new Uint8Array(value));
                return controller.desiredSize > 0;
            },
            async cancel (reason) {
                await iterator.return();
            },
            type: undefined
        });
    }
    // 13. Let body be a body whose stream is stream, source is source,
    // and length is length.
    const body = {
        stream: stream,
        source: source,
        length: length
    };
    // 14. Return (body, type).
    return [
        body,
        type
    ];
}

// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
function $65aa326fdb4fb3c1$var$safelyExtractBody(object, keepalive = false) {
    if (!$65aa326fdb4fb3c1$var$ReadableStream) // istanbul ignore next
    $65aa326fdb4fb3c1$var$ReadableStream = $3B1P3$streamweb.ReadableStream;
    // To safely extract a body and a `Content-Type` value from
    // a byte sequence or BodyInit object object, run these steps:
    // 1. If object is a ReadableStream object, then:
    if (object instanceof $65aa326fdb4fb3c1$var$ReadableStream) {
        // Assert: object is neither disturbed nor locked.
        // istanbul ignore next
        $3B1P3$assert(!$3zyxC.isDisturbed(object), "The body has already been consumed.");
        // istanbul ignore next
        $3B1P3$assert(!object.locked, "The stream is locked.");
    }
    // 2. Return the results of extracting object.
    return $65aa326fdb4fb3c1$var$extractBody(object, keepalive);
}
function $65aa326fdb4fb3c1$var$cloneBody(body) {
    // To clone a body body, run these steps:
    // https://fetch.spec.whatwg.org/#concept-body-clone
    // 1. Let « out1, out2 » be the result of teeing body’s stream.
    const [out1, out2] = body.stream.tee();
    const out2Clone = $65aa326fdb4fb3c1$require$structuredClone(out2, {
        transfer: [
            out2
        ]
    });
    // This, for whatever reasons, unrefs out2Clone which allows
    // the process to exit by itself.
    const [, finalClone] = out2Clone.tee();
    // 2. Set body’s stream to out1.
    body.stream = out1;
    // 3. Return a body whose stream is out2 and other members are copied from body.
    return {
        stream: finalClone,
        length: body.length,
        source: body.source
    };
}
async function* $65aa326fdb4fb3c1$var$consumeBody(body) {
    if (body) {
        if ($65aa326fdb4fb3c1$require$isUint8Array(body)) yield body;
        else {
            const stream = body.stream;
            if ($3zyxC.isDisturbed(stream)) throw new TypeError("The body has already been consumed.");
            if (stream.locked) throw new TypeError("The stream is locked.");
            // Compat.
            stream[$65aa326fdb4fb3c1$require$kBodyUsed] = true;
            yield* stream;
        }
    }
}
function $65aa326fdb4fb3c1$var$throwIfAborted(state) {
    if (state.aborted) throw new $65aa326fdb4fb3c1$require$DOMException("The operation was aborted.", "AbortError");
}
function $65aa326fdb4fb3c1$var$bodyMixinMethods(instance) {
    const methods = {
        blob () {
            // The blob() method steps are to return the result of
            // running consume body with this and the following step
            // given a byte sequence bytes: return a Blob whose
            // contents are bytes and whose type attribute is this’s
            // MIME type.
            return $65aa326fdb4fb3c1$var$specConsumeBody(this, (bytes)=>{
                let mimeType = $65aa326fdb4fb3c1$var$bodyMimeType(this);
                if (mimeType === "failure") mimeType = "";
                else if (mimeType) mimeType = $65aa326fdb4fb3c1$require$serializeAMimeType(mimeType);
                // Return a Blob whose contents are bytes and type attribute
                // is mimeType.
                return new $65aa326fdb4fb3c1$require$Blob([
                    bytes
                ], {
                    type: mimeType
                });
            }, instance);
        },
        arrayBuffer () {
            // The arrayBuffer() method steps are to return the result
            // of running consume body with this and the following step
            // given a byte sequence bytes: return a new ArrayBuffer
            // whose contents are bytes.
            return $65aa326fdb4fb3c1$var$specConsumeBody(this, (bytes)=>{
                return new Uint8Array(bytes).buffer;
            }, instance);
        },
        text () {
            // The text() method steps are to return the result of running
            // consume body with this and UTF-8 decode.
            return $65aa326fdb4fb3c1$var$specConsumeBody(this, $65aa326fdb4fb3c1$var$utf8DecodeBytes, instance);
        },
        json () {
            // The json() method steps are to return the result of running
            // consume body with this and parse JSON from bytes.
            return $65aa326fdb4fb3c1$var$specConsumeBody(this, $65aa326fdb4fb3c1$var$parseJSONFromBytes, instance);
        },
        async formData () {
            $65aa326fdb4fb3c1$require$webidl.brandCheck(this, instance);
            $65aa326fdb4fb3c1$var$throwIfAborted(this[$65aa326fdb4fb3c1$require$kState]);
            const contentType = this.headers.get("Content-Type");
            // If mimeType’s essence is "multipart/form-data", then:
            if (/multipart\/form-data/.test(contentType)) {
                const headers = {};
                for (const [key, value] of this.headers)headers[key.toLowerCase()] = value;
                const responseFormData = new $65aa326fdb4fb3c1$require$FormData();
                let busboy;
                try {
                    busboy = new $dRxbw({
                        headers: headers,
                        preservePath: true
                    });
                } catch (err) {
                    throw new $65aa326fdb4fb3c1$require$DOMException(`${err}`, "AbortError");
                }
                busboy.on("field", (name, value)=>{
                    responseFormData.append(name, value);
                });
                busboy.on("file", (name, value, filename, encoding, mimeType)=>{
                    const chunks = [];
                    if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                        let base64chunk = "";
                        value.on("data", (chunk)=>{
                            base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                            const end = base64chunk.length - base64chunk.length % 4;
                            chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                            base64chunk = base64chunk.slice(end);
                        });
                        value.on("end", ()=>{
                            chunks.push(Buffer.from(base64chunk, "base64"));
                            responseFormData.append(name, new $65aa326fdb4fb3c1$var$File(chunks, filename, {
                                type: mimeType
                            }));
                        });
                    } else {
                        value.on("data", (chunk)=>{
                            chunks.push(chunk);
                        });
                        value.on("end", ()=>{
                            responseFormData.append(name, new $65aa326fdb4fb3c1$var$File(chunks, filename, {
                                type: mimeType
                            }));
                        });
                    }
                });
                const busboyResolve = new Promise((resolve, reject)=>{
                    busboy.on("finish", resolve);
                    busboy.on("error", (err)=>reject(new TypeError(err)));
                });
                if (this.body !== null) for await (const chunk of $65aa326fdb4fb3c1$var$consumeBody(this[$65aa326fdb4fb3c1$require$kState].body))busboy.write(chunk);
                busboy.end();
                await busboyResolve;
                return responseFormData;
            } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
                // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:
                // 1. Let entries be the result of parsing bytes.
                let entries;
                try {
                    let text = "";
                    // application/x-www-form-urlencoded parser will keep the BOM.
                    // https://url.spec.whatwg.org/#concept-urlencoded-parser
                    // Note that streaming decoder is stateful and cannot be reused
                    const streamingDecoder = new TextDecoder("utf-8", {
                        ignoreBOM: true
                    });
                    for await (const chunk of $65aa326fdb4fb3c1$var$consumeBody(this[$65aa326fdb4fb3c1$require$kState].body)){
                        if (!$65aa326fdb4fb3c1$require$isUint8Array(chunk)) throw new TypeError("Expected Uint8Array chunk");
                        text += streamingDecoder.decode(chunk, {
                            stream: true
                        });
                    }
                    text += streamingDecoder.decode();
                    entries = new URLSearchParams(text);
                } catch (err) {
                    // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
                    // 2. If entries is failure, then throw a TypeError.
                    throw Object.assign(new TypeError(), {
                        cause: err
                    });
                }
                // 3. Return a new FormData object whose entries are entries.
                const formData = new $65aa326fdb4fb3c1$require$FormData();
                for (const [name, value] of entries)formData.append(name, value);
                return formData;
            } else {
                // Wait a tick before checking if the request has been aborted.
                // Otherwise, a TypeError can be thrown when an AbortError should.
                await Promise.resolve();
                $65aa326fdb4fb3c1$var$throwIfAborted(this[$65aa326fdb4fb3c1$require$kState]);
                // Otherwise, throw a TypeError.
                throw $65aa326fdb4fb3c1$require$webidl.errors.exception({
                    header: `${instance.name}.formData`,
                    message: "Could not parse content as FormData."
                });
            }
        }
    };
    return methods;
}
function $65aa326fdb4fb3c1$var$mixinBody(prototype) {
    Object.assign(prototype.prototype, $65aa326fdb4fb3c1$var$bodyMixinMethods(prototype));
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
 * @param {Response|Request} object
 * @param {(value: unknown) => unknown} convertBytesToJSValue
 * @param {Response|Request} instance
 */ async function $65aa326fdb4fb3c1$var$specConsumeBody(object, convertBytesToJSValue, instance) {
    $65aa326fdb4fb3c1$require$webidl.brandCheck(object, instance);
    $65aa326fdb4fb3c1$var$throwIfAborted(object[$65aa326fdb4fb3c1$require$kState]);
    // 1. If object is unusable, then return a promise rejected
    //    with a TypeError.
    if ($65aa326fdb4fb3c1$var$bodyUnusable(object[$65aa326fdb4fb3c1$require$kState].body)) throw new TypeError("Body is unusable");
    // 2. Let promise be a new promise.
    const promise = $65aa326fdb4fb3c1$require$createDeferredPromise();
    // 3. Let errorSteps given error be to reject promise with error.
    const errorSteps = (error)=>promise.reject(error);
    // 4. Let successSteps given a byte sequence data be to resolve
    //    promise with the result of running convertBytesToJSValue
    //    with data. If that threw an exception, then run errorSteps
    //    with that exception.
    const successSteps = (data)=>{
        try {
            promise.resolve(convertBytesToJSValue(data));
        } catch (e) {
            errorSteps(e);
        }
    };
    // 5. If object’s body is null, then run successSteps with an
    //    empty byte sequence.
    if (object[$65aa326fdb4fb3c1$require$kState].body == null) {
        successSteps(new Uint8Array());
        return promise.promise;
    }
    // 6. Otherwise, fully read object’s body given successSteps,
    //    errorSteps, and object’s relevant global object.
    await $65aa326fdb4fb3c1$require$fullyReadBody(object[$65aa326fdb4fb3c1$require$kState].body, successSteps, errorSteps);
    // 7. Return promise.
    return promise.promise;
}
// https://fetch.spec.whatwg.org/#body-unusable
function $65aa326fdb4fb3c1$var$bodyUnusable(body) {
    // An object including the Body interface mixin is
    // said to be unusable if its body is non-null and
    // its body’s stream is disturbed or locked.
    return body != null && (body.stream.locked || $3zyxC.isDisturbed(body.stream));
}
/**
 * @see https://encoding.spec.whatwg.org/#utf-8-decode
 * @param {Buffer} buffer
 */ function $65aa326fdb4fb3c1$var$utf8DecodeBytes(buffer) {
    if (buffer.length === 0) return "";
    // 1. Let buffer be the result of peeking three bytes from
    //    ioQueue, converted to a byte sequence.
    // 2. If buffer is 0xEF 0xBB 0xBF, then read three
    //    bytes from ioQueue. (Do nothing with those bytes.)
    if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) buffer = buffer.subarray(3);
    // 3. Process a queue with an instance of UTF-8’s
    //    decoder, ioQueue, output, and "replacement".
    const output = $65aa326fdb4fb3c1$var$textDecoder.decode(buffer);
    // 4. Return output.
    return output;
}
/**
 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
 * @param {Uint8Array} bytes
 */ function $65aa326fdb4fb3c1$var$parseJSONFromBytes(bytes) {
    return JSON.parse($65aa326fdb4fb3c1$var$utf8DecodeBytes(bytes));
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
 * @param {import('./response').Response|import('./request').Request} object
 */ function $65aa326fdb4fb3c1$var$bodyMimeType(object) {
    const { headersList: headersList } = object[$65aa326fdb4fb3c1$require$kState];
    const contentType = headersList.get("content-type");
    if (contentType === null) return "failure";
    return $65aa326fdb4fb3c1$require$parseMIMEType(contentType);
}
module.exports = {
    extractBody: $65aa326fdb4fb3c1$var$extractBody,
    safelyExtractBody: $65aa326fdb4fb3c1$var$safelyExtractBody,
    cloneBody: $65aa326fdb4fb3c1$var$cloneBody,
    mixinBody: $65aa326fdb4fb3c1$var$mixinBody
};

});
parcelRegister("dRxbw", function(module, exports) {
"use strict";

var $a179f766ccc8628b$require$WritableStream = $3B1P3$nodestream.Writable;

var $a179f766ccc8628b$require$inherits = $3B1P3$nodeutil.inherits;

var $g85MJ = parcelRequire("g85MJ");

var $6zr1Q = parcelRequire("6zr1Q");

var $5CbFB = parcelRequire("5CbFB");

var $lMIWu = parcelRequire("lMIWu");
function $a179f766ccc8628b$var$Busboy(opts) {
    if (!(this instanceof $a179f766ccc8628b$var$Busboy)) return new $a179f766ccc8628b$var$Busboy(opts);
    if (typeof opts !== "object") throw new TypeError("Busboy expected an options-Object.");
    if (typeof opts.headers !== "object") throw new TypeError("Busboy expected an options-Object with headers-attribute.");
    if (typeof opts.headers["content-type"] !== "string") throw new TypeError("Missing Content-Type-header.");
    const { headers: headers, ...streamOptions } = opts;
    this.opts = {
        autoDestroy: false,
        ...streamOptions
    };
    $a179f766ccc8628b$require$WritableStream.call(this, this.opts);
    this._done = false;
    this._parser = this.getParserByHeaders(headers);
    this._finished = false;
}
$a179f766ccc8628b$require$inherits($a179f766ccc8628b$var$Busboy, $a179f766ccc8628b$require$WritableStream);
$a179f766ccc8628b$var$Busboy.prototype.emit = function(ev) {
    if (ev === "finish") {
        if (!this._done) {
            var _this__parser;
            (_this__parser = this._parser) === null || _this__parser === void 0 ? void 0 : _this__parser.end();
            return;
        } else if (this._finished) return;
        this._finished = true;
    }
    $a179f766ccc8628b$require$WritableStream.prototype.emit.apply(this, arguments);
};
$a179f766ccc8628b$var$Busboy.prototype.getParserByHeaders = function(headers) {
    const parsed = $lMIWu(headers["content-type"]);
    const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers: headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
    };
    if ($6zr1Q.detect.test(parsed[0])) return new $6zr1Q(this, cfg);
    if ($5CbFB.detect.test(parsed[0])) return new $5CbFB(this, cfg);
    throw new Error("Unsupported Content-Type.");
};
$a179f766ccc8628b$var$Busboy.prototype._write = function(chunk, encoding, cb) {
    this._parser.write(chunk, cb);
};
module.exports = $a179f766ccc8628b$var$Busboy;
module.exports.default = $a179f766ccc8628b$var$Busboy;
module.exports.Busboy = $a179f766ccc8628b$var$Busboy;
module.exports.Dicer = $g85MJ;

});
parcelRegister("g85MJ", function(module, exports) {
"use strict";

var $bbe1e17db789e5b8$require$WritableStream = $3B1P3$nodestream.Writable;

var $bbe1e17db789e5b8$require$inherits = $3B1P3$nodeutil.inherits;

var $5tAuX = parcelRequire("5tAuX");

var $5hhwf = parcelRequire("5hhwf");

var $7F96o = parcelRequire("7F96o");
const $bbe1e17db789e5b8$var$DASH = 45;
const $bbe1e17db789e5b8$var$B_ONEDASH = Buffer.from("-");
const $bbe1e17db789e5b8$var$B_CRLF = Buffer.from("\r\n");
const $bbe1e17db789e5b8$var$EMPTY_FN = function() {};
function $bbe1e17db789e5b8$var$Dicer(cfg) {
    if (!(this instanceof $bbe1e17db789e5b8$var$Dicer)) return new $bbe1e17db789e5b8$var$Dicer(cfg);
    $bbe1e17db789e5b8$require$WritableStream.call(this, cfg);
    if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") throw new TypeError("Boundary required");
    if (typeof cfg.boundary === "string") this.setBoundary(cfg.boundary);
    else this._bparser = undefined;
    this._headerFirst = cfg.headerFirst;
    this._dashes = 0;
    this._parts = 0;
    this._finished = false;
    this._realFinish = false;
    this._isPreamble = true;
    this._justMatched = false;
    this._firstWrite = true;
    this._inHeader = true;
    this._part = undefined;
    this._cb = undefined;
    this._ignoreData = false;
    this._partOpts = {
        highWaterMark: cfg.partHwm
    };
    this._pause = false;
    const self = this;
    this._hparser = new $7F96o(cfg);
    this._hparser.on("header", function(header) {
        self._inHeader = false;
        self._part.emit("header", header);
    });
}
$bbe1e17db789e5b8$require$inherits($bbe1e17db789e5b8$var$Dicer, $bbe1e17db789e5b8$require$WritableStream);
$bbe1e17db789e5b8$var$Dicer.prototype.emit = function(ev) {
    if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
            const self = this;
            process.nextTick(function() {
                self.emit("error", new Error("Unexpected end of multipart data"));
                if (self._part && !self._ignoreData) {
                    const type = self._isPreamble ? "Preamble" : "Part";
                    self._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
                    self._part.push(null);
                    process.nextTick(function() {
                        self._realFinish = true;
                        self.emit("finish");
                        self._realFinish = false;
                    });
                    return;
                }
                self._realFinish = true;
                self.emit("finish");
                self._realFinish = false;
            });
        }
    } else $bbe1e17db789e5b8$require$WritableStream.prototype.emit.apply(this, arguments);
};
$bbe1e17db789e5b8$var$Dicer.prototype._write = function(data, encoding, cb) {
    // ignore unexpected data (e.g. extra trailer data after finished)
    if (!this._hparser && !this._bparser) return cb();
    if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
            this._part = new $5hhwf(this._partOpts);
            if (this._events.preamble) this.emit("preamble", this._part);
            else this._ignore();
        }
        const r = this._hparser.push(data);
        if (!this._inHeader && r !== undefined && r < data.length) data = data.slice(r);
        else return cb();
    }
    // allows for "easier" testing
    if (this._firstWrite) {
        this._bparser.push($bbe1e17db789e5b8$var$B_CRLF);
        this._firstWrite = false;
    }
    this._bparser.push(data);
    if (this._pause) this._cb = cb;
    else cb();
};
$bbe1e17db789e5b8$var$Dicer.prototype.reset = function() {
    this._part = undefined;
    this._bparser = undefined;
    this._hparser = undefined;
};
$bbe1e17db789e5b8$var$Dicer.prototype.setBoundary = function(boundary) {
    const self = this;
    this._bparser = new $5tAuX("\r\n--" + boundary);
    this._bparser.on("info", function(isMatch, data, start, end) {
        self._oninfo(isMatch, data, start, end);
    });
};
$bbe1e17db789e5b8$var$Dicer.prototype._ignore = function() {
    if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", $bbe1e17db789e5b8$var$EMPTY_FN);
        // we must perform some kind of read on the stream even though we are
        // ignoring the data, otherwise node's Readable stream will not emit 'end'
        // after pushing null to the stream
        this._part.resume();
    }
};
$bbe1e17db789e5b8$var$Dicer.prototype._oninfo = function(isMatch, data, start, end) {
    let buf;
    const self = this;
    let i = 0;
    let r;
    let shouldWriteMore = true;
    if (!this._part && this._justMatched && data) {
        while(this._dashes < 2 && start + i < end)if (data[start + i] === $bbe1e17db789e5b8$var$DASH) {
            ++i;
            ++this._dashes;
        } else {
            if (this._dashes) buf = $bbe1e17db789e5b8$var$B_ONEDASH;
            this._dashes = 0;
            break;
        }
        if (this._dashes === 2) {
            if (start + i < end && this._events.trailer) this.emit("trailer", data.slice(start + i, end));
            this.reset();
            this._finished = true;
            // no more parts will be added
            if (self._parts === 0) {
                self._realFinish = true;
                self.emit("finish");
                self._realFinish = false;
            }
        }
        if (this._dashes) return;
    }
    if (this._justMatched) this._justMatched = false;
    if (!this._part) {
        this._part = new $5hhwf(this._partOpts);
        this._part._read = function(n) {
            self._unpause();
        };
        if (this._isPreamble && this._events.preamble) this.emit("preamble", this._part);
        else if (this._isPreamble !== true && this._events.part) this.emit("part", this._part);
        else this._ignore();
        if (!this._isPreamble) this._inHeader = true;
    }
    if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
            if (buf) shouldWriteMore = this._part.push(buf);
            shouldWriteMore = this._part.push(data.slice(start, end));
            if (!shouldWriteMore) this._pause = true;
        } else if (!this._isPreamble && this._inHeader) {
            if (buf) this._hparser.push(buf);
            r = this._hparser.push(data.slice(start, end));
            if (!this._inHeader && r !== undefined && r < end) this._oninfo(false, data, start + r, end);
        }
    }
    if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) this._isPreamble = false;
        else if (start !== end) {
            ++this._parts;
            this._part.on("end", function() {
                if (--self._parts === 0) {
                    if (self._finished) {
                        self._realFinish = true;
                        self.emit("finish");
                        self._realFinish = false;
                    } else self._unpause();
                }
            });
        }
        this._part.push(null);
        this._part = undefined;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
    }
};
$bbe1e17db789e5b8$var$Dicer.prototype._unpause = function() {
    if (!this._pause) return;
    this._pause = false;
    if (this._cb) {
        const cb = this._cb;
        this._cb = undefined;
        cb();
    }
};
module.exports = $bbe1e17db789e5b8$var$Dicer;

});
parcelRegister("5tAuX", function(module, exports) {
"use strict";

var $3fcbf902cc10e10c$require$EventEmitter = $3B1P3$nodeevents.EventEmitter;

var $3fcbf902cc10e10c$require$inherits = $3B1P3$nodeutil.inherits;
function $3fcbf902cc10e10c$var$SBMH(needle) {
    if (typeof needle === "string") needle = Buffer.from(needle);
    if (!Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
    const needleLength = needle.length;
    if (needleLength === 0) throw new Error("The needle cannot be an empty String/Buffer.");
    if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
    this.maxMatches = Infinity;
    this.matches = 0;
    this._occ = new Array(256).fill(needleLength) // Initialize occurrence table.
    ;
    this._lookbehind_size = 0;
    this._needle = needle;
    this._bufpos = 0;
    this._lookbehind = Buffer.alloc(needleLength);
    // Populate occurrence table with analysis of the needle,
    // ignoring last letter.
    for(var i = 0; i < needleLength - 1; ++i)this._occ[needle[i]] = needleLength - 1 - i;
}
$3fcbf902cc10e10c$require$inherits($3fcbf902cc10e10c$var$SBMH, $3fcbf902cc10e10c$require$EventEmitter);
$3fcbf902cc10e10c$var$SBMH.prototype.reset = function() {
    this._lookbehind_size = 0;
    this.matches = 0;
    this._bufpos = 0;
};
$3fcbf902cc10e10c$var$SBMH.prototype.push = function(chunk, pos) {
    if (!Buffer.isBuffer(chunk)) chunk = Buffer.from(chunk, "binary");
    const chlen = chunk.length;
    this._bufpos = pos || 0;
    let r;
    while(r !== chlen && this.matches < this.maxMatches)r = this._sbmh_feed(chunk);
    return r;
};
$3fcbf902cc10e10c$var$SBMH.prototype._sbmh_feed = function(data) {
    const len = data.length;
    const needle = this._needle;
    const needleLength = needle.length;
    const lastNeedleChar = needle[needleLength - 1];
    // Positive: points to a position in `data`
    //           pos == 3 points to data[3]
    // Negative: points to a position in the lookbehind buffer
    //           pos == -2 points to lookbehind[lookbehind_size - 2]
    let pos = -this._lookbehind_size;
    let ch;
    if (pos < 0) {
        // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
        // search with character lookup code that considers both the
        // lookbehind buffer and the current round's haystack data.
        //
        // Loop until
        //   there is a match.
        // or until
        //   we've moved past the position that requires the
        //   lookbehind buffer. In this case we switch to the
        //   optimized loop.
        // or until
        //   the character to look at lies outside the haystack.
        while(pos < 0 && pos <= len - needleLength){
            ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
            if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
                this._lookbehind_size = 0;
                ++this.matches;
                this.emit("info", true);
                return this._bufpos = pos + needleLength;
            }
            pos += this._occ[ch];
        }
        // No match.
        if (pos < 0) // There's too few data for Boyer-Moore-Horspool to run,
        // so let's use a different algorithm to skip as much as
        // we can.
        // Forward pos until
        //   the trailing part of lookbehind + data
        //   looks like the beginning of the needle
        // or until
        //   pos == 0
        while(pos < 0 && !this._sbmh_memcmp(data, pos, len - pos))++pos;
        if (pos >= 0) {
            // Discard lookbehind buffer.
            this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
            this._lookbehind_size = 0;
        } else {
            // Cut off part of the lookbehind buffer that has
            // been processed and append the entire haystack
            // into it.
            const bytesToCutOff = this._lookbehind_size + pos;
            if (bytesToCutOff > 0) // The cut off data is guaranteed not to contain the needle.
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
            this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
            this._lookbehind_size -= bytesToCutOff;
            data.copy(this._lookbehind, this._lookbehind_size);
            this._lookbehind_size += len;
            this._bufpos = len;
            return len;
        }
    }
    pos += (pos >= 0) * this._bufpos;
    // Lookbehind buffer is now empty. We only need to check if the
    // needle is in the haystack.
    if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) this.emit("info", true, data, this._bufpos, pos);
        else this.emit("info", true);
        return this._bufpos = pos + needleLength;
    } else pos = len - needleLength;
    // There was no match. If there's trailing haystack data that we cannot
    // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
    // data is less than the needle size) then match using a modified
    // algorithm that starts matching from the beginning instead of the end.
    // Whatever trailing data is left after running this algorithm is added to
    // the lookbehind buffer.
    while(pos < len && (data[pos] !== needle[0] || Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0))++pos;
    if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
    }
    // Everything until pos is guaranteed not to contain needle data.
    if (pos > 0) this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
    this._bufpos = len;
    return len;
};
$3fcbf902cc10e10c$var$SBMH.prototype._sbmh_lookup_char = function(data, pos) {
    return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
};
$3fcbf902cc10e10c$var$SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
    for(var i = 0; i < len; ++i){
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) return false;
    }
    return true;
};
module.exports = $3fcbf902cc10e10c$var$SBMH;

});

parcelRegister("5hhwf", function(module, exports) {
"use strict";

var $3d7c2133363af384$require$inherits = $3B1P3$nodeutil.inherits;

var $3d7c2133363af384$require$ReadableStream = $3B1P3$nodestream.Readable;
function $3d7c2133363af384$var$PartStream(opts) {
    $3d7c2133363af384$require$ReadableStream.call(this, opts);
}
$3d7c2133363af384$require$inherits($3d7c2133363af384$var$PartStream, $3d7c2133363af384$require$ReadableStream);
$3d7c2133363af384$var$PartStream.prototype._read = function(n) {};
module.exports = $3d7c2133363af384$var$PartStream;

});

parcelRegister("7F96o", function(module, exports) {
"use strict";

var $01709242f71b5b52$require$EventEmitter = $3B1P3$nodeevents.EventEmitter;

var $01709242f71b5b52$require$inherits = $3B1P3$nodeutil.inherits;

var $lHWsA = parcelRequire("lHWsA");

var $5tAuX = parcelRequire("5tAuX");
const $01709242f71b5b52$var$B_DCRLF = Buffer.from("\r\n\r\n");
const $01709242f71b5b52$var$RE_CRLF = /\r\n/g;
const $01709242f71b5b52$var$RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex
;
function $01709242f71b5b52$var$HeaderParser(cfg) {
    $01709242f71b5b52$require$EventEmitter.call(this);
    cfg = cfg || {};
    const self = this;
    this.nread = 0;
    this.maxed = false;
    this.npairs = 0;
    this.maxHeaderPairs = $lHWsA(cfg, "maxHeaderPairs", 2000);
    this.maxHeaderSize = $lHWsA(cfg, "maxHeaderSize", 81920);
    this.buffer = "";
    this.header = {};
    this.finished = false;
    this.ss = new $5tAuX($01709242f71b5b52$var$B_DCRLF);
    this.ss.on("info", function(isMatch, data, start, end) {
        if (data && !self.maxed) {
            if (self.nread + end - start >= self.maxHeaderSize) {
                end = self.maxHeaderSize - self.nread + start;
                self.nread = self.maxHeaderSize;
                self.maxed = true;
            } else self.nread += end - start;
            self.buffer += data.toString("binary", start, end);
        }
        if (isMatch) self._finish();
    });
}
$01709242f71b5b52$require$inherits($01709242f71b5b52$var$HeaderParser, $01709242f71b5b52$require$EventEmitter);
$01709242f71b5b52$var$HeaderParser.prototype.push = function(data) {
    const r = this.ss.push(data);
    if (this.finished) return r;
};
$01709242f71b5b52$var$HeaderParser.prototype.reset = function() {
    this.finished = false;
    this.buffer = "";
    this.header = {};
    this.ss.reset();
};
$01709242f71b5b52$var$HeaderParser.prototype._finish = function() {
    if (this.buffer) this._parseHeader();
    this.ss.matches = this.ss.maxMatches;
    const header = this.header;
    this.header = {};
    this.buffer = "";
    this.finished = true;
    this.nread = this.npairs = 0;
    this.maxed = false;
    this.emit("header", header);
};
$01709242f71b5b52$var$HeaderParser.prototype._parseHeader = function() {
    if (this.npairs === this.maxHeaderPairs) return;
    const lines = this.buffer.split($01709242f71b5b52$var$RE_CRLF);
    const len = lines.length;
    let m, h;
    for(var i = 0; i < len; ++i){
        if (lines[i].length === 0) continue;
        if (lines[i][0] === "	" || lines[i][0] === " ") // folded header content
        // RFC2822 says to just remove the CRLF and not the whitespace following
        // it, so we follow the RFC and include the leading whitespace ...
        {
            if (h) {
                this.header[h][this.header[h].length - 1] += lines[i];
                continue;
            }
        }
        const posColon = lines[i].indexOf(":");
        if (posColon === -1 || posColon === 0) return;
        m = $01709242f71b5b52$var$RE_HDR.exec(lines[i]);
        h = m[1].toLowerCase();
        this.header[h] = this.header[h] || [];
        this.header[h].push(m[2] || "");
        if (++this.npairs === this.maxHeaderPairs) break;
    }
};
module.exports = $01709242f71b5b52$var$HeaderParser;

});
parcelRegister("lHWsA", function(module, exports) {
"use strict";
module.exports = function getLimit(limits, name, defaultLimit) {
    if (!limits || limits[name] === undefined || limits[name] === null) return defaultLimit;
    if (typeof limits[name] !== "number" || isNaN(limits[name])) throw new TypeError("Limit " + name + " is not a valid number");
    return limits[name];
};

});



parcelRegister("6zr1Q", function(module, exports) {
"use strict";

var $4c8afa54de0cd936$require$Readable = $3B1P3$nodestream.Readable;

var $4c8afa54de0cd936$require$inherits = $3B1P3$nodeutil.inherits;

var $g85MJ = parcelRequire("g85MJ");

var $lMIWu = parcelRequire("lMIWu");

var $8OLFI = parcelRequire("8OLFI");

var $2hQYg = parcelRequire("2hQYg");

var $lHWsA = parcelRequire("lHWsA");
const $4c8afa54de0cd936$var$RE_BOUNDARY = /^boundary$/i;
const $4c8afa54de0cd936$var$RE_FIELD = /^form-data$/i;
const $4c8afa54de0cd936$var$RE_CHARSET = /^charset$/i;
const $4c8afa54de0cd936$var$RE_FILENAME = /^filename$/i;
const $4c8afa54de0cd936$var$RE_NAME = /^name$/i;
$4c8afa54de0cd936$var$Multipart.detect = /^multipart\/form-data/i;
function $4c8afa54de0cd936$var$Multipart(boy, cfg) {
    let i;
    let len;
    const self = this;
    let boundary;
    const limits = cfg.limits;
    const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName)=>contentType === "application/octet-stream" || fileName !== undefined);
    const parsedConType = cfg.parsedConType || [];
    const defCharset = cfg.defCharset || "utf8";
    const preservePath = cfg.preservePath;
    const fileOpts = {
        highWaterMark: cfg.fileHwm
    };
    for(i = 0, len = parsedConType.length; i < len; ++i)if (Array.isArray(parsedConType[i]) && $4c8afa54de0cd936$var$RE_BOUNDARY.test(parsedConType[i][0])) {
        boundary = parsedConType[i][1];
        break;
    }
    function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
            finished = false;
            self.end();
        }
    }
    if (typeof boundary !== "string") throw new Error("Multipart: Boundary not found");
    const fieldSizeLimit = $lHWsA(limits, "fieldSize", 1048576);
    const fileSizeLimit = $lHWsA(limits, "fileSize", Infinity);
    const filesLimit = $lHWsA(limits, "files", Infinity);
    const fieldsLimit = $lHWsA(limits, "fields", Infinity);
    const partsLimit = $lHWsA(limits, "parts", Infinity);
    const headerPairsLimit = $lHWsA(limits, "headerPairs", 2000);
    const headerSizeLimit = $lHWsA(limits, "headerSize", 81920);
    let nfiles = 0;
    let nfields = 0;
    let nends = 0;
    let curFile;
    let curField;
    let finished = false;
    this._needDrain = false;
    this._pause = false;
    this._cb = undefined;
    this._nparts = 0;
    this._boy = boy;
    const parserCfg = {
        boundary: boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
    };
    this.parser = new $g85MJ(parserCfg);
    this.parser.on("drain", function() {
        self._needDrain = false;
        if (self._cb && !self._pause) {
            const cb = self._cb;
            self._cb = undefined;
            cb();
        }
    }).on("part", function onPart(part) {
        if (++self._nparts > partsLimit) {
            self.parser.removeListener("part", onPart);
            self.parser.on("part", $4c8afa54de0cd936$var$skipPart);
            boy.hitPartsLimit = true;
            boy.emit("partsLimit");
            return $4c8afa54de0cd936$var$skipPart(part);
        }
        // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
        // us emit 'end' early since we know the part has ended if we are already
        // seeing the next part
        if (curField) {
            const field = curField;
            field.emit("end");
            field.removeAllListeners("end");
        }
        part.on("header", function(header) {
            let contype;
            let fieldname;
            let parsed;
            let charset;
            let encoding;
            let filename;
            let nsize = 0;
            if (header["content-type"]) {
                parsed = $lMIWu(header["content-type"][0]);
                if (parsed[0]) {
                    contype = parsed[0].toLowerCase();
                    for(i = 0, len = parsed.length; i < len; ++i)if ($4c8afa54de0cd936$var$RE_CHARSET.test(parsed[i][0])) {
                        charset = parsed[i][1].toLowerCase();
                        break;
                    }
                }
            }
            if (contype === undefined) contype = "text/plain";
            if (charset === undefined) charset = defCharset;
            if (header["content-disposition"]) {
                parsed = $lMIWu(header["content-disposition"][0]);
                if (!$4c8afa54de0cd936$var$RE_FIELD.test(parsed[0])) return $4c8afa54de0cd936$var$skipPart(part);
                for(i = 0, len = parsed.length; i < len; ++i){
                    if ($4c8afa54de0cd936$var$RE_NAME.test(parsed[i][0])) fieldname = parsed[i][1];
                    else if ($4c8afa54de0cd936$var$RE_FILENAME.test(parsed[i][0])) {
                        filename = parsed[i][1];
                        if (!preservePath) filename = $2hQYg(filename);
                    }
                }
            } else return $4c8afa54de0cd936$var$skipPart(part);
            if (header["content-transfer-encoding"]) encoding = header["content-transfer-encoding"][0].toLowerCase();
            else encoding = "7bit";
            let onData, onEnd;
            if (isPartAFile(fieldname, contype, filename)) {
                // file/binary field
                if (nfiles === filesLimit) {
                    if (!boy.hitFilesLimit) {
                        boy.hitFilesLimit = true;
                        boy.emit("filesLimit");
                    }
                    return $4c8afa54de0cd936$var$skipPart(part);
                }
                ++nfiles;
                if (!boy._events.file) {
                    self.parser._ignore();
                    return;
                }
                ++nends;
                const file = new $4c8afa54de0cd936$var$FileStream(fileOpts);
                curFile = file;
                file.on("end", function() {
                    --nends;
                    self._pause = false;
                    checkFinished();
                    if (self._cb && !self._needDrain) {
                        const cb = self._cb;
                        self._cb = undefined;
                        cb();
                    }
                });
                file._read = function(n) {
                    if (!self._pause) return;
                    self._pause = false;
                    if (self._cb && !self._needDrain) {
                        const cb = self._cb;
                        self._cb = undefined;
                        cb();
                    }
                };
                boy.emit("file", fieldname, file, filename, encoding, contype);
                onData = function(data) {
                    if ((nsize += data.length) > fileSizeLimit) {
                        const extralen = fileSizeLimit - nsize + data.length;
                        if (extralen > 0) file.push(data.slice(0, extralen));
                        file.truncated = true;
                        file.bytesRead = fileSizeLimit;
                        part.removeAllListeners("data");
                        file.emit("limit");
                        return;
                    } else if (!file.push(data)) self._pause = true;
                    file.bytesRead = nsize;
                };
                onEnd = function() {
                    curFile = undefined;
                    file.push(null);
                };
            } else {
                // non-file field
                if (nfields === fieldsLimit) {
                    if (!boy.hitFieldsLimit) {
                        boy.hitFieldsLimit = true;
                        boy.emit("fieldsLimit");
                    }
                    return $4c8afa54de0cd936$var$skipPart(part);
                }
                ++nfields;
                ++nends;
                let buffer = "";
                let truncated = false;
                curField = part;
                onData = function(data) {
                    if ((nsize += data.length) > fieldSizeLimit) {
                        const extralen = fieldSizeLimit - (nsize - data.length);
                        buffer += data.toString("binary", 0, extralen);
                        truncated = true;
                        part.removeAllListeners("data");
                    } else buffer += data.toString("binary");
                };
                onEnd = function() {
                    curField = undefined;
                    if (buffer.length) buffer = $8OLFI(buffer, "binary", charset);
                    boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
                    --nends;
                    checkFinished();
                };
            }
            /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */ part._readableState.sync = false;
            part.on("data", onData);
            part.on("end", onEnd);
        }).on("error", function(err) {
            if (curFile) curFile.emit("error", err);
        });
    }).on("error", function(err) {
        boy.emit("error", err);
    }).on("finish", function() {
        finished = true;
        checkFinished();
    });
}
$4c8afa54de0cd936$var$Multipart.prototype.write = function(chunk, cb) {
    const r = this.parser.write(chunk);
    if (r && !this._pause) cb();
    else {
        this._needDrain = !r;
        this._cb = cb;
    }
};
$4c8afa54de0cd936$var$Multipart.prototype.end = function() {
    const self = this;
    if (self.parser.writable) self.parser.end();
    else if (!self._boy._done) process.nextTick(function() {
        self._boy._done = true;
        self._boy.emit("finish");
    });
};
function $4c8afa54de0cd936$var$skipPart(part) {
    part.resume();
}
function $4c8afa54de0cd936$var$FileStream(opts) {
    $4c8afa54de0cd936$require$Readable.call(this, opts);
    this.bytesRead = 0;
    this.truncated = false;
}
$4c8afa54de0cd936$require$inherits($4c8afa54de0cd936$var$FileStream, $4c8afa54de0cd936$require$Readable);
$4c8afa54de0cd936$var$FileStream.prototype._read = function(n) {};
module.exports = $4c8afa54de0cd936$var$Multipart;

});
parcelRegister("lMIWu", function(module, exports) {
"use strict";

var $8OLFI = parcelRequire("8OLFI");
const $fdc0f14e13b619c3$var$RE_ENCODED = /%([a-fA-F0-9]{2})/g;
function $fdc0f14e13b619c3$var$encodedReplacer(match, byte) {
    return String.fromCharCode(parseInt(byte, 16));
}
function $fdc0f14e13b619c3$var$parseParams(str) {
    const res = [];
    let state = "key";
    let charset = "";
    let inquote = false;
    let escaping = false;
    let p = 0;
    let tmp = "";
    for(var i = 0, len = str.length; i < len; ++i){
        const char = str[i];
        if (char === "\\" && inquote) {
            if (escaping) escaping = false;
            else {
                escaping = true;
                continue;
            }
        } else if (char === '"') {
            if (!escaping) {
                if (inquote) {
                    inquote = false;
                    state = "key";
                } else inquote = true;
                continue;
            } else escaping = false;
        } else {
            if (escaping && inquote) tmp += "\\";
            escaping = false;
            if ((state === "charset" || state === "lang") && char === "'") {
                if (state === "charset") {
                    state = "lang";
                    charset = tmp.substring(1);
                } else state = "value";
                tmp = "";
                continue;
            } else if (state === "key" && (char === "*" || char === "=") && res.length) {
                if (char === "*") state = "charset";
                else state = "value";
                res[p] = [
                    tmp,
                    undefined
                ];
                tmp = "";
                continue;
            } else if (!inquote && char === ";") {
                state = "key";
                if (charset) {
                    if (tmp.length) tmp = $8OLFI(tmp.replace($fdc0f14e13b619c3$var$RE_ENCODED, $fdc0f14e13b619c3$var$encodedReplacer), "binary", charset);
                    charset = "";
                } else if (tmp.length) tmp = $8OLFI(tmp, "binary", "utf8");
                if (res[p] === undefined) res[p] = tmp;
                else res[p][1] = tmp;
                tmp = "";
                ++p;
                continue;
            } else if (!inquote && (char === " " || char === "	")) continue;
        }
        tmp += char;
    }
    if (charset && tmp.length) tmp = $8OLFI(tmp.replace($fdc0f14e13b619c3$var$RE_ENCODED, $fdc0f14e13b619c3$var$encodedReplacer), "binary", charset);
    else if (tmp) tmp = $8OLFI(tmp, "binary", "utf8");
    if (res[p] === undefined) {
        if (tmp) res[p] = tmp;
    } else res[p][1] = tmp;
    return res;
}
module.exports = $fdc0f14e13b619c3$var$parseParams;

});
parcelRegister("8OLFI", function(module, exports) {
"use strict";
// Node has always utf-8
const $66b7f8dba5264bdc$var$utf8Decoder = new TextDecoder("utf-8");
const $66b7f8dba5264bdc$var$textDecoders = new Map([
    [
        "utf-8",
        $66b7f8dba5264bdc$var$utf8Decoder
    ],
    [
        "utf8",
        $66b7f8dba5264bdc$var$utf8Decoder
    ]
]);
function $66b7f8dba5264bdc$var$decodeText(text, textEncoding, destEncoding) {
    if (text) {
        if ($66b7f8dba5264bdc$var$textDecoders.has(destEncoding)) try {
            return $66b7f8dba5264bdc$var$textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));
        } catch (e) {}
        else try {
            $66b7f8dba5264bdc$var$textDecoders.set(destEncoding, new TextDecoder(destEncoding));
            return $66b7f8dba5264bdc$var$textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));
        } catch (e) {}
    }
    return text;
}
module.exports = $66b7f8dba5264bdc$var$decodeText;

});


parcelRegister("2hQYg", function(module, exports) {
"use strict";
module.exports = function basename(path) {
    if (typeof path !== "string") return "";
    for(var i = path.length - 1; i >= 0; --i)switch(path.charCodeAt(i)){
        case 0x2F:
        case 0x5C:
            path = path.slice(i + 1);
            return path === ".." || path === "." ? "" : path;
    }
    return path === ".." || path === "." ? "" : path;
};

});


parcelRegister("5CbFB", function(module, exports) {
"use strict";

var $56eNx = parcelRequire("56eNx");

var $8OLFI = parcelRequire("8OLFI");

var $lHWsA = parcelRequire("lHWsA");
const $41698dcb58f025f2$var$RE_CHARSET = /^charset$/i;
$41698dcb58f025f2$var$UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
function $41698dcb58f025f2$var$UrlEncoded(boy, cfg) {
    const limits = cfg.limits;
    const parsedConType = cfg.parsedConType;
    this.boy = boy;
    this.fieldSizeLimit = $lHWsA(limits, "fieldSize", 1048576);
    this.fieldNameSizeLimit = $lHWsA(limits, "fieldNameSize", 100);
    this.fieldsLimit = $lHWsA(limits, "fields", Infinity);
    let charset;
    for(var i = 0, len = parsedConType.length; i < len; ++i)if (Array.isArray(parsedConType[i]) && $41698dcb58f025f2$var$RE_CHARSET.test(parsedConType[i][0])) {
        charset = parsedConType[i][1].toLowerCase();
        break;
    }
    if (charset === undefined) charset = cfg.defCharset || "utf8";
    this.decoder = new $56eNx();
    this.charset = charset;
    this._fields = 0;
    this._state = "key";
    this._checkingBytes = true;
    this._bytesKey = 0;
    this._bytesVal = 0;
    this._key = "";
    this._val = "";
    this._keyTrunc = false;
    this._valTrunc = false;
    this._hitLimit = false;
}
$41698dcb58f025f2$var$UrlEncoded.prototype.write = function(data, cb) {
    if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
            this.boy.hitFieldsLimit = true;
            this.boy.emit("fieldsLimit");
        }
        return cb();
    }
    let idxeq;
    let idxamp;
    let i;
    let p = 0;
    const len = data.length;
    while(p < len)if (this._state === "key") {
        idxeq = idxamp = undefined;
        for(i = p; i < len; ++i){
            if (!this._checkingBytes) ++p;
            if (data[i] === 0x3D /* = */ ) {
                idxeq = i;
                break;
            } else if (data[i] === 0x26 /* & */ ) {
                idxamp = i;
                break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
                this._hitLimit = true;
                break;
            } else if (this._checkingBytes) ++this._bytesKey;
        }
        if (idxeq !== undefined) {
            // key with assignment
            if (idxeq > p) this._key += this.decoder.write(data.toString("binary", p, idxeq));
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p = idxeq + 1;
        } else if (idxamp !== undefined) {
            // key with no assignment
            ++this._fields;
            let key;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p) key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
            else key = this._key;
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key.length) this.boy.emit("field", $8OLFI(key, "binary", this.charset), "", keyTrunc, false);
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) return cb();
        } else if (this._hitLimit) {
            // we may not have hit the actual limit if there are encoded bytes...
            if (i > p) this._key += this.decoder.write(data.toString("binary", p, i));
            p = i;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
                // yep, we actually did hit the limit
                this._checkingBytes = false;
                this._keyTrunc = true;
            }
        } else {
            if (p < len) this._key += this.decoder.write(data.toString("binary", p));
            p = len;
        }
    } else {
        idxamp = undefined;
        for(i = p; i < len; ++i){
            if (!this._checkingBytes) ++p;
            if (data[i] === 0x26 /* & */ ) {
                idxamp = i;
                break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
                this._hitLimit = true;
                break;
            } else if (this._checkingBytes) ++this._bytesVal;
        }
        if (idxamp !== undefined) {
            ++this._fields;
            if (idxamp > p) this._val += this.decoder.write(data.toString("binary", p, idxamp));
            this.boy.emit("field", $8OLFI(this._key, "binary", this.charset), $8OLFI(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) return cb();
        } else if (this._hitLimit) {
            // we may not have hit the actual limit if there are encoded bytes...
            if (i > p) this._val += this.decoder.write(data.toString("binary", p, i));
            p = i;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
                // yep, we actually did hit the limit
                this._checkingBytes = false;
                this._valTrunc = true;
            }
        } else {
            if (p < len) this._val += this.decoder.write(data.toString("binary", p));
            p = len;
        }
    }
    cb();
};
$41698dcb58f025f2$var$UrlEncoded.prototype.end = function() {
    if (this.boy._done) return;
    if (this._state === "key" && this._key.length > 0) this.boy.emit("field", $8OLFI(this._key, "binary", this.charset), "", this._keyTrunc, false);
    else if (this._state === "val") this.boy.emit("field", $8OLFI(this._key, "binary", this.charset), $8OLFI(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
    this.boy._done = true;
    this.boy.emit("finish");
};
module.exports = $41698dcb58f025f2$var$UrlEncoded;

});
parcelRegister("56eNx", function(module, exports) {
"use strict";
const $3b68fde39986d91c$var$RE_PLUS = /\+/g;
const $3b68fde39986d91c$var$HEX = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
];
function $3b68fde39986d91c$var$Decoder() {
    this.buffer = undefined;
}
$3b68fde39986d91c$var$Decoder.prototype.write = function(str) {
    // Replace '+' with ' ' before decoding
    str = str.replace($3b68fde39986d91c$var$RE_PLUS, " ");
    let res = "";
    let i = 0;
    let p = 0;
    const len = str.length;
    for(; i < len; ++i){
        if (this.buffer !== undefined) {
            if (!$3b68fde39986d91c$var$HEX[str.charCodeAt(i)]) {
                res += "%" + this.buffer;
                this.buffer = undefined;
                --i // retry character
                ;
            } else {
                this.buffer += str[i];
                ++p;
                if (this.buffer.length === 2) {
                    res += String.fromCharCode(parseInt(this.buffer, 16));
                    this.buffer = undefined;
                }
            }
        } else if (str[i] === "%") {
            if (i > p) {
                res += str.substring(p, i);
                p = i;
            }
            this.buffer = "";
            ++p;
        }
    }
    if (p < len && this.buffer === undefined) res += str.substring(p);
    return res;
};
$3b68fde39986d91c$var$Decoder.prototype.reset = function() {
    this.buffer = undefined;
};
module.exports = $3b68fde39986d91c$var$Decoder;

});



parcelRegister("f1lDT", function(module, exports) {
"use strict";

var $leEOP = parcelRequire("leEOP");
var $aef7bcbe98635c23$require$redirectStatusSet = $leEOP.redirectStatusSet;
var $aef7bcbe98635c23$require$referrerPolicyTokens = $leEOP.referrerPolicySet;
var $aef7bcbe98635c23$require$badPortsSet = $leEOP.badPortsSet;

var $kQbLp = parcelRequire("kQbLp");
var $aef7bcbe98635c23$require$getGlobalOrigin = $kQbLp.getGlobalOrigin;

var $aef7bcbe98635c23$require$performance = $3B1P3$perf_hooks.performance;

var $3zyxC = parcelRequire("3zyxC");
var $aef7bcbe98635c23$require$isBlobLike = $3zyxC.isBlobLike;
var $aef7bcbe98635c23$require$toUSVString = $3zyxC.toUSVString;
var $aef7bcbe98635c23$require$ReadableStreamFrom = $3zyxC.ReadableStreamFrom;


var $aef7bcbe98635c23$require$isUint8Array = $3B1P3$utiltypes.isUint8Array;
let $aef7bcbe98635c23$var$supportedHashes = [];
// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
/** @type {import('crypto')|undefined} */ let $aef7bcbe98635c23$var$crypto;

try {
    $aef7bcbe98635c23$var$crypto = $aef7bcbe98635c23$import$4e46f0aad582585a;
    const possibleRelevantHashes = [
        "sha256",
        "sha384",
        "sha512"
    ];
    $aef7bcbe98635c23$var$supportedHashes = $aef7bcbe98635c23$var$crypto.getHashes().filter((hash)=>possibleRelevantHashes.includes(hash));
/* c8 ignore next 3 */ } catch  {}
function $aef7bcbe98635c23$var$responseURL(response) {
    // https://fetch.spec.whatwg.org/#responses
    // A response has an associated URL. It is a pointer to the last URL
    // in response’s URL list and null if response’s URL list is empty.
    const urlList = response.urlList;
    const length = urlList.length;
    return length === 0 ? null : urlList[length - 1].toString();
}
// https://fetch.spec.whatwg.org/#concept-response-location-url
function $aef7bcbe98635c23$var$responseLocationURL(response, requestFragment) {
    // 1. If response’s status is not a redirect status, then return null.
    if (!$aef7bcbe98635c23$require$redirectStatusSet.has(response.status)) return null;
    // 2. Let location be the result of extracting header list values given
    // `Location` and response’s header list.
    let location = response.headersList.get("location");
    // 3. If location is a header value, then set location to the result of
    //    parsing location with response’s URL.
    if (location !== null && $aef7bcbe98635c23$var$isValidHeaderValue(location)) location = new URL(location, $aef7bcbe98635c23$var$responseURL(response));
    // 4. If location is a URL whose fragment is null, then set location’s
    // fragment to requestFragment.
    if (location && !location.hash) location.hash = requestFragment;
    // 5. Return location.
    return location;
}
/** @returns {URL} */ function $aef7bcbe98635c23$var$requestCurrentURL(request) {
    return request.urlList[request.urlList.length - 1];
}
function $aef7bcbe98635c23$var$requestBadPort(request) {
    // 1. Let url be request’s current URL.
    const url = $aef7bcbe98635c23$var$requestCurrentURL(request);
    // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
    // then return blocked.
    if ($aef7bcbe98635c23$var$urlIsHttpHttpsScheme(url) && $aef7bcbe98635c23$require$badPortsSet.has(url.port)) return "blocked";
    // 3. Return allowed.
    return "allowed";
}
function $aef7bcbe98635c23$var$isErrorLike(object) {
    var _object_constructor, _object_constructor1;
    return object instanceof Error || (object === null || object === void 0 ? void 0 : (_object_constructor = object.constructor) === null || _object_constructor === void 0 ? void 0 : _object_constructor.name) === "Error" || (object === null || object === void 0 ? void 0 : (_object_constructor1 = object.constructor) === null || _object_constructor1 === void 0 ? void 0 : _object_constructor1.name) === "DOMException";
}
// Check whether |statusText| is a ByteString and
// matches the Reason-Phrase token production.
// RFC 2616: https://tools.ietf.org/html/rfc2616
// RFC 7230: https://tools.ietf.org/html/rfc7230
// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
function $aef7bcbe98635c23$var$isValidReasonPhrase(statusText) {
    for(let i = 0; i < statusText.length; ++i){
        const c = statusText.charCodeAt(i);
        if (!(c === 0x09 || // HTAB
        c >= 0x20 && c <= 0x7e || // SP / VCHAR
        c >= 0x80 && c <= 0xff // obs-text
        )) return false;
    }
    return true;
}
/**
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 * @param {number} c
 */ function $aef7bcbe98635c23$var$isTokenCharCode(c) {
    switch(c){
        case 0x22:
        case 0x28:
        case 0x29:
        case 0x2c:
        case 0x2f:
        case 0x3a:
        case 0x3b:
        case 0x3c:
        case 0x3d:
        case 0x3e:
        case 0x3f:
        case 0x40:
        case 0x5b:
        case 0x5c:
        case 0x5d:
        case 0x7b:
        case 0x7d:
            // DQUOTE and "(),/:;<=>?@[\]{}"
            return false;
        default:
            // VCHAR %x21-7E
            return c >= 0x21 && c <= 0x7e;
    }
}
/**
 * @param {string} characters
 */ function $aef7bcbe98635c23$var$isValidHTTPToken(characters) {
    if (characters.length === 0) return false;
    for(let i = 0; i < characters.length; ++i){
        if (!$aef7bcbe98635c23$var$isTokenCharCode(characters.charCodeAt(i))) return false;
    }
    return true;
}
/**
 * @see https://fetch.spec.whatwg.org/#header-name
 * @param {string} potentialValue
 */ function $aef7bcbe98635c23$var$isValidHeaderName(potentialValue) {
    return $aef7bcbe98635c23$var$isValidHTTPToken(potentialValue);
}
/**
 * @see https://fetch.spec.whatwg.org/#header-value
 * @param {string} potentialValue
 */ function $aef7bcbe98635c23$var$isValidHeaderValue(potentialValue) {
    // - Has no leading or trailing HTTP tab or space bytes.
    // - Contains no 0x00 (NUL) or HTTP newline bytes.
    if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) return false;
    if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) return false;
    return true;
}
// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
function $aef7bcbe98635c23$var$setRequestReferrerPolicyOnRedirect(request, actualResponse) {
    //  Given a request request and a response actualResponse, this algorithm
    //  updates request’s referrer policy according to the Referrer-Policy
    //  header (if any) in actualResponse.
    // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
    // from a Referrer-Policy header on actualResponse.
    // 8.1 Parse a referrer policy from a Referrer-Policy header
    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
    const { headersList: headersList } = actualResponse;
    var _headersList_get;
    // 2. Let policy be the empty string.
    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
    // 4. Return policy.
    const policyHeader = ((_headersList_get = headersList.get("referrer-policy")) !== null && _headersList_get !== void 0 ? _headersList_get : "").split(",");
    // Note: As the referrer-policy can contain multiple policies
    // separated by comma, we need to loop through all of them
    // and pick the first valid one.
    // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
    let policy = "";
    if (policyHeader.length > 0) // The right-most policy takes precedence.
    // The left-most policy is the fallback.
    for(let i = policyHeader.length; i !== 0; i--){
        const token = policyHeader[i - 1].trim();
        if ($aef7bcbe98635c23$require$referrerPolicyTokens.has(token)) {
            policy = token;
            break;
        }
    }
    // 2. If policy is not the empty string, then set request’s referrer policy to policy.
    if (policy !== "") request.referrerPolicy = policy;
}
// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
function $aef7bcbe98635c23$var$crossOriginResourcePolicyCheck() {
    // TODO
    return "allowed";
}
// https://fetch.spec.whatwg.org/#concept-cors-check
function $aef7bcbe98635c23$var$corsCheck() {
    // TODO
    return "success";
}
// https://fetch.spec.whatwg.org/#concept-tao-check
function $aef7bcbe98635c23$var$TAOCheck() {
    // TODO
    return "success";
}
function $aef7bcbe98635c23$var$appendFetchMetadata(httpRequest) {
    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
    //  TODO
    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header
    //  1. Assert: r’s url is a potentially trustworthy URL.
    //  TODO
    //  2. Let header be a Structured Header whose value is a token.
    let header = null;
    //  3. Set header’s value to r’s mode.
    header = httpRequest.mode;
    //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
    httpRequest.headersList.set("sec-fetch-mode", header);
//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
//  TODO
//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
//  TODO
}
// https://fetch.spec.whatwg.org/#append-a-request-origin-header
function $aef7bcbe98635c23$var$appendRequestOriginHeader(request) {
    // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
    let serializedOrigin = request.origin;
    // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
    if (request.responseTainting === "cors" || request.mode === "websocket") {
        if (serializedOrigin) request.headersList.append("origin", serializedOrigin);
    } else if (request.method !== "GET" && request.method !== "HEAD") {
        // 1. Switch on request’s referrer policy:
        switch(request.referrerPolicy){
            case "no-referrer":
                // Set serializedOrigin to `null`.
                serializedOrigin = null;
                break;
            case "no-referrer-when-downgrade":
            case "strict-origin":
            case "strict-origin-when-cross-origin":
                // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
                if (request.origin && $aef7bcbe98635c23$var$urlHasHttpsScheme(request.origin) && !$aef7bcbe98635c23$var$urlHasHttpsScheme($aef7bcbe98635c23$var$requestCurrentURL(request))) serializedOrigin = null;
                break;
            case "same-origin":
                // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
                if (!$aef7bcbe98635c23$var$sameOrigin(request, $aef7bcbe98635c23$var$requestCurrentURL(request))) serializedOrigin = null;
                break;
            default:
        }
        if (serializedOrigin) // 2. Append (`Origin`, serializedOrigin) to request’s header list.
        request.headersList.append("origin", serializedOrigin);
    }
}
function $aef7bcbe98635c23$var$coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
    // TODO
    return $aef7bcbe98635c23$require$performance.now();
}
// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
function $aef7bcbe98635c23$var$createOpaqueTimingInfo(timingInfo) {
    var _timingInfo_startTime, _timingInfo_startTime1;
    return {
        startTime: (_timingInfo_startTime = timingInfo.startTime) !== null && _timingInfo_startTime !== void 0 ? _timingInfo_startTime : 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: (_timingInfo_startTime1 = timingInfo.startTime) !== null && _timingInfo_startTime1 !== void 0 ? _timingInfo_startTime1 : 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
    };
}
// https://html.spec.whatwg.org/multipage/origin.html#policy-container
function $aef7bcbe98635c23$var$makePolicyContainer() {
    // Note: the fetch spec doesn't make use of embedder policy or CSP list
    return {
        referrerPolicy: "strict-origin-when-cross-origin"
    };
}
// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
function $aef7bcbe98635c23$var$clonePolicyContainer(policyContainer) {
    return {
        referrerPolicy: policyContainer.referrerPolicy
    };
}
// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
function $aef7bcbe98635c23$var$determineRequestsReferrer(request) {
    // 1. Let policy be request's referrer policy.
    const policy = request.referrerPolicy;
    // Note: policy cannot (shouldn't) be null or an empty string.
    $3B1P3$assert(policy);
    // 2. Let environment be request’s client.
    let referrerSource = null;
    // 3. Switch on request’s referrer:
    if (request.referrer === "client") {
        // Note: node isn't a browser and doesn't implement document/iframes,
        // so we bypass this step and replace it with our own.
        const globalOrigin = $aef7bcbe98635c23$require$getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") return "no-referrer";
        // note: we need to clone it as it's mutated
        referrerSource = new URL(globalOrigin);
    } else if (request.referrer instanceof URL) // Let referrerSource be request’s referrer.
    referrerSource = request.referrer;
    // 4. Let request’s referrerURL be the result of stripping referrerSource for
    //    use as a referrer.
    let referrerURL = $aef7bcbe98635c23$var$stripURLForReferrer(referrerSource);
    // 5. Let referrerOrigin be the result of stripping referrerSource for use as
    //    a referrer, with the origin-only flag set to true.
    const referrerOrigin = $aef7bcbe98635c23$var$stripURLForReferrer(referrerSource, true);
    // 6. If the result of serializing referrerURL is a string whose length is
    //    greater than 4096, set referrerURL to referrerOrigin.
    if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
    const areSameOrigin = $aef7bcbe98635c23$var$sameOrigin(request, referrerURL);
    const isNonPotentiallyTrustWorthy = $aef7bcbe98635c23$var$isURLPotentiallyTrustworthy(referrerURL) && !$aef7bcbe98635c23$var$isURLPotentiallyTrustworthy(request.url);
    // 8. Execute the switch statements corresponding to the value of policy:
    switch(policy){
        case "origin":
            return referrerOrigin != null ? referrerOrigin : $aef7bcbe98635c23$var$stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
            return referrerURL;
        case "same-origin":
            return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
            return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin":
            {
                const currentURL = $aef7bcbe98635c23$var$requestCurrentURL(request);
                // 1. If the origin of referrerURL and the origin of request’s current
                //    URL are the same, then return referrerURL.
                if ($aef7bcbe98635c23$var$sameOrigin(referrerURL, currentURL)) return referrerURL;
                // 2. If referrerURL is a potentially trustworthy URL and request’s
                //    current URL is not a potentially trustworthy URL, then return no
                //    referrer.
                if ($aef7bcbe98635c23$var$isURLPotentiallyTrustworthy(referrerURL) && !$aef7bcbe98635c23$var$isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
                // 3. Return referrerOrigin.
                return referrerOrigin;
            }
        case "strict-origin":
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */ case "no-referrer-when-downgrade":
        /**
       * 1. If referrerURL is a potentially trustworthy URL and
       * request’s current URL is not a potentially trustworthy URL,
       * then return no referrer.
       * 2. Return referrerOrigin
      */ default:
            return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
    }
}
/**
 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
 * @param {URL} url
 * @param {boolean|undefined} originOnly
 */ function $aef7bcbe98635c23$var$stripURLForReferrer(url, originOnly) {
    // 1. Assert: url is a URL.
    $3B1P3$assert(url instanceof URL);
    // 2. If url’s scheme is a local scheme, then return no referrer.
    if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") return "no-referrer";
    // 3. Set url’s username to the empty string.
    url.username = "";
    // 4. Set url’s password to the empty string.
    url.password = "";
    // 5. Set url’s fragment to null.
    url.hash = "";
    // 6. If the origin-only flag is true, then:
    if (originOnly) {
        // 1. Set url’s path to « the empty string ».
        url.pathname = "";
        // 2. Set url’s query to null.
        url.search = "";
    }
    // 7. Return url.
    return url;
}
function $aef7bcbe98635c23$var$isURLPotentiallyTrustworthy(url) {
    if (!(url instanceof URL)) return false;
    // If child of about, return true
    if (url.href === "about:blank" || url.href === "about:srcdoc") return true;
    // If scheme is data, return true
    if (url.protocol === "data:") return true;
    // If file, return true
    if (url.protocol === "file:") return true;
    return isOriginPotentiallyTrustworthy(url.origin);
    function isOriginPotentiallyTrustworthy(origin) {
        // If origin is explicitly null, return false
        if (origin == null || origin === "null") return false;
        const originAsURL = new URL(origin);
        // If secure, return true
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") return true;
        // If localhost or variants, return true
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.") || originAsURL.hostname.endsWith(".localhost")) return true;
        // If any other, return false
        return false;
    }
}
/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
 * @param {Uint8Array} bytes
 * @param {string} metadataList
 */ function $aef7bcbe98635c23$var$bytesMatch(bytes, metadataList) {
    // If node is not built with OpenSSL support, we cannot check
    // a request's integrity, so allow it by default (the spec will
    // allow requests if an invalid hash is given, as precedence).
    /* istanbul ignore if: only if node is built with --without-ssl */ if ($aef7bcbe98635c23$var$crypto === undefined) return true;
    // 1. Let parsedMetadata be the result of parsing metadataList.
    const parsedMetadata = $aef7bcbe98635c23$var$parseMetadata(metadataList);
    // 2. If parsedMetadata is no metadata, return true.
    if (parsedMetadata === "no metadata") return true;
    // 3. If response is not eligible for integrity validation, return false.
    // TODO
    // 4. If parsedMetadata is the empty set, return true.
    if (parsedMetadata.length === 0) return true;
    // 5. Let metadata be the result of getting the strongest
    //    metadata from parsedMetadata.
    const strongest = $aef7bcbe98635c23$var$getStrongestMetadata(parsedMetadata);
    const metadata = $aef7bcbe98635c23$var$filterMetadataListByAlgorithm(parsedMetadata, strongest);
    // 6. For each item in metadata:
    for (const item of metadata){
        // 1. Let algorithm be the alg component of item.
        const algorithm = item.algo;
        // 2. Let expectedValue be the val component of item.
        const expectedValue = item.hash;
        // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
        // "be liberal with padding". This is annoying, and it's not even in the spec.
        // 3. Let actualValue be the result of applying algorithm to bytes.
        let actualValue = $aef7bcbe98635c23$var$crypto.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue[actualValue.length - 1] === "=") {
            if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
            else actualValue = actualValue.slice(0, -1);
        }
        // 4. If actualValue is a case-sensitive match for expectedValue,
        //    return true.
        if ($aef7bcbe98635c23$var$compareBase64Mixed(actualValue, expectedValue)) return true;
    }
    // 7. Return false.
    return false;
}
// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
// https://www.w3.org/TR/CSP2/#source-list-syntax
// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
const $aef7bcbe98635c23$var$parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
 * @param {string} metadata
 */ function $aef7bcbe98635c23$var$parseMetadata(metadata) {
    // 1. Let result be the empty set.
    /** @type {{ algo: string, hash: string }[]} */ const result = [];
    // 2. Let empty be equal to true.
    let empty = true;
    // 3. For each token returned by splitting metadata on spaces:
    for (const token of metadata.split(" ")){
        // 1. Set empty to false.
        empty = false;
        // 2. Parse token as a hash-with-options.
        const parsedToken = $aef7bcbe98635c23$var$parseHashWithOptions.exec(token);
        // 3. If token does not parse, continue to the next token.
        if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) continue;
        // 4. Let algorithm be the hash-algo component of token.
        const algorithm = parsedToken.groups.algo.toLowerCase();
        // 5. If algorithm is a hash function recognized by the user
        //    agent, add the parsed token to result.
        if ($aef7bcbe98635c23$var$supportedHashes.includes(algorithm)) result.push(parsedToken.groups);
    }
    // 4. Return no metadata if empty is true, otherwise return result.
    if (empty === true) return "no metadata";
    return result;
}
/**
 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
 */ function $aef7bcbe98635c23$var$getStrongestMetadata(metadataList) {
    // Let algorithm be the algo component of the first item in metadataList.
    // Can be sha256
    let algorithm = metadataList[0].algo;
    // If the algorithm is sha512, then it is the strongest
    // and we can return immediately
    if (algorithm[3] === "5") return algorithm;
    for(let i = 1; i < metadataList.length; ++i){
        const metadata = metadataList[i];
        // If the algorithm is sha512, then it is the strongest
        // and we can break the loop immediately
        if (metadata.algo[3] === "5") {
            algorithm = "sha512";
            break;
        // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
        } else if (algorithm[3] === "3") continue;
        else if (metadata.algo[3] === "3") algorithm = "sha384";
    }
    return algorithm;
}
function $aef7bcbe98635c23$var$filterMetadataListByAlgorithm(metadataList, algorithm) {
    if (metadataList.length === 1) return metadataList;
    let pos = 0;
    for(let i = 0; i < metadataList.length; ++i)if (metadataList[i].algo === algorithm) metadataList[pos++] = metadataList[i];
    metadataList.length = pos;
    return metadataList;
}
/**
 * Compares two base64 strings, allowing for base64url
 * in the second string.
 *
* @param {string} actualValue always base64
 * @param {string} expectedValue base64 or base64url
 * @returns {boolean}
 */ function $aef7bcbe98635c23$var$compareBase64Mixed(actualValue, expectedValue) {
    if (actualValue.length !== expectedValue.length) return false;
    for(let i = 0; i < actualValue.length; ++i)if (actualValue[i] !== expectedValue[i]) {
        if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") continue;
        return false;
    }
    return true;
}
// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
function $aef7bcbe98635c23$var$tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
// TODO
}
/**
 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
 * @param {URL} A
 * @param {URL} B
 */ function $aef7bcbe98635c23$var$sameOrigin(A, B) {
    // 1. If A and B are the same opaque origin, then return true.
    if (A.origin === B.origin && A.origin === "null") return true;
    // 2. If A and B are both tuple origins and their schemes,
    //    hosts, and port are identical, then return true.
    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) return true;
    // 3. Return false.
    return false;
}
function $aef7bcbe98635c23$var$createDeferredPromise() {
    let res;
    let rej;
    const promise = new Promise((resolve, reject)=>{
        res = resolve;
        rej = reject;
    });
    return {
        promise: promise,
        resolve: res,
        reject: rej
    };
}
function $aef7bcbe98635c23$var$isAborted(fetchParams) {
    return fetchParams.controller.state === "aborted";
}
function $aef7bcbe98635c23$var$isCancelled(fetchParams) {
    return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
}
const $aef7bcbe98635c23$var$normalizeMethodRecord = {
    delete: "DELETE",
    DELETE: "DELETE",
    get: "GET",
    GET: "GET",
    head: "HEAD",
    HEAD: "HEAD",
    options: "OPTIONS",
    OPTIONS: "OPTIONS",
    post: "POST",
    POST: "POST",
    put: "PUT",
    PUT: "PUT"
};
// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf($aef7bcbe98635c23$var$normalizeMethodRecord, null);
/**
 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
 * @param {string} method
 */ function $aef7bcbe98635c23$var$normalizeMethod(method) {
    var _normalizeMethodRecord_method_toLowerCase;
    return (_normalizeMethodRecord_method_toLowerCase = $aef7bcbe98635c23$var$normalizeMethodRecord[method.toLowerCase()]) !== null && _normalizeMethodRecord_method_toLowerCase !== void 0 ? _normalizeMethodRecord_method_toLowerCase : method;
}
// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
function $aef7bcbe98635c23$var$serializeJavascriptValueToJSONString(value) {
    // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
    const result = JSON.stringify(value);
    // 2. If result is undefined, then throw a TypeError.
    if (result === undefined) throw new TypeError("Value is not JSON serializable");
    // 3. Assert: result is a string.
    $3B1P3$assert(typeof result === "string");
    // 4. Return result.
    return result;
}
// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
const $aef7bcbe98635c23$var$esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
/**
 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
 * @param {() => unknown[]} iterator
 * @param {string} name name of the instance
 * @param {'key'|'value'|'key+value'} kind
 */ function $aef7bcbe98635c23$var$makeIterator(iterator, name, kind) {
    const object = {
        index: 0,
        kind: kind,
        target: iterator
    };
    const i = {
        next () {
            // 1. Let interface be the interface for which the iterator prototype object exists.
            // 2. Let thisValue be the this value.
            // 3. Let object be ? ToObject(thisValue).
            // 4. If object is a platform object, then perform a security
            //    check, passing:
            // 5. If object is not a default iterator object for interface,
            //    then throw a TypeError.
            if (Object.getPrototypeOf(this) !== i) throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
            // 6. Let index be object’s index.
            // 7. Let kind be object’s kind.
            // 8. Let values be object’s target's value pairs to iterate over.
            const { index: index, kind: kind, target: target } = object;
            const values = target();
            // 9. Let len be the length of values.
            const len = values.length;
            // 10. If index is greater than or equal to len, then return
            //     CreateIterResultObject(undefined, true).
            if (index >= len) return {
                value: undefined,
                done: true
            };
            // 11. Let pair be the entry in values at index index.
            const pair = values[index];
            // 12. Set object’s index to index + 1.
            object.index = index + 1;
            // 13. Return the iterator result for pair and kind.
            return $aef7bcbe98635c23$var$iteratorResult(pair, kind);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
    };
    // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
    Object.setPrototypeOf(i, $aef7bcbe98635c23$var$esIteratorPrototype);
    // esIteratorPrototype needs to be the prototype of i
    // which is the prototype of an empty object. Yes, it's confusing.
    return Object.setPrototypeOf({}, i);
}
// https://webidl.spec.whatwg.org/#iterator-result
function $aef7bcbe98635c23$var$iteratorResult(pair, kind) {
    let result;
    // 1. Let result be a value determined by the value of kind:
    switch(kind){
        case "key":
            // 1. Let idlKey be pair’s key.
            // 2. Let key be the result of converting idlKey to an
            //    ECMAScript value.
            // 3. result is key.
            result = pair[0];
            break;
        case "value":
            // 1. Let idlValue be pair’s value.
            // 2. Let value be the result of converting idlValue to
            //    an ECMAScript value.
            // 3. result is value.
            result = pair[1];
            break;
        case "key+value":
            // 1. Let idlKey be pair’s key.
            // 2. Let idlValue be pair’s value.
            // 3. Let key be the result of converting idlKey to an
            //    ECMAScript value.
            // 4. Let value be the result of converting idlValue to
            //    an ECMAScript value.
            // 5. Let array be ! ArrayCreate(2).
            // 6. Call ! CreateDataProperty(array, "0", key).
            // 7. Call ! CreateDataProperty(array, "1", value).
            // 8. result is array.
            result = pair;
            break;
    }
    // 2. Return CreateIterResultObject(result, false).
    return {
        value: result,
        done: false
    };
}
/**
 * @see https://fetch.spec.whatwg.org/#body-fully-read
 */ async function $aef7bcbe98635c23$var$fullyReadBody(body, processBody, processBodyError) {
    // 1. If taskDestination is null, then set taskDestination to
    //    the result of starting a new parallel queue.
    // 2. Let successSteps given a byte sequence bytes be to queue a
    //    fetch task to run processBody given bytes, with taskDestination.
    const successSteps = processBody;
    // 3. Let errorSteps be to queue a fetch task to run processBodyError,
    //    with taskDestination.
    const errorSteps = processBodyError;
    // 4. Let reader be the result of getting a reader for body’s stream.
    //    If that threw an exception, then run errorSteps with that
    //    exception and return.
    let reader;
    try {
        reader = body.stream.getReader();
    } catch (e) {
        errorSteps(e);
        return;
    }
    // 5. Read all bytes from reader, given successSteps and errorSteps.
    try {
        const result = await $aef7bcbe98635c23$var$readAllBytes(reader);
        successSteps(result);
    } catch (e) {
        errorSteps(e);
    }
}
/** @type {ReadableStream} */ let $aef7bcbe98635c23$var$ReadableStream = globalThis.ReadableStream;

function $aef7bcbe98635c23$var$isReadableStreamLike(stream) {
    if (!$aef7bcbe98635c23$var$ReadableStream) $aef7bcbe98635c23$var$ReadableStream = $3B1P3$streamweb.ReadableStream;
    return stream instanceof $aef7bcbe98635c23$var$ReadableStream || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
}
const $aef7bcbe98635c23$var$MAXIMUM_ARGUMENT_LENGTH = 65535;
/**
 * @see https://infra.spec.whatwg.org/#isomorphic-decode
 * @param {number[]|Uint8Array} input
 */ function $aef7bcbe98635c23$var$isomorphicDecode(input) {
    // 1. To isomorphic decode a byte sequence input, return a string whose code point
    //    length is equal to input’s length and whose code points have the same values
    //    as the values of input’s bytes, in the same order.
    if (input.length < $aef7bcbe98635c23$var$MAXIMUM_ARGUMENT_LENGTH) return String.fromCharCode(...input);
    return input.reduce((previous, current)=>previous + String.fromCharCode(current), "");
}
/**
 * @param {ReadableStreamController<Uint8Array>} controller
 */ function $aef7bcbe98635c23$var$readableStreamClose(controller) {
    try {
        controller.close();
    } catch (err) {
        // TODO: add comment explaining why this error occurs.
        if (!err.message.includes("Controller is already closed")) throw err;
    }
}
/**
 * @see https://infra.spec.whatwg.org/#isomorphic-encode
 * @param {string} input
 */ function $aef7bcbe98635c23$var$isomorphicEncode(input) {
    // 1. Assert: input contains no code points greater than U+00FF.
    for(let i = 0; i < input.length; i++)$3B1P3$assert(input.charCodeAt(i) <= 0xFF);
    // 2. Return a byte sequence whose length is equal to input’s code
    //    point length and whose bytes have the same values as the
    //    values of input’s code points, in the same order
    return input;
}
/**
 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
 * @see https://streams.spec.whatwg.org/#read-loop
 * @param {ReadableStreamDefaultReader} reader
 */ async function $aef7bcbe98635c23$var$readAllBytes(reader) {
    const bytes = [];
    let byteLength = 0;
    while(true){
        const { done: done, value: chunk } = await reader.read();
        if (done) // 1. Call successSteps with bytes.
        return Buffer.concat(bytes, byteLength);
        // 1. If chunk is not a Uint8Array object, call failureSteps
        //    with a TypeError and abort these steps.
        if (!$aef7bcbe98635c23$require$isUint8Array(chunk)) throw new TypeError("Received non-Uint8Array chunk");
        // 2. Append the bytes represented by chunk to bytes.
        bytes.push(chunk);
        byteLength += chunk.length;
    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
    }
}
/**
 * @see https://fetch.spec.whatwg.org/#is-local
 * @param {URL} url
 */ function $aef7bcbe98635c23$var$urlIsLocal(url) {
    $3B1P3$assert("protocol" in url) // ensure it's a url object
    ;
    const protocol = url.protocol;
    return protocol === "about:" || protocol === "blob:" || protocol === "data:";
}
/**
 * @param {string|URL} url
 */ function $aef7bcbe98635c23$var$urlHasHttpsScheme(url) {
    if (typeof url === "string") return url.startsWith("https:");
    return url.protocol === "https:";
}
/**
 * @see https://fetch.spec.whatwg.org/#http-scheme
 * @param {URL} url
 */ function $aef7bcbe98635c23$var$urlIsHttpHttpsScheme(url) {
    $3B1P3$assert("protocol" in url) // ensure it's a url object
    ;
    const protocol = url.protocol;
    return protocol === "http:" || protocol === "https:";
}
/**
 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
 */ const $aef7bcbe98635c23$var$hasOwn = Object.hasOwn || ((dict, key)=>Object.prototype.hasOwnProperty.call(dict, key));
module.exports = {
    isAborted: $aef7bcbe98635c23$var$isAborted,
    isCancelled: $aef7bcbe98635c23$var$isCancelled,
    createDeferredPromise: $aef7bcbe98635c23$var$createDeferredPromise,
    ReadableStreamFrom: $aef7bcbe98635c23$require$ReadableStreamFrom,
    toUSVString: $aef7bcbe98635c23$require$toUSVString,
    tryUpgradeRequestToAPotentiallyTrustworthyURL: $aef7bcbe98635c23$var$tryUpgradeRequestToAPotentiallyTrustworthyURL,
    coarsenedSharedCurrentTime: $aef7bcbe98635c23$var$coarsenedSharedCurrentTime,
    determineRequestsReferrer: $aef7bcbe98635c23$var$determineRequestsReferrer,
    makePolicyContainer: $aef7bcbe98635c23$var$makePolicyContainer,
    clonePolicyContainer: $aef7bcbe98635c23$var$clonePolicyContainer,
    appendFetchMetadata: $aef7bcbe98635c23$var$appendFetchMetadata,
    appendRequestOriginHeader: $aef7bcbe98635c23$var$appendRequestOriginHeader,
    TAOCheck: $aef7bcbe98635c23$var$TAOCheck,
    corsCheck: $aef7bcbe98635c23$var$corsCheck,
    crossOriginResourcePolicyCheck: $aef7bcbe98635c23$var$crossOriginResourcePolicyCheck,
    createOpaqueTimingInfo: $aef7bcbe98635c23$var$createOpaqueTimingInfo,
    setRequestReferrerPolicyOnRedirect: $aef7bcbe98635c23$var$setRequestReferrerPolicyOnRedirect,
    isValidHTTPToken: $aef7bcbe98635c23$var$isValidHTTPToken,
    requestBadPort: $aef7bcbe98635c23$var$requestBadPort,
    requestCurrentURL: $aef7bcbe98635c23$var$requestCurrentURL,
    responseURL: $aef7bcbe98635c23$var$responseURL,
    responseLocationURL: $aef7bcbe98635c23$var$responseLocationURL,
    isBlobLike: $aef7bcbe98635c23$require$isBlobLike,
    isURLPotentiallyTrustworthy: $aef7bcbe98635c23$var$isURLPotentiallyTrustworthy,
    isValidReasonPhrase: $aef7bcbe98635c23$var$isValidReasonPhrase,
    sameOrigin: $aef7bcbe98635c23$var$sameOrigin,
    normalizeMethod: $aef7bcbe98635c23$var$normalizeMethod,
    serializeJavascriptValueToJSONString: $aef7bcbe98635c23$var$serializeJavascriptValueToJSONString,
    makeIterator: $aef7bcbe98635c23$var$makeIterator,
    isValidHeaderName: $aef7bcbe98635c23$var$isValidHeaderName,
    isValidHeaderValue: $aef7bcbe98635c23$var$isValidHeaderValue,
    hasOwn: $aef7bcbe98635c23$var$hasOwn,
    isErrorLike: $aef7bcbe98635c23$var$isErrorLike,
    fullyReadBody: $aef7bcbe98635c23$var$fullyReadBody,
    bytesMatch: $aef7bcbe98635c23$var$bytesMatch,
    isReadableStreamLike: $aef7bcbe98635c23$var$isReadableStreamLike,
    readableStreamClose: $aef7bcbe98635c23$var$readableStreamClose,
    isomorphicEncode: $aef7bcbe98635c23$var$isomorphicEncode,
    isomorphicDecode: $aef7bcbe98635c23$var$isomorphicDecode,
    urlIsLocal: $aef7bcbe98635c23$var$urlIsLocal,
    urlHasHttpsScheme: $aef7bcbe98635c23$var$urlHasHttpsScheme,
    urlIsHttpHttpsScheme: $aef7bcbe98635c23$var$urlIsHttpHttpsScheme,
    readAllBytes: $aef7bcbe98635c23$var$readAllBytes,
    normalizeMethodRecord: $aef7bcbe98635c23$var$normalizeMethodRecord,
    parseMetadata: $aef7bcbe98635c23$var$parseMetadata
};

});
parcelRegister("leEOP", function(module, exports) {
"use strict";

var $f75a91915e1c4a26$require$MessageChannel = $3B1P3$worker_threads.MessageChannel;
var $f75a91915e1c4a26$require$receiveMessageOnPort = $3B1P3$worker_threads.receiveMessageOnPort;
const $f75a91915e1c4a26$var$corsSafeListedMethods = [
    "GET",
    "HEAD",
    "POST"
];
const $f75a91915e1c4a26$var$corsSafeListedMethodsSet = new Set($f75a91915e1c4a26$var$corsSafeListedMethods);
const $f75a91915e1c4a26$var$nullBodyStatus = [
    101,
    204,
    205,
    304
];
const $f75a91915e1c4a26$var$redirectStatus = [
    301,
    302,
    303,
    307,
    308
];
const $f75a91915e1c4a26$var$redirectStatusSet = new Set($f75a91915e1c4a26$var$redirectStatus);
// https://fetch.spec.whatwg.org/#block-bad-port
const $f75a91915e1c4a26$var$badPorts = [
    "1",
    "7",
    "9",
    "11",
    "13",
    "15",
    "17",
    "19",
    "20",
    "21",
    "22",
    "23",
    "25",
    "37",
    "42",
    "43",
    "53",
    "69",
    "77",
    "79",
    "87",
    "95",
    "101",
    "102",
    "103",
    "104",
    "109",
    "110",
    "111",
    "113",
    "115",
    "117",
    "119",
    "123",
    "135",
    "137",
    "139",
    "143",
    "161",
    "179",
    "389",
    "427",
    "465",
    "512",
    "513",
    "514",
    "515",
    "526",
    "530",
    "531",
    "532",
    "540",
    "548",
    "554",
    "556",
    "563",
    "587",
    "601",
    "636",
    "989",
    "990",
    "993",
    "995",
    "1719",
    "1720",
    "1723",
    "2049",
    "3659",
    "4045",
    "5060",
    "5061",
    "6000",
    "6566",
    "6665",
    "6666",
    "6667",
    "6668",
    "6669",
    "6697",
    "10080"
];
const $f75a91915e1c4a26$var$badPortsSet = new Set($f75a91915e1c4a26$var$badPorts);
// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
const $f75a91915e1c4a26$var$referrerPolicy = [
    "",
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
];
const $f75a91915e1c4a26$var$referrerPolicySet = new Set($f75a91915e1c4a26$var$referrerPolicy);
const $f75a91915e1c4a26$var$requestRedirect = [
    "follow",
    "manual",
    "error"
];
const $f75a91915e1c4a26$var$safeMethods = [
    "GET",
    "HEAD",
    "OPTIONS",
    "TRACE"
];
const $f75a91915e1c4a26$var$safeMethodsSet = new Set($f75a91915e1c4a26$var$safeMethods);
const $f75a91915e1c4a26$var$requestMode = [
    "navigate",
    "same-origin",
    "no-cors",
    "cors"
];
const $f75a91915e1c4a26$var$requestCredentials = [
    "omit",
    "same-origin",
    "include"
];
const $f75a91915e1c4a26$var$requestCache = [
    "default",
    "no-store",
    "reload",
    "no-cache",
    "force-cache",
    "only-if-cached"
];
// https://fetch.spec.whatwg.org/#request-body-header-name
const $f75a91915e1c4a26$var$requestBodyHeader = [
    "content-encoding",
    "content-language",
    "content-location",
    "content-type",
    // See https://github.com/nodejs/undici/issues/2021
    // 'Content-Length' is a forbidden header name, which is typically
    // removed in the Headers implementation. However, undici doesn't
    // filter out headers, so we add it here.
    "content-length"
];
// https://fetch.spec.whatwg.org/#enumdef-requestduplex
const $f75a91915e1c4a26$var$requestDuplex = [
    "half"
];
// http://fetch.spec.whatwg.org/#forbidden-method
const $f75a91915e1c4a26$var$forbiddenMethods = [
    "CONNECT",
    "TRACE",
    "TRACK"
];
const $f75a91915e1c4a26$var$forbiddenMethodsSet = new Set($f75a91915e1c4a26$var$forbiddenMethods);
const $f75a91915e1c4a26$var$subresource = [
    "audio",
    "audioworklet",
    "font",
    "image",
    "manifest",
    "paintworklet",
    "script",
    "style",
    "track",
    "video",
    "xslt",
    ""
];
const $f75a91915e1c4a26$var$subresourceSet = new Set($f75a91915e1c4a26$var$subresource);
var $f75a91915e1c4a26$var$_globalThis_DOMException;
/** @type {globalThis['DOMException']} */ const $f75a91915e1c4a26$var$DOMException = ($f75a91915e1c4a26$var$_globalThis_DOMException = globalThis.DOMException) !== null && $f75a91915e1c4a26$var$_globalThis_DOMException !== void 0 ? $f75a91915e1c4a26$var$_globalThis_DOMException : (()=>{
    // DOMException was only made a global in Node v17.0.0,
    // but fetch supports >= v16.8.
    try {
        atob("~");
    } catch (err) {
        return Object.getPrototypeOf(err).constructor;
    }
})();
let $f75a91915e1c4a26$var$channel;
var $f75a91915e1c4a26$var$_globalThis_structuredClone;
/** @type {globalThis['structuredClone']} */ const $f75a91915e1c4a26$var$structuredClone = ($f75a91915e1c4a26$var$_globalThis_structuredClone = globalThis.structuredClone) !== null && $f75a91915e1c4a26$var$_globalThis_structuredClone !== void 0 ? $f75a91915e1c4a26$var$_globalThis_structuredClone : // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
// structuredClone was added in v17.0.0, but fetch supports v16.8
function structuredClone(value, options) {
    if (arguments.length === 0) throw new TypeError("missing argument");
    if (!$f75a91915e1c4a26$var$channel) $f75a91915e1c4a26$var$channel = new $f75a91915e1c4a26$require$MessageChannel();
    $f75a91915e1c4a26$var$channel.port1.unref();
    $f75a91915e1c4a26$var$channel.port2.unref();
    $f75a91915e1c4a26$var$channel.port1.postMessage(value, options === null || options === void 0 ? void 0 : options.transfer);
    return $f75a91915e1c4a26$require$receiveMessageOnPort($f75a91915e1c4a26$var$channel.port2).message;
};
module.exports = {
    DOMException: $f75a91915e1c4a26$var$DOMException,
    structuredClone: $f75a91915e1c4a26$var$structuredClone,
    subresource: $f75a91915e1c4a26$var$subresource,
    forbiddenMethods: $f75a91915e1c4a26$var$forbiddenMethods,
    requestBodyHeader: $f75a91915e1c4a26$var$requestBodyHeader,
    referrerPolicy: $f75a91915e1c4a26$var$referrerPolicy,
    requestRedirect: $f75a91915e1c4a26$var$requestRedirect,
    requestMode: $f75a91915e1c4a26$var$requestMode,
    requestCredentials: $f75a91915e1c4a26$var$requestCredentials,
    requestCache: $f75a91915e1c4a26$var$requestCache,
    redirectStatus: $f75a91915e1c4a26$var$redirectStatus,
    corsSafeListedMethods: $f75a91915e1c4a26$var$corsSafeListedMethods,
    nullBodyStatus: $f75a91915e1c4a26$var$nullBodyStatus,
    safeMethods: $f75a91915e1c4a26$var$safeMethods,
    badPorts: $f75a91915e1c4a26$var$badPorts,
    requestDuplex: $f75a91915e1c4a26$var$requestDuplex,
    subresourceSet: $f75a91915e1c4a26$var$subresourceSet,
    badPortsSet: $f75a91915e1c4a26$var$badPortsSet,
    redirectStatusSet: $f75a91915e1c4a26$var$redirectStatusSet,
    corsSafeListedMethodsSet: $f75a91915e1c4a26$var$corsSafeListedMethodsSet,
    safeMethodsSet: $f75a91915e1c4a26$var$safeMethodsSet,
    forbiddenMethodsSet: $f75a91915e1c4a26$var$forbiddenMethodsSet,
    referrerPolicySet: $f75a91915e1c4a26$var$referrerPolicySet
};

});

parcelRegister("kQbLp", function(module, exports) {
"use strict";
// In case of breaking changes, increase the version
// number to avoid conflicts.
const $f2c1c9fc794a7c3b$var$globalOrigin = Symbol.for("undici.globalOrigin.1");
function $f2c1c9fc794a7c3b$var$getGlobalOrigin() {
    return globalThis[$f2c1c9fc794a7c3b$var$globalOrigin];
}
function $f2c1c9fc794a7c3b$var$setGlobalOrigin(newOrigin) {
    if (newOrigin === undefined) {
        Object.defineProperty(globalThis, $f2c1c9fc794a7c3b$var$globalOrigin, {
            value: undefined,
            writable: true,
            enumerable: false,
            configurable: false
        });
        return;
    }
    const parsedURL = new URL(newOrigin);
    if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
    Object.defineProperty(globalThis, $f2c1c9fc794a7c3b$var$globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
    });
}
module.exports = {
    getGlobalOrigin: $f2c1c9fc794a7c3b$var$getGlobalOrigin,
    setGlobalOrigin: $f2c1c9fc794a7c3b$var$setGlobalOrigin
};

});


parcelRegister("e2Ka3", function(module, exports) {
"use strict";

var $f1lDT = parcelRequire("f1lDT");
var $a3950f43a83f4036$require$isBlobLike = $f1lDT.isBlobLike;
var $a3950f43a83f4036$require$toUSVString = $f1lDT.toUSVString;
var $a3950f43a83f4036$require$makeIterator = $f1lDT.makeIterator;

var $hxvf1 = parcelRequire("hxvf1");
var $a3950f43a83f4036$require$kState = $hxvf1.kState;

var $gkgHW = parcelRequire("gkgHW");
var $a3950f43a83f4036$require$UndiciFile = $gkgHW.File;
var $a3950f43a83f4036$require$FileLike = $gkgHW.FileLike;
var $a3950f43a83f4036$require$isFileLike = $gkgHW.isFileLike;

var $2BhCx = parcelRequire("2BhCx");
var $a3950f43a83f4036$require$webidl = $2BhCx.webidl;

var $a3950f43a83f4036$require$Blob = $3B1P3$buffer.Blob;
var $a3950f43a83f4036$require$NativeFile = $3B1P3$buffer.File;
/** @type {globalThis['File']} */ const $a3950f43a83f4036$var$File = $a3950f43a83f4036$require$NativeFile !== null && $a3950f43a83f4036$require$NativeFile !== void 0 ? $a3950f43a83f4036$require$NativeFile : $a3950f43a83f4036$require$UndiciFile;
// https://xhr.spec.whatwg.org/#formdata
class $a3950f43a83f4036$var$FormData {
    constructor(form){
        if (form !== undefined) throw $a3950f43a83f4036$require$webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: [
                "undefined"
            ]
        });
        this[$a3950f43a83f4036$require$kState] = [];
    }
    append(name, value, filename) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "FormData.append"
        });
        if (arguments.length === 3 && !$a3950f43a83f4036$require$isBlobLike(value)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
        // 1. Let value be value if given; otherwise blobValue.
        name = $a3950f43a83f4036$require$webidl.converters.USVString(name);
        value = $a3950f43a83f4036$require$isBlobLike(value) ? $a3950f43a83f4036$require$webidl.converters.Blob(value, {
            strict: false
        }) : $a3950f43a83f4036$require$webidl.converters.USVString(value);
        filename = arguments.length === 3 ? $a3950f43a83f4036$require$webidl.converters.USVString(filename) : undefined;
        // 2. Let entry be the result of creating an entry with
        // name, value, and filename if given.
        const entry = $a3950f43a83f4036$var$makeEntry(name, value, filename);
        // 3. Append entry to this’s entry list.
        this[$a3950f43a83f4036$require$kState].push(entry);
    }
    delete(name) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.delete"
        });
        name = $a3950f43a83f4036$require$webidl.converters.USVString(name);
        // The delete(name) method steps are to remove all entries whose name
        // is name from this’s entry list.
        this[$a3950f43a83f4036$require$kState] = this[$a3950f43a83f4036$require$kState].filter((entry)=>entry.name !== name);
    }
    get(name) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.get"
        });
        name = $a3950f43a83f4036$require$webidl.converters.USVString(name);
        // 1. If there is no entry whose name is name in this’s entry list,
        // then return null.
        const idx = this[$a3950f43a83f4036$require$kState].findIndex((entry)=>entry.name === name);
        if (idx === -1) return null;
        // 2. Return the value of the first entry whose name is name from
        // this’s entry list.
        return this[$a3950f43a83f4036$require$kState][idx].value;
    }
    getAll(name) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.getAll"
        });
        name = $a3950f43a83f4036$require$webidl.converters.USVString(name);
        // 1. If there is no entry whose name is name in this’s entry list,
        // then return the empty list.
        // 2. Return the values of all entries whose name is name, in order,
        // from this’s entry list.
        return this[$a3950f43a83f4036$require$kState].filter((entry)=>entry.name === name).map((entry)=>entry.value);
    }
    has(name) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.has"
        });
        name = $a3950f43a83f4036$require$webidl.converters.USVString(name);
        // The has(name) method steps are to return true if there is an entry
        // whose name is name in this’s entry list; otherwise false.
        return this[$a3950f43a83f4036$require$kState].findIndex((entry)=>entry.name === name) !== -1;
    }
    set(name, value, filename) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "FormData.set"
        });
        if (arguments.length === 3 && !$a3950f43a83f4036$require$isBlobLike(value)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
        // The set(name, value) and set(name, blobValue, filename) method steps
        // are:
        // 1. Let value be value if given; otherwise blobValue.
        name = $a3950f43a83f4036$require$webidl.converters.USVString(name);
        value = $a3950f43a83f4036$require$isBlobLike(value) ? $a3950f43a83f4036$require$webidl.converters.Blob(value, {
            strict: false
        }) : $a3950f43a83f4036$require$webidl.converters.USVString(value);
        filename = arguments.length === 3 ? $a3950f43a83f4036$require$toUSVString(filename) : undefined;
        // 2. Let entry be the result of creating an entry with name, value, and
        // filename if given.
        const entry = $a3950f43a83f4036$var$makeEntry(name, value, filename);
        // 3. If there are entries in this’s entry list whose name is name, then
        // replace the first such entry with entry and remove the others.
        const idx = this[$a3950f43a83f4036$require$kState].findIndex((entry)=>entry.name === name);
        if (idx !== -1) this[$a3950f43a83f4036$require$kState] = [
            ...this[$a3950f43a83f4036$require$kState].slice(0, idx),
            entry,
            ...this[$a3950f43a83f4036$require$kState].slice(idx + 1).filter((entry)=>entry.name !== name)
        ];
        else // 4. Otherwise, append entry to this’s entry list.
        this[$a3950f43a83f4036$require$kState].push(entry);
    }
    entries() {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        return $a3950f43a83f4036$require$makeIterator(()=>this[$a3950f43a83f4036$require$kState].map((pair)=>[
                    pair.name,
                    pair.value
                ]), "FormData", "key+value");
    }
    keys() {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        return $a3950f43a83f4036$require$makeIterator(()=>this[$a3950f43a83f4036$require$kState].map((pair)=>[
                    pair.name,
                    pair.value
                ]), "FormData", "key");
    }
    values() {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        return $a3950f43a83f4036$require$makeIterator(()=>this[$a3950f43a83f4036$require$kState].map((pair)=>[
                    pair.name,
                    pair.value
                ]), "FormData", "value");
    }
    /**
   * @param {(value: string, key: string, self: FormData) => void} callbackFn
   * @param {unknown} thisArg
   */ forEach(callbackFn, thisArg = globalThis) {
        $a3950f43a83f4036$require$webidl.brandCheck(this, $a3950f43a83f4036$var$FormData);
        $a3950f43a83f4036$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.forEach"
        });
        if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
        for (const [key, value] of this)callbackFn.apply(thisArg, [
            value,
            key,
            this
        ]);
    }
}
$a3950f43a83f4036$var$FormData.prototype[Symbol.iterator] = $a3950f43a83f4036$var$FormData.prototype.entries;
Object.defineProperties($a3950f43a83f4036$var$FormData.prototype, {
    [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
    }
});
/**
 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
 * @param {string} name
 * @param {string|Blob} value
 * @param {?string} filename
 * @returns
 */ function $a3950f43a83f4036$var$makeEntry(name, value, filename) {
    // 1. Set name to the result of converting name into a scalar value string.
    // "To convert a string into a scalar value string, replace any surrogates
    //  with U+FFFD."
    // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
    name = Buffer.from(name).toString("utf8");
    // 2. If value is a string, then set value to the result of converting
    //    value into a scalar value string.
    if (typeof value === "string") value = Buffer.from(value).toString("utf8");
    else {
        // 3. Otherwise:
        // 1. If value is not a File object, then set value to a new File object,
        //    representing the same bytes, whose name attribute value is "blob"
        if (!$a3950f43a83f4036$require$isFileLike(value)) value = value instanceof $a3950f43a83f4036$require$Blob ? new $a3950f43a83f4036$var$File([
            value
        ], "blob", {
            type: value.type
        }) : new $a3950f43a83f4036$require$FileLike(value, "blob", {
            type: value.type
        });
        // 2. If filename is given, then set value to a new File object,
        //    representing the same bytes, whose name attribute is filename.
        if (filename !== undefined) {
            /** @type {FilePropertyBag} */ const options = {
                type: value.type,
                lastModified: value.lastModified
            };
            value = $a3950f43a83f4036$require$NativeFile && value instanceof $a3950f43a83f4036$require$NativeFile || value instanceof $a3950f43a83f4036$require$UndiciFile ? new $a3950f43a83f4036$var$File([
                value
            ], filename, options) : new $a3950f43a83f4036$require$FileLike(value, filename, options);
        }
    }
    // 4. Return an entry whose name is name and whose value is value.
    return {
        name: name,
        value: value
    };
}
module.exports = {
    FormData: $a3950f43a83f4036$var$FormData
};

});
parcelRegister("hxvf1", function(module, exports) {
"use strict";
module.exports = {
    kUrl: Symbol("url"),
    kHeaders: Symbol("headers"),
    kSignal: Symbol("signal"),
    kState: Symbol("state"),
    kGuard: Symbol("guard"),
    kRealm: Symbol("realm")
};

});

parcelRegister("gkgHW", function(module, exports) {
"use strict";

var $be2b79649536f423$require$Blob = $3B1P3$buffer.Blob;
var $be2b79649536f423$require$NativeFile = $3B1P3$buffer.File;

var $be2b79649536f423$require$types = $3B1P3$util.types;

var $hxvf1 = parcelRequire("hxvf1");
var $be2b79649536f423$require$kState = $hxvf1.kState;

var $f1lDT = parcelRequire("f1lDT");
var $be2b79649536f423$require$isBlobLike = $f1lDT.isBlobLike;

var $2BhCx = parcelRequire("2BhCx");
var $be2b79649536f423$require$webidl = $2BhCx.webidl;

var $dGZhg = parcelRequire("dGZhg");
var $be2b79649536f423$require$parseMIMEType = $dGZhg.parseMIMEType;
var $be2b79649536f423$require$serializeAMimeType = $dGZhg.serializeAMimeType;

var $3zyxC = parcelRequire("3zyxC");
var $be2b79649536f423$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;
const $be2b79649536f423$var$encoder = new TextEncoder();
class $be2b79649536f423$var$File extends $be2b79649536f423$require$Blob {
    constructor(fileBits, fileName, options = {}){
        // The File constructor is invoked with two or three parameters, depending
        // on whether the optional dictionary parameter is used. When the File()
        // constructor is invoked, user agents must run the following steps:
        $be2b79649536f423$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "File constructor"
        });
        fileBits = $be2b79649536f423$require$webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = $be2b79649536f423$require$webidl.converters.USVString(fileName);
        options = $be2b79649536f423$require$webidl.converters.FilePropertyBag(options);
        // 1. Let bytes be the result of processing blob parts given fileBits and
        // options.
        // Note: Blob handles this for us
        // 2. Let n be the fileName argument to the constructor.
        const n = fileName;
        // 3. Process FilePropertyBag dictionary argument by running the following
        // substeps:
        //    1. If the type member is provided and is not the empty string, let t
        //    be set to the type dictionary member. If t contains any characters
        //    outside the range U+0020 to U+007E, then set t to the empty string
        //    and return from these substeps.
        //    2. Convert every character in t to ASCII lowercase.
        let t = options.type;
        let d;
        // eslint-disable-next-line no-labels
        substep: {
            if (t) {
                t = $be2b79649536f423$require$parseMIMEType(t);
                if (t === "failure") {
                    t = "";
                    break substep;
                }
                t = $be2b79649536f423$require$serializeAMimeType(t).toLowerCase();
            }
            //    3. If the lastModified member is provided, let d be set to the
            //    lastModified dictionary member. If it is not provided, set d to the
            //    current date and time represented as the number of milliseconds since
            //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
            d = options.lastModified;
        }
        // 4. Return a new File object F such that:
        // F refers to the bytes byte sequence.
        // F.size is set to the number of total bytes in bytes.
        // F.name is set to n.
        // F.type is set to t.
        // F.lastModified is set to d.
        super($be2b79649536f423$var$processBlobParts(fileBits, options), {
            type: t
        });
        this[$be2b79649536f423$require$kState] = {
            name: n,
            lastModified: d,
            type: t
        };
    }
    get name() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$File);
        return this[$be2b79649536f423$require$kState].name;
    }
    get lastModified() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$File);
        return this[$be2b79649536f423$require$kState].lastModified;
    }
    get type() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$File);
        return this[$be2b79649536f423$require$kState].type;
    }
}
class $be2b79649536f423$var$FileLike {
    constructor(blobLike, fileName, options = {}){
        // TODO: argument idl type check
        // The File constructor is invoked with two or three parameters, depending
        // on whether the optional dictionary parameter is used. When the File()
        // constructor is invoked, user agents must run the following steps:
        // 1. Let bytes be the result of processing blob parts given fileBits and
        // options.
        // 2. Let n be the fileName argument to the constructor.
        const n = fileName;
        // 3. Process FilePropertyBag dictionary argument by running the following
        // substeps:
        //    1. If the type member is provided and is not the empty string, let t
        //    be set to the type dictionary member. If t contains any characters
        //    outside the range U+0020 to U+007E, then set t to the empty string
        //    and return from these substeps.
        //    TODO
        const t = options.type;
        var _options_lastModified;
        //    2. Convert every character in t to ASCII lowercase.
        //    TODO
        //    3. If the lastModified member is provided, let d be set to the
        //    lastModified dictionary member. If it is not provided, set d to the
        //    current date and time represented as the number of milliseconds since
        //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
        const d = (_options_lastModified = options.lastModified) !== null && _options_lastModified !== void 0 ? _options_lastModified : Date.now();
        // 4. Return a new File object F such that:
        // F refers to the bytes byte sequence.
        // F.size is set to the number of total bytes in bytes.
        // F.name is set to n.
        // F.type is set to t.
        // F.lastModified is set to d.
        this[$be2b79649536f423$require$kState] = {
            blobLike: blobLike,
            name: n,
            type: t,
            lastModified: d
        };
    }
    stream(...args) {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].blobLike.stream(...args);
    }
    arrayBuffer(...args) {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].blobLike.arrayBuffer(...args);
    }
    slice(...args) {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].blobLike.slice(...args);
    }
    text(...args) {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].blobLike.text(...args);
    }
    get size() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].blobLike.size;
    }
    get type() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].blobLike.type;
    }
    get name() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].name;
    }
    get lastModified() {
        $be2b79649536f423$require$webidl.brandCheck(this, $be2b79649536f423$var$FileLike);
        return this[$be2b79649536f423$require$kState].lastModified;
    }
    get [Symbol.toStringTag]() {
        return "File";
    }
}
Object.defineProperties($be2b79649536f423$var$File.prototype, {
    [Symbol.toStringTag]: {
        value: "File",
        configurable: true
    },
    name: $be2b79649536f423$require$kEnumerableProperty,
    lastModified: $be2b79649536f423$require$kEnumerableProperty
});
$be2b79649536f423$require$webidl.converters.Blob = $be2b79649536f423$require$webidl.interfaceConverter($be2b79649536f423$require$Blob);
$be2b79649536f423$require$webidl.converters.BlobPart = function(V, opts) {
    if ($be2b79649536f423$require$webidl.util.Type(V) === "Object") {
        if ($be2b79649536f423$require$isBlobLike(V)) return $be2b79649536f423$require$webidl.converters.Blob(V, {
            strict: false
        });
        if (ArrayBuffer.isView(V) || $be2b79649536f423$require$types.isAnyArrayBuffer(V)) return $be2b79649536f423$require$webidl.converters.BufferSource(V, opts);
    }
    return $be2b79649536f423$require$webidl.converters.USVString(V, opts);
};
$be2b79649536f423$require$webidl.converters["sequence<BlobPart>"] = $be2b79649536f423$require$webidl.sequenceConverter($be2b79649536f423$require$webidl.converters.BlobPart);
// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
$be2b79649536f423$require$webidl.converters.FilePropertyBag = $be2b79649536f423$require$webidl.dictionaryConverter([
    {
        key: "lastModified",
        converter: $be2b79649536f423$require$webidl.converters["long long"],
        get defaultValue () {
            return Date.now();
        }
    },
    {
        key: "type",
        converter: $be2b79649536f423$require$webidl.converters.DOMString,
        defaultValue: ""
    },
    {
        key: "endings",
        converter: (value)=>{
            value = $be2b79649536f423$require$webidl.converters.DOMString(value);
            value = value.toLowerCase();
            if (value !== "native") value = "transparent";
            return value;
        },
        defaultValue: "transparent"
    }
]);
/**
 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
 * @param {{ type: string, endings: string }} options
 */ function $be2b79649536f423$var$processBlobParts(parts, options) {
    // 1. Let bytes be an empty sequence of bytes.
    /** @type {NodeJS.TypedArray[]} */ const bytes = [];
    // 2. For each element in parts:
    for (const element of parts){
        // 1. If element is a USVString, run the following substeps:
        if (typeof element === "string") {
            // 1. Let s be element.
            let s = element;
            // 2. If the endings member of options is "native", set s
            //    to the result of converting line endings to native
            //    of element.
            if (options.endings === "native") s = $be2b79649536f423$var$convertLineEndingsNative(s);
            // 3. Append the result of UTF-8 encoding s to bytes.
            bytes.push($be2b79649536f423$var$encoder.encode(s));
        } else if ($be2b79649536f423$require$types.isAnyArrayBuffer(element) || $be2b79649536f423$require$types.isTypedArray(element)) {
            // 2. If element is a BufferSource, get a copy of the
            //    bytes held by the buffer source, and append those
            //    bytes to bytes.
            if (!element.buffer) bytes.push(new Uint8Array(element));
            else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
        } else if ($be2b79649536f423$require$isBlobLike(element)) // 3. If element is a Blob, append the bytes it represents
        //    to bytes.
        bytes.push(element);
    }
    // 3. Return bytes.
    return bytes;
}
/**
 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
 * @param {string} s
 */ function $be2b79649536f423$var$convertLineEndingsNative(s) {
    // 1. Let native line ending be be the code point U+000A LF.
    let nativeLineEnding = "\n";
    // 2. If the underlying platform’s conventions are to
    //    represent newlines as a carriage return and line feed
    //    sequence, set native line ending to the code point
    //    U+000D CR followed by the code point U+000A LF.
    if (process.platform === "win32") nativeLineEnding = "\r\n";
    return s.replace(/\r?\n/g, nativeLineEnding);
}
// If this function is moved to ./util.js, some tools (such as
// rollup) will warn about circular dependencies. See:
// https://github.com/nodejs/undici/issues/1629
function $be2b79649536f423$var$isFileLike(object) {
    return $be2b79649536f423$require$NativeFile && object instanceof $be2b79649536f423$require$NativeFile || object instanceof $be2b79649536f423$var$File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
}
module.exports = {
    File: $be2b79649536f423$var$File,
    FileLike: $be2b79649536f423$var$FileLike,
    isFileLike: $be2b79649536f423$var$isFileLike
};

});
parcelRegister("2BhCx", function(module, exports) {
"use strict";

var $1e4cb489dfe32335$require$types = $3B1P3$util.types;

var $f1lDT = parcelRequire("f1lDT");
var $1e4cb489dfe32335$require$hasOwn = $f1lDT.hasOwn;
var $1e4cb489dfe32335$require$toUSVString = $f1lDT.toUSVString;
/** @type {import('../../types/webidl').Webidl} */ const $1e4cb489dfe32335$var$webidl = {};
$1e4cb489dfe32335$var$webidl.converters = {};
$1e4cb489dfe32335$var$webidl.util = {};
$1e4cb489dfe32335$var$webidl.errors = {};
$1e4cb489dfe32335$var$webidl.errors.exception = function(message) {
    return new TypeError(`${message.header}: ${message.message}`);
};
$1e4cb489dfe32335$var$webidl.errors.conversionFailed = function(context) {
    const plural = context.types.length === 1 ? "" : " one of";
    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(", ")}.`;
    return $1e4cb489dfe32335$var$webidl.errors.exception({
        header: context.prefix,
        message: message
    });
};
$1e4cb489dfe32335$var$webidl.errors.invalidArgument = function(context) {
    return $1e4cb489dfe32335$var$webidl.errors.exception({
        header: context.prefix,
        message: `"${context.value}" is an invalid ${context.type}.`
    });
};
// https://webidl.spec.whatwg.org/#implements
$1e4cb489dfe32335$var$webidl.brandCheck = function(V, I, opts) {
    if ((opts === null || opts === void 0 ? void 0 : opts.strict) !== false && !(V instanceof I)) throw new TypeError("Illegal invocation");
    else return (V === null || V === void 0 ? void 0 : V[Symbol.toStringTag]) === I.prototype[Symbol.toStringTag];
};
$1e4cb489dfe32335$var$webidl.argumentLengthCheck = function({ length: length }, min, ctx) {
    if (length < min) throw $1e4cb489dfe32335$var$webidl.errors.exception({
        message: `${min} argument${min !== 1 ? "s" : ""} required, ` + `but${length ? " only" : ""} ${length} found.`,
        ...ctx
    });
};
$1e4cb489dfe32335$var$webidl.illegalConstructor = function() {
    throw $1e4cb489dfe32335$var$webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
    });
};
// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
$1e4cb489dfe32335$var$webidl.util.Type = function(V) {
    switch(typeof V){
        case "undefined":
            return "Undefined";
        case "boolean":
            return "Boolean";
        case "string":
            return "String";
        case "symbol":
            return "Symbol";
        case "number":
            return "Number";
        case "bigint":
            return "BigInt";
        case "function":
        case "object":
            if (V === null) return "Null";
            return "Object";
    }
};
// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
$1e4cb489dfe32335$var$webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
    let upperBound;
    let lowerBound;
    // 1. If bitLength is 64, then:
    if (bitLength === 64) {
        // 1. Let upperBound be 2^53 − 1.
        upperBound = Math.pow(2, 53) - 1;
        // 2. If signedness is "unsigned", then let lowerBound be 0.
        if (signedness === "unsigned") lowerBound = 0;
        else // 3. Otherwise let lowerBound be −2^53 + 1.
        lowerBound = Math.pow(-2, 53) + 1;
    } else if (signedness === "unsigned") {
        // 2. Otherwise, if signedness is "unsigned", then:
        // 1. Let lowerBound be 0.
        lowerBound = 0;
        // 2. Let upperBound be 2^bitLength − 1.
        upperBound = Math.pow(2, bitLength) - 1;
    } else {
        // 3. Otherwise:
        // 1. Let lowerBound be -2^bitLength − 1.
        lowerBound = Math.pow(-2, bitLength) - 1;
        // 2. Let upperBound be 2^bitLength − 1 − 1.
        upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    // 4. Let x be ? ToNumber(V).
    let x = Number(V);
    // 5. If x is −0, then set x to +0.
    if (x === 0) x = 0;
    // 6. If the conversion is to an IDL type associated
    //    with the [EnforceRange] extended attribute, then:
    if (opts.enforceRange === true) {
        // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V} to an integer.`
        });
        // 2. Set x to IntegerPart(x).
        x = $1e4cb489dfe32335$var$webidl.util.IntegerPart(x);
        // 3. If x < lowerBound or x > upperBound, then
        //    throw a TypeError.
        if (x < lowerBound || x > upperBound) throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
        });
        // 4. Return x.
        return x;
    }
    // 7. If x is not NaN and the conversion is to an IDL
    //    type associated with the [Clamp] extended
    //    attribute, then:
    if (!Number.isNaN(x) && opts.clamp === true) {
        // 1. Set x to min(max(x, lowerBound), upperBound).
        x = Math.min(Math.max(x, lowerBound), upperBound);
        // 2. Round x to the nearest integer, choosing the
        //    even integer if it lies halfway between two,
        //    and choosing +0 rather than −0.
        if (Math.floor(x) % 2 === 0) x = Math.floor(x);
        else x = Math.ceil(x);
        // 3. Return x.
        return x;
    }
    // 8. If x is NaN, +0, +∞, or −∞, then return +0.
    if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) return 0;
    // 9. Set x to IntegerPart(x).
    x = $1e4cb489dfe32335$var$webidl.util.IntegerPart(x);
    // 10. Set x to x modulo 2^bitLength.
    x = x % Math.pow(2, bitLength);
    // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
    //    then return x − 2^bitLength.
    if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) return x - Math.pow(2, bitLength);
    // 12. Otherwise, return x.
    return x;
};
// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
$1e4cb489dfe32335$var$webidl.util.IntegerPart = function(n) {
    // 1. Let r be floor(abs(n)).
    const r = Math.floor(Math.abs(n));
    // 2. If n < 0, then return -1 × r.
    if (n < 0) return -1 * r;
    // 3. Otherwise, return r.
    return r;
};
// https://webidl.spec.whatwg.org/#es-sequence
$1e4cb489dfe32335$var$webidl.sequenceConverter = function(converter) {
    return (V)=>{
        var _V_Symbol_iterator;
        // 1. If Type(V) is not Object, throw a TypeError.
        if ($1e4cb489dfe32335$var$webidl.util.Type(V) !== "Object") throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${$1e4cb489dfe32335$var$webidl.util.Type(V)} is not an Object.`
        });
        // 2. Let method be ? GetMethod(V, @@iterator).
        /** @type {Generator} */ const method = V === null || V === void 0 ? void 0 : (_V_Symbol_iterator = V[Symbol.iterator]) === null || _V_Symbol_iterator === void 0 ? void 0 : _V_Symbol_iterator.call(V);
        const seq = [];
        // 3. If method is undefined, throw a TypeError.
        if (method === undefined || typeof method.next !== "function") throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
        });
        // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
        while(true){
            const { done: done, value: value } = method.next();
            if (done) break;
            seq.push(converter(value));
        }
        return seq;
    };
};
// https://webidl.spec.whatwg.org/#es-to-record
$1e4cb489dfe32335$var$webidl.recordConverter = function(keyConverter, valueConverter) {
    return (O)=>{
        // 1. If Type(O) is not Object, throw a TypeError.
        if ($1e4cb489dfe32335$var$webidl.util.Type(O) !== "Object") throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: "Record",
            message: `Value of type ${$1e4cb489dfe32335$var$webidl.util.Type(O)} is not an Object.`
        });
        // 2. Let result be a new empty instance of record<K, V>.
        const result = {};
        if (!$1e4cb489dfe32335$require$types.isProxy(O)) {
            // Object.keys only returns enumerable properties
            const keys = Object.keys(O);
            for (const key of keys){
                // 1. Let typedKey be key converted to an IDL value of type K.
                const typedKey = keyConverter(key);
                // 2. Let value be ? Get(O, key).
                // 3. Let typedValue be value converted to an IDL value of type V.
                const typedValue = valueConverter(O[key]);
                // 4. Set result[typedKey] to typedValue.
                result[typedKey] = typedValue;
            }
            // 5. Return result.
            return result;
        }
        // 3. Let keys be ? O.[[OwnPropertyKeys]]().
        const keys = Reflect.ownKeys(O);
        // 4. For each key of keys.
        for (const key of keys){
            // 1. Let desc be ? O.[[GetOwnProperty]](key).
            const desc = Reflect.getOwnPropertyDescriptor(O, key);
            // 2. If desc is not undefined and desc.[[Enumerable]] is true:
            if (desc === null || desc === void 0 ? void 0 : desc.enumerable) {
                // 1. Let typedKey be key converted to an IDL value of type K.
                const typedKey = keyConverter(key);
                // 2. Let value be ? Get(O, key).
                // 3. Let typedValue be value converted to an IDL value of type V.
                const typedValue = valueConverter(O[key]);
                // 4. Set result[typedKey] to typedValue.
                result[typedKey] = typedValue;
            }
        }
        // 5. Return result.
        return result;
    };
};
$1e4cb489dfe32335$var$webidl.interfaceConverter = function(i) {
    return (V, opts = {})=>{
        if (opts.strict !== false && !(V instanceof i)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
        });
        return V;
    };
};
$1e4cb489dfe32335$var$webidl.dictionaryConverter = function(converters) {
    return (dictionary)=>{
        const type = $1e4cb489dfe32335$var$webidl.util.Type(dictionary);
        const dict = {};
        if (type === "Null" || type === "Undefined") return dict;
        else if (type !== "Object") throw $1e4cb489dfe32335$var$webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
        });
        for (const options of converters){
            const { key: key, defaultValue: defaultValue, required: required, converter: converter } = options;
            if (required === true) {
                if (!$1e4cb489dfe32335$require$hasOwn(dictionary, key)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
                    header: "Dictionary",
                    message: `Missing required key "${key}".`
                });
            }
            let value = dictionary[key];
            const hasDefault = $1e4cb489dfe32335$require$hasOwn(options, "defaultValue");
            // Only use defaultValue if value is undefined and
            // a defaultValue options was provided.
            if (hasDefault && value !== null) value = value !== null && value !== void 0 ? value : defaultValue;
            // A key can be optional and have no default value.
            // When this happens, do not perform a conversion,
            // and do not assign the key a value.
            if (required || hasDefault || value !== undefined) {
                value = converter(value);
                if (options.allowedValues && !options.allowedValues.includes(value)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
                    header: "Dictionary",
                    message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
                });
                dict[key] = value;
            }
        }
        return dict;
    };
};
$1e4cb489dfe32335$var$webidl.nullableConverter = function(converter) {
    return (V)=>{
        if (V === null) return V;
        return converter(V);
    };
};
// https://webidl.spec.whatwg.org/#es-DOMString
$1e4cb489dfe32335$var$webidl.converters.DOMString = function(V, opts = {}) {
    // 1. If V is null and the conversion is to an IDL type
    //    associated with the [LegacyNullToEmptyString]
    //    extended attribute, then return the DOMString value
    //    that represents the empty string.
    if (V === null && opts.legacyNullToEmptyString) return "";
    // 2. Let x be ? ToString(V).
    if (typeof V === "symbol") throw new TypeError("Could not convert argument of type symbol to string.");
    // 3. Return the IDL DOMString value that represents the
    //    same sequence of code units as the one the
    //    ECMAScript String value x represents.
    return String(V);
};
// https://webidl.spec.whatwg.org/#es-ByteString
$1e4cb489dfe32335$var$webidl.converters.ByteString = function(V) {
    // 1. Let x be ? ToString(V).
    // Note: DOMString converter perform ? ToString(V)
    const x = $1e4cb489dfe32335$var$webidl.converters.DOMString(V);
    // 2. If the value of any element of x is greater than
    //    255, then throw a TypeError.
    for(let index = 0; index < x.length; index++){
        if (x.charCodeAt(index) > 255) throw new TypeError("Cannot convert argument to a ByteString because the character at " + `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
    }
    // 3. Return an IDL ByteString value whose length is the
    //    length of x, and where the value of each element is
    //    the value of the corresponding element of x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-USVString
$1e4cb489dfe32335$var$webidl.converters.USVString = $1e4cb489dfe32335$require$toUSVString;
// https://webidl.spec.whatwg.org/#es-boolean
$1e4cb489dfe32335$var$webidl.converters.boolean = function(V) {
    // 1. Let x be the result of computing ToBoolean(V).
    const x = Boolean(V);
    // 2. Return the IDL boolean value that is the one that represents
    //    the same truth value as the ECMAScript Boolean value x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-any
$1e4cb489dfe32335$var$webidl.converters.any = function(V) {
    return V;
};
// https://webidl.spec.whatwg.org/#es-long-long
$1e4cb489dfe32335$var$webidl.converters["long long"] = function(V) {
    // 1. Let x be ? ConvertToInt(V, 64, "signed").
    const x = $1e4cb489dfe32335$var$webidl.util.ConvertToInt(V, 64, "signed");
    // 2. Return the IDL long long value that represents
    //    the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-unsigned-long-long
$1e4cb489dfe32335$var$webidl.converters["unsigned long long"] = function(V) {
    // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
    const x = $1e4cb489dfe32335$var$webidl.util.ConvertToInt(V, 64, "unsigned");
    // 2. Return the IDL unsigned long long value that
    //    represents the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-unsigned-long
$1e4cb489dfe32335$var$webidl.converters["unsigned long"] = function(V) {
    // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
    const x = $1e4cb489dfe32335$var$webidl.util.ConvertToInt(V, 32, "unsigned");
    // 2. Return the IDL unsigned long value that
    //    represents the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-unsigned-short
$1e4cb489dfe32335$var$webidl.converters["unsigned short"] = function(V, opts) {
    // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
    const x = $1e4cb489dfe32335$var$webidl.util.ConvertToInt(V, 16, "unsigned", opts);
    // 2. Return the IDL unsigned short value that represents
    //    the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
$1e4cb489dfe32335$var$webidl.converters.ArrayBuffer = function(V, opts = {}) {
    // 1. If Type(V) is not Object, or V does not have an
    //    [[ArrayBufferData]] internal slot, then throw a
    //    TypeError.
    // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
    // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
    if ($1e4cb489dfe32335$var$webidl.util.Type(V) !== "Object" || !$1e4cb489dfe32335$require$types.isAnyArrayBuffer(V)) throw $1e4cb489dfe32335$var$webidl.errors.conversionFailed({
        prefix: `${V}`,
        argument: `${V}`,
        types: [
            "ArrayBuffer"
        ]
    });
    // 2. If the conversion is not to an IDL type associated
    //    with the [AllowShared] extended attribute, and
    //    IsSharedArrayBuffer(V) is true, then throw a
    //    TypeError.
    if (opts.allowShared === false && $1e4cb489dfe32335$require$types.isSharedArrayBuffer(V)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
    });
    // 3. If the conversion is not to an IDL type associated
    //    with the [AllowResizable] extended attribute, and
    //    IsResizableArrayBuffer(V) is true, then throw a
    //    TypeError.
    // Note: resizable ArrayBuffers are currently a proposal.
    // 4. Return the IDL ArrayBuffer value that is a
    //    reference to the same object as V.
    return V;
};
$1e4cb489dfe32335$var$webidl.converters.TypedArray = function(V, T, opts = {}) {
    // 1. Let T be the IDL type V is being converted to.
    // 2. If Type(V) is not Object, or V does not have a
    //    [[TypedArrayName]] internal slot with a value
    //    equal to T’s name, then throw a TypeError.
    if ($1e4cb489dfe32335$var$webidl.util.Type(V) !== "Object" || !$1e4cb489dfe32335$require$types.isTypedArray(V) || V.constructor.name !== T.name) throw $1e4cb489dfe32335$var$webidl.errors.conversionFailed({
        prefix: `${T.name}`,
        argument: `${V}`,
        types: [
            T.name
        ]
    });
    // 3. If the conversion is not to an IDL type associated
    //    with the [AllowShared] extended attribute, and
    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
    //    true, then throw a TypeError.
    if (opts.allowShared === false && $1e4cb489dfe32335$require$types.isSharedArrayBuffer(V.buffer)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
    });
    // 4. If the conversion is not to an IDL type associated
    //    with the [AllowResizable] extended attribute, and
    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
    //    true, then throw a TypeError.
    // Note: resizable array buffers are currently a proposal
    // 5. Return the IDL value of type T that is a reference
    //    to the same object as V.
    return V;
};
$1e4cb489dfe32335$var$webidl.converters.DataView = function(V, opts = {}) {
    // 1. If Type(V) is not Object, or V does not have a
    //    [[DataView]] internal slot, then throw a TypeError.
    if ($1e4cb489dfe32335$var$webidl.util.Type(V) !== "Object" || !$1e4cb489dfe32335$require$types.isDataView(V)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
        header: "DataView",
        message: "Object is not a DataView."
    });
    // 2. If the conversion is not to an IDL type associated
    //    with the [AllowShared] extended attribute, and
    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
    //    then throw a TypeError.
    if (opts.allowShared === false && $1e4cb489dfe32335$require$types.isSharedArrayBuffer(V.buffer)) throw $1e4cb489dfe32335$var$webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
    });
    // 3. If the conversion is not to an IDL type associated
    //    with the [AllowResizable] extended attribute, and
    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
    //    true, then throw a TypeError.
    // Note: resizable ArrayBuffers are currently a proposal
    // 4. Return the IDL DataView value that is a reference
    //    to the same object as V.
    return V;
};
// https://webidl.spec.whatwg.org/#BufferSource
$1e4cb489dfe32335$var$webidl.converters.BufferSource = function(V, opts = {}) {
    if ($1e4cb489dfe32335$require$types.isAnyArrayBuffer(V)) return $1e4cb489dfe32335$var$webidl.converters.ArrayBuffer(V, opts);
    if ($1e4cb489dfe32335$require$types.isTypedArray(V)) return $1e4cb489dfe32335$var$webidl.converters.TypedArray(V, V.constructor);
    if ($1e4cb489dfe32335$require$types.isDataView(V)) return $1e4cb489dfe32335$var$webidl.converters.DataView(V, opts);
    throw new TypeError(`Could not convert ${V} to a BufferSource.`);
};
$1e4cb489dfe32335$var$webidl.converters["sequence<ByteString>"] = $1e4cb489dfe32335$var$webidl.sequenceConverter($1e4cb489dfe32335$var$webidl.converters.ByteString);
$1e4cb489dfe32335$var$webidl.converters["sequence<sequence<ByteString>>"] = $1e4cb489dfe32335$var$webidl.sequenceConverter($1e4cb489dfe32335$var$webidl.converters["sequence<ByteString>"]);
$1e4cb489dfe32335$var$webidl.converters["record<ByteString, ByteString>"] = $1e4cb489dfe32335$var$webidl.recordConverter($1e4cb489dfe32335$var$webidl.converters.ByteString, $1e4cb489dfe32335$var$webidl.converters.ByteString);
module.exports = {
    webidl: $1e4cb489dfe32335$var$webidl
};

});

parcelRegister("dGZhg", function(module, exports) {


var $9f7ebb05ab702dcd$require$atob = $3B1P3$buffer.atob;

var $f1lDT = parcelRequire("f1lDT");
var $9f7ebb05ab702dcd$require$isomorphicDecode = $f1lDT.isomorphicDecode;
const $9f7ebb05ab702dcd$var$encoder = new TextEncoder();
/**
 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
 */ const $9f7ebb05ab702dcd$var$HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
const $9f7ebb05ab702dcd$var$HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
;
/**
 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
 */ const $9f7ebb05ab702dcd$var$HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line
;
// https://fetch.spec.whatwg.org/#data-url-processor
/** @param {URL} dataURL */ function $9f7ebb05ab702dcd$var$dataURLProcessor(dataURL) {
    // 1. Assert: dataURL’s scheme is "data".
    $3B1P3$assert(dataURL.protocol === "data:");
    // 2. Let input be the result of running the URL
    // serializer on dataURL with exclude fragment
    // set to true.
    let input = $9f7ebb05ab702dcd$var$URLSerializer(dataURL, true);
    // 3. Remove the leading "data:" string from input.
    input = input.slice(5);
    // 4. Let position point at the start of input.
    const position = {
        position: 0
    };
    // 5. Let mimeType be the result of collecting a
    // sequence of code points that are not equal
    // to U+002C (,), given position.
    let mimeType = $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast(",", input, position);
    // 6. Strip leading and trailing ASCII whitespace
    // from mimeType.
    // Undici implementation note: we need to store the
    // length because if the mimetype has spaces removed,
    // the wrong amount will be sliced from the input in
    // step #9
    const mimeTypeLength = mimeType.length;
    mimeType = $9f7ebb05ab702dcd$var$removeASCIIWhitespace(mimeType, true, true);
    // 7. If position is past the end of input, then
    // return failure
    if (position.position >= input.length) return "failure";
    // 8. Advance position by 1.
    position.position++;
    // 9. Let encodedBody be the remainder of input.
    const encodedBody = input.slice(mimeTypeLength + 1);
    // 10. Let body be the percent-decoding of encodedBody.
    let body = $9f7ebb05ab702dcd$var$stringPercentDecode(encodedBody);
    // 11. If mimeType ends with U+003B (;), followed by
    // zero or more U+0020 SPACE, followed by an ASCII
    // case-insensitive match for "base64", then:
    if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        // 1. Let stringBody be the isomorphic decode of body.
        const stringBody = $9f7ebb05ab702dcd$require$isomorphicDecode(body);
        // 2. Set body to the forgiving-base64 decode of
        // stringBody.
        body = $9f7ebb05ab702dcd$var$forgivingBase64(stringBody);
        // 3. If body is failure, then return failure.
        if (body === "failure") return "failure";
        // 4. Remove the last 6 code points from mimeType.
        mimeType = mimeType.slice(0, -6);
        // 5. Remove trailing U+0020 SPACE code points from mimeType,
        // if any.
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        // 6. Remove the last U+003B (;) code point from mimeType.
        mimeType = mimeType.slice(0, -1);
    }
    // 12. If mimeType starts with U+003B (;), then prepend
    // "text/plain" to mimeType.
    if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
    // 13. Let mimeTypeRecord be the result of parsing
    // mimeType.
    let mimeTypeRecord = $9f7ebb05ab702dcd$var$parseMIMEType(mimeType);
    // 14. If mimeTypeRecord is failure, then set
    // mimeTypeRecord to text/plain;charset=US-ASCII.
    if (mimeTypeRecord === "failure") mimeTypeRecord = $9f7ebb05ab702dcd$var$parseMIMEType("text/plain;charset=US-ASCII");
    // 15. Return a new data: URL struct whose MIME
    // type is mimeTypeRecord and body is body.
    // https://fetch.spec.whatwg.org/#data-url-struct
    return {
        mimeType: mimeTypeRecord,
        body: body
    };
}
// https://url.spec.whatwg.org/#concept-url-serializer
/**
 * @param {URL} url
 * @param {boolean} excludeFragment
 */ function $9f7ebb05ab702dcd$var$URLSerializer(url, excludeFragment = false) {
    if (!excludeFragment) return url.href;
    const href = url.href;
    const hashLength = url.hash.length;
    return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
}
// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
/**
 * @param {(char: string) => boolean} condition
 * @param {string} input
 * @param {{ position: number }} position
 */ function $9f7ebb05ab702dcd$var$collectASequenceOfCodePoints(condition, input, position) {
    // 1. Let result be the empty string.
    let result = "";
    // 2. While position doesn’t point past the end of input and the
    // code point at position within input meets the condition condition:
    while(position.position < input.length && condition(input[position.position])){
        // 1. Append that code point to the end of result.
        result += input[position.position];
        // 2. Advance position by 1.
        position.position++;
    }
    // 3. Return result.
    return result;
}
/**
 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
 * @param {string} char
 * @param {string} input
 * @param {{ position: number }} position
 */ function $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast(char, input, position) {
    const idx = input.indexOf(char, position.position);
    const start = position.position;
    if (idx === -1) {
        position.position = input.length;
        return input.slice(start);
    }
    position.position = idx;
    return input.slice(start, position.position);
}
// https://url.spec.whatwg.org/#string-percent-decode
/** @param {string} input */ function $9f7ebb05ab702dcd$var$stringPercentDecode(input) {
    // 1. Let bytes be the UTF-8 encoding of input.
    const bytes = $9f7ebb05ab702dcd$var$encoder.encode(input);
    // 2. Return the percent-decoding of bytes.
    return $9f7ebb05ab702dcd$var$percentDecode(bytes);
}
// https://url.spec.whatwg.org/#percent-decode
/** @param {Uint8Array} input */ function $9f7ebb05ab702dcd$var$percentDecode(input) {
    // 1. Let output be an empty byte sequence.
    /** @type {number[]} */ const output = [];
    // 2. For each byte byte in input:
    for(let i = 0; i < input.length; i++){
        const byte = input[i];
        // 1. If byte is not 0x25 (%), then append byte to output.
        if (byte !== 0x25) output.push(byte);
        else if (byte === 0x25 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) output.push(0x25);
        else {
            // 1. Let bytePoint be the two bytes after byte in input,
            // decoded, and then interpreted as hexadecimal number.
            const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
            const bytePoint = Number.parseInt(nextTwoBytes, 16);
            // 2. Append a byte whose value is bytePoint to output.
            output.push(bytePoint);
            // 3. Skip the next two bytes in input.
            i += 2;
        }
    }
    // 3. Return output.
    return Uint8Array.from(output);
}
// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
/** @param {string} input */ function $9f7ebb05ab702dcd$var$parseMIMEType(input) {
    // 1. Remove any leading and trailing HTTP whitespace
    // from input.
    input = $9f7ebb05ab702dcd$var$removeHTTPWhitespace(input, true, true);
    // 2. Let position be a position variable for input,
    // initially pointing at the start of input.
    const position = {
        position: 0
    };
    // 3. Let type be the result of collecting a sequence
    // of code points that are not U+002F (/) from
    // input, given position.
    const type = $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast("/", input, position);
    // 4. If type is the empty string or does not solely
    // contain HTTP token code points, then return failure.
    // https://mimesniff.spec.whatwg.org/#http-token-code-point
    if (type.length === 0 || !$9f7ebb05ab702dcd$var$HTTP_TOKEN_CODEPOINTS.test(type)) return "failure";
    // 5. If position is past the end of input, then return
    // failure
    if (position.position > input.length) return "failure";
    // 6. Advance position by 1. (This skips past U+002F (/).)
    position.position++;
    // 7. Let subtype be the result of collecting a sequence of
    // code points that are not U+003B (;) from input, given
    // position.
    let subtype = $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast(";", input, position);
    // 8. Remove any trailing HTTP whitespace from subtype.
    subtype = $9f7ebb05ab702dcd$var$removeHTTPWhitespace(subtype, false, true);
    // 9. If subtype is the empty string or does not solely
    // contain HTTP token code points, then return failure.
    if (subtype.length === 0 || !$9f7ebb05ab702dcd$var$HTTP_TOKEN_CODEPOINTS.test(subtype)) return "failure";
    const typeLowercase = type.toLowerCase();
    const subtypeLowercase = subtype.toLowerCase();
    // 10. Let mimeType be a new MIME type record whose type
    // is type, in ASCII lowercase, and subtype is subtype,
    // in ASCII lowercase.
    // https://mimesniff.spec.whatwg.org/#mime-type
    const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */ parameters: new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
    };
    // 11. While position is not past the end of input:
    while(position.position < input.length){
        // 1. Advance position by 1. (This skips past U+003B (;).)
        position.position++;
        // 2. Collect a sequence of code points that are HTTP
        // whitespace from input given position.
        $9f7ebb05ab702dcd$var$collectASequenceOfCodePoints(// https://fetch.spec.whatwg.org/#http-whitespace
        (char)=>$9f7ebb05ab702dcd$var$HTTP_WHITESPACE_REGEX.test(char), input, position);
        // 3. Let parameterName be the result of collecting a
        // sequence of code points that are not U+003B (;)
        // or U+003D (=) from input, given position.
        let parameterName = $9f7ebb05ab702dcd$var$collectASequenceOfCodePoints((char)=>char !== ";" && char !== "=", input, position);
        // 4. Set parameterName to parameterName, in ASCII
        // lowercase.
        parameterName = parameterName.toLowerCase();
        // 5. If position is not past the end of input, then:
        if (position.position < input.length) {
            // 1. If the code point at position within input is
            // U+003B (;), then continue.
            if (input[position.position] === ";") continue;
            // 2. Advance position by 1. (This skips past U+003D (=).)
            position.position++;
        }
        // 6. If position is past the end of input, then break.
        if (position.position > input.length) break;
        // 7. Let parameterValue be null.
        let parameterValue = null;
        // 8. If the code point at position within input is
        // U+0022 ("), then:
        if (input[position.position] === '"') {
            // 1. Set parameterValue to the result of collecting
            // an HTTP quoted string from input, given position
            // and the extract-value flag.
            parameterValue = $9f7ebb05ab702dcd$var$collectAnHTTPQuotedString(input, position, true);
            // 2. Collect a sequence of code points that are not
            // U+003B (;) from input, given position.
            $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast(";", input, position);
        // 9. Otherwise:
        } else {
            // 1. Set parameterValue to the result of collecting
            // a sequence of code points that are not U+003B (;)
            // from input, given position.
            parameterValue = $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast(";", input, position);
            // 2. Remove any trailing HTTP whitespace from parameterValue.
            parameterValue = $9f7ebb05ab702dcd$var$removeHTTPWhitespace(parameterValue, false, true);
            // 3. If parameterValue is the empty string, then continue.
            if (parameterValue.length === 0) continue;
        }
        // 10. If all of the following are true
        // - parameterName is not the empty string
        // - parameterName solely contains HTTP token code points
        // - parameterValue solely contains HTTP quoted-string token code points
        // - mimeType’s parameters[parameterName] does not exist
        // then set mimeType’s parameters[parameterName] to parameterValue.
        if (parameterName.length !== 0 && $9f7ebb05ab702dcd$var$HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || $9f7ebb05ab702dcd$var$HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
    }
    // 12. Return mimeType.
    return mimeType;
}
// https://infra.spec.whatwg.org/#forgiving-base64-decode
/** @param {string} data */ function $9f7ebb05ab702dcd$var$forgivingBase64(data) {
    // 1. Remove all ASCII whitespace from data.
    data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "") // eslint-disable-line
    ;
    // 2. If data’s code point length divides by 4 leaving
    // no remainder, then:
    if (data.length % 4 === 0) // 1. If data ends with one or two U+003D (=) code points,
    // then remove them from data.
    data = data.replace(/=?=$/, "");
    // 3. If data’s code point length divides by 4 leaving
    // a remainder of 1, then return failure.
    if (data.length % 4 === 1) return "failure";
    // 4. If data contains a code point that is not one of
    //  U+002B (+)
    //  U+002F (/)
    //  ASCII alphanumeric
    // then return failure.
    if (/[^+/0-9A-Za-z]/.test(data)) return "failure";
    const binary = $9f7ebb05ab702dcd$require$atob(data);
    const bytes = new Uint8Array(binary.length);
    for(let byte = 0; byte < binary.length; byte++)bytes[byte] = binary.charCodeAt(byte);
    return bytes;
}
// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
/**
 * @param {string} input
 * @param {{ position: number }} position
 * @param {boolean?} extractValue
 */ function $9f7ebb05ab702dcd$var$collectAnHTTPQuotedString(input, position, extractValue) {
    // 1. Let positionStart be position.
    const positionStart = position.position;
    // 2. Let value be the empty string.
    let value = "";
    // 3. Assert: the code point at position within input
    // is U+0022 (").
    $3B1P3$assert(input[position.position] === '"');
    // 4. Advance position by 1.
    position.position++;
    // 5. While true:
    while(true){
        // 1. Append the result of collecting a sequence of code points
        // that are not U+0022 (") or U+005C (\) from input, given
        // position, to value.
        value += $9f7ebb05ab702dcd$var$collectASequenceOfCodePoints((char)=>char !== '"' && char !== "\\", input, position);
        // 2. If position is past the end of input, then break.
        if (position.position >= input.length) break;
        // 3. Let quoteOrBackslash be the code point at position within
        // input.
        const quoteOrBackslash = input[position.position];
        // 4. Advance position by 1.
        position.position++;
        // 5. If quoteOrBackslash is U+005C (\), then:
        if (quoteOrBackslash === "\\") {
            // 1. If position is past the end of input, then append
            // U+005C (\) to value and break.
            if (position.position >= input.length) {
                value += "\\";
                break;
            }
            // 2. Append the code point at position within input to value.
            value += input[position.position];
            // 3. Advance position by 1.
            position.position++;
        // 6. Otherwise:
        } else {
            // 1. Assert: quoteOrBackslash is U+0022 (").
            $3B1P3$assert(quoteOrBackslash === '"');
            break;
        }
    }
    // 6. If the extract-value flag is set, then return value.
    if (extractValue) return value;
    // 7. Return the code points from positionStart to position,
    // inclusive, within input.
    return input.slice(positionStart, position.position);
}
/**
 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
 */ function $9f7ebb05ab702dcd$var$serializeAMimeType(mimeType) {
    $3B1P3$assert(mimeType !== "failure");
    const { parameters: parameters, essence: essence } = mimeType;
    // 1. Let serialization be the concatenation of mimeType’s
    //    type, U+002F (/), and mimeType’s subtype.
    let serialization = essence;
    // 2. For each name → value of mimeType’s parameters:
    for (let [name, value] of parameters.entries()){
        // 1. Append U+003B (;) to serialization.
        serialization += ";";
        // 2. Append name to serialization.
        serialization += name;
        // 3. Append U+003D (=) to serialization.
        serialization += "=";
        // 4. If value does not solely contain HTTP token code
        //    points or value is the empty string, then:
        if (!$9f7ebb05ab702dcd$var$HTTP_TOKEN_CODEPOINTS.test(value)) {
            // 1. Precede each occurence of U+0022 (") or
            //    U+005C (\) in value with U+005C (\).
            value = value.replace(/(\\|")/g, "\\$1");
            // 2. Prepend U+0022 (") to value.
            value = '"' + value;
            // 3. Append U+0022 (") to value.
            value += '"';
        }
        // 5. Append value to serialization.
        serialization += value;
    }
    // 3. Return serialization.
    return serialization;
}
/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} char
 */ function $9f7ebb05ab702dcd$var$isHTTPWhiteSpace(char) {
    return char === "\r" || char === "\n" || char === "	" || char === " ";
}
/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} str
 */ function $9f7ebb05ab702dcd$var$removeHTTPWhitespace(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
        for(; lead < str.length && $9f7ebb05ab702dcd$var$isHTTPWhiteSpace(str[lead]); lead++);
    }
    if (trailing) {
        for(; trail > 0 && $9f7ebb05ab702dcd$var$isHTTPWhiteSpace(str[trail]); trail--);
    }
    return str.slice(lead, trail + 1);
}
/**
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 * @param {string} char
 */ function $9f7ebb05ab702dcd$var$isASCIIWhitespace(char) {
    return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
}
/**
 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
 */ function $9f7ebb05ab702dcd$var$removeASCIIWhitespace(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
        for(; lead < str.length && $9f7ebb05ab702dcd$var$isASCIIWhitespace(str[lead]); lead++);
    }
    if (trailing) {
        for(; trail > 0 && $9f7ebb05ab702dcd$var$isASCIIWhitespace(str[trail]); trail--);
    }
    return str.slice(lead, trail + 1);
}
module.exports = {
    dataURLProcessor: $9f7ebb05ab702dcd$var$dataURLProcessor,
    URLSerializer: $9f7ebb05ab702dcd$var$URLSerializer,
    collectASequenceOfCodePoints: $9f7ebb05ab702dcd$var$collectASequenceOfCodePoints,
    collectASequenceOfCodePointsFast: $9f7ebb05ab702dcd$var$collectASequenceOfCodePointsFast,
    stringPercentDecode: $9f7ebb05ab702dcd$var$stringPercentDecode,
    parseMIMEType: $9f7ebb05ab702dcd$var$parseMIMEType,
    collectAnHTTPQuotedString: $9f7ebb05ab702dcd$var$collectAnHTTPQuotedString,
    serializeAMimeType: $9f7ebb05ab702dcd$var$serializeAMimeType
};

});





parcelRegister("rZcCt", function(module, exports) {
"use strict";

var $2qRNu = parcelRequire("2qRNu");

var $k7roP = parcelRequire("k7roP");
var $0541ff47fb8b55ba$require$ClientDestroyedError = $k7roP.ClientDestroyedError;
var $0541ff47fb8b55ba$require$ClientClosedError = $k7roP.ClientClosedError;
var $0541ff47fb8b55ba$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $lbv7W = parcelRequire("lbv7W");
var $0541ff47fb8b55ba$require$kDestroy = $lbv7W.kDestroy;
var $0541ff47fb8b55ba$require$kClose = $lbv7W.kClose;
var $0541ff47fb8b55ba$require$kDispatch = $lbv7W.kDispatch;
var $0541ff47fb8b55ba$require$kInterceptors = $lbv7W.kInterceptors;
const $0541ff47fb8b55ba$var$kDestroyed = Symbol("destroyed");
const $0541ff47fb8b55ba$var$kClosed = Symbol("closed");
const $0541ff47fb8b55ba$var$kOnDestroyed = Symbol("onDestroyed");
const $0541ff47fb8b55ba$var$kOnClosed = Symbol("onClosed");
const $0541ff47fb8b55ba$var$kInterceptedDispatch = Symbol("Intercepted Dispatch");
class $0541ff47fb8b55ba$var$DispatcherBase extends $2qRNu {
    constructor(){
        super();
        this[$0541ff47fb8b55ba$var$kDestroyed] = false;
        this[$0541ff47fb8b55ba$var$kOnDestroyed] = null;
        this[$0541ff47fb8b55ba$var$kClosed] = false;
        this[$0541ff47fb8b55ba$var$kOnClosed] = [];
    }
    get destroyed() {
        return this[$0541ff47fb8b55ba$var$kDestroyed];
    }
    get closed() {
        return this[$0541ff47fb8b55ba$var$kClosed];
    }
    get interceptors() {
        return this[$0541ff47fb8b55ba$require$kInterceptors];
    }
    set interceptors(newInterceptors) {
        if (newInterceptors) for(let i = newInterceptors.length - 1; i >= 0; i--){
            const interceptor = this[$0541ff47fb8b55ba$require$kInterceptors][i];
            if (typeof interceptor !== "function") throw new $0541ff47fb8b55ba$require$InvalidArgumentError("interceptor must be an function");
        }
        this[$0541ff47fb8b55ba$require$kInterceptors] = newInterceptors;
    }
    close(callback) {
        if (callback === undefined) return new Promise((resolve, reject)=>{
            this.close((err, data)=>{
                return err ? reject(err) : resolve(data);
            });
        });
        if (typeof callback !== "function") throw new $0541ff47fb8b55ba$require$InvalidArgumentError("invalid callback");
        if (this[$0541ff47fb8b55ba$var$kDestroyed]) {
            queueMicrotask(()=>callback(new $0541ff47fb8b55ba$require$ClientDestroyedError(), null));
            return;
        }
        if (this[$0541ff47fb8b55ba$var$kClosed]) {
            if (this[$0541ff47fb8b55ba$var$kOnClosed]) this[$0541ff47fb8b55ba$var$kOnClosed].push(callback);
            else queueMicrotask(()=>callback(null, null));
            return;
        }
        this[$0541ff47fb8b55ba$var$kClosed] = true;
        this[$0541ff47fb8b55ba$var$kOnClosed].push(callback);
        const onClosed = ()=>{
            const callbacks = this[$0541ff47fb8b55ba$var$kOnClosed];
            this[$0541ff47fb8b55ba$var$kOnClosed] = null;
            for(let i = 0; i < callbacks.length; i++)callbacks[i](null, null);
        };
        // Should not error.
        this[$0541ff47fb8b55ba$require$kClose]().then(()=>this.destroy()).then(()=>{
            queueMicrotask(onClosed);
        });
    }
    destroy(err, callback) {
        if (typeof err === "function") {
            callback = err;
            err = null;
        }
        if (callback === undefined) return new Promise((resolve, reject)=>{
            this.destroy(err, (err, data)=>{
                return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data);
            });
        });
        if (typeof callback !== "function") throw new $0541ff47fb8b55ba$require$InvalidArgumentError("invalid callback");
        if (this[$0541ff47fb8b55ba$var$kDestroyed]) {
            if (this[$0541ff47fb8b55ba$var$kOnDestroyed]) this[$0541ff47fb8b55ba$var$kOnDestroyed].push(callback);
            else queueMicrotask(()=>callback(null, null));
            return;
        }
        if (!err) err = new $0541ff47fb8b55ba$require$ClientDestroyedError();
        this[$0541ff47fb8b55ba$var$kDestroyed] = true;
        this[$0541ff47fb8b55ba$var$kOnDestroyed] = this[$0541ff47fb8b55ba$var$kOnDestroyed] || [];
        this[$0541ff47fb8b55ba$var$kOnDestroyed].push(callback);
        const onDestroyed = ()=>{
            const callbacks = this[$0541ff47fb8b55ba$var$kOnDestroyed];
            this[$0541ff47fb8b55ba$var$kOnDestroyed] = null;
            for(let i = 0; i < callbacks.length; i++)callbacks[i](null, null);
        };
        // Should not error.
        this[$0541ff47fb8b55ba$require$kDestroy](err).then(()=>{
            queueMicrotask(onDestroyed);
        });
    }
    [$0541ff47fb8b55ba$var$kInterceptedDispatch](opts, handler) {
        if (!this[$0541ff47fb8b55ba$require$kInterceptors] || this[$0541ff47fb8b55ba$require$kInterceptors].length === 0) {
            this[$0541ff47fb8b55ba$var$kInterceptedDispatch] = this[$0541ff47fb8b55ba$require$kDispatch];
            return this[$0541ff47fb8b55ba$require$kDispatch](opts, handler);
        }
        let dispatch = this[$0541ff47fb8b55ba$require$kDispatch].bind(this);
        for(let i = this[$0541ff47fb8b55ba$require$kInterceptors].length - 1; i >= 0; i--)dispatch = this[$0541ff47fb8b55ba$require$kInterceptors][i](dispatch);
        this[$0541ff47fb8b55ba$var$kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
    }
    dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") throw new $0541ff47fb8b55ba$require$InvalidArgumentError("handler must be an object");
        try {
            if (!opts || typeof opts !== "object") throw new $0541ff47fb8b55ba$require$InvalidArgumentError("opts must be an object.");
            if (this[$0541ff47fb8b55ba$var$kDestroyed] || this[$0541ff47fb8b55ba$var$kOnDestroyed]) throw new $0541ff47fb8b55ba$require$ClientDestroyedError();
            if (this[$0541ff47fb8b55ba$var$kClosed]) throw new $0541ff47fb8b55ba$require$ClientClosedError();
            return this[$0541ff47fb8b55ba$var$kInterceptedDispatch](opts, handler);
        } catch (err) {
            if (typeof handler.onError !== "function") throw new $0541ff47fb8b55ba$require$InvalidArgumentError("invalid onError method");
            handler.onError(err);
            return false;
        }
    }
}
module.exports = $0541ff47fb8b55ba$var$DispatcherBase;

});
parcelRegister("2qRNu", function(module, exports) {
"use strict";

class $1c57bd7ce8d6a94e$var$Dispatcher extends $3B1P3$events {
    dispatch() {
        throw new Error("not implemented");
    }
    close() {
        throw new Error("not implemented");
    }
    destroy() {
        throw new Error("not implemented");
    }
}
module.exports = $1c57bd7ce8d6a94e$var$Dispatcher;

});


parcelRegister("8Vvyz", function(module, exports) {
"use strict";



var $3zyxC = parcelRequire("3zyxC");

var $k7roP = parcelRequire("k7roP");
var $67fc20178c0ef33f$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $67fc20178c0ef33f$require$ConnectTimeoutError = $k7roP.ConnectTimeoutError;
let $67fc20178c0ef33f$var$tls // include tls conditionally since it is not always available
;
// TODO: session re-use does not wait for the first
// connection to resolve the session and might therefore
// resolve the same servername multiple times even when
// re-use is enabled.
let $67fc20178c0ef33f$var$SessionCache;
// FIXME: remove workaround when the Node bug is fixed
// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
if ($parcel$global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) $67fc20178c0ef33f$var$SessionCache = class WeakSessionCache {
    constructor(maxCachedSessions){
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map();
        this._sessionRegistry = new $parcel$global.FinalizationRegistry((key)=>{
            if (this._sessionCache.size < this._maxCachedSessions) return;
            const ref = this._sessionCache.get(key);
            if (ref !== undefined && ref.deref() === undefined) this._sessionCache.delete(key);
        });
    }
    get(sessionKey) {
        const ref = this._sessionCache.get(sessionKey);
        return ref ? ref.deref() : null;
    }
    set(sessionKey, session) {
        if (this._maxCachedSessions === 0) return;
        this._sessionCache.set(sessionKey, new WeakRef(session));
        this._sessionRegistry.register(session, sessionKey);
    }
};
else $67fc20178c0ef33f$var$SessionCache = class SimpleSessionCache {
    constructor(maxCachedSessions){
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map();
    }
    get(sessionKey) {
        return this._sessionCache.get(sessionKey);
    }
    set(sessionKey, session) {
        if (this._maxCachedSessions === 0) return;
        if (this._sessionCache.size >= this._maxCachedSessions) {
            // remove the oldest session
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
        }
        this._sessionCache.set(sessionKey, session);
    }
};

function $67fc20178c0ef33f$var$buildConnector({ allowH2: allowH2, maxCachedSessions: maxCachedSessions, socketPath: socketPath, timeout: timeout, ...opts }) {
    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new $67fc20178c0ef33f$require$InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
    const options = {
        path: socketPath,
        ...opts
    };
    const sessionCache = new $67fc20178c0ef33f$var$SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
    timeout = timeout == null ? 10e3 : timeout;
    allowH2 = allowH2 != null ? allowH2 : false;
    return function connect({ hostname: hostname, host: host, protocol: protocol, port: port, servername: servername, localAddress: localAddress, httpSocket: httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
            if (!$67fc20178c0ef33f$var$tls) $67fc20178c0ef33f$var$tls = $3B1P3$tls;
            servername = servername || options.servername || $3zyxC.getServerName(host) || null;
            const sessionKey = servername || hostname;
            const session = sessionCache.get(sessionKey) || null;
            $3B1P3$assert(sessionKey);
            socket = $67fc20178c0ef33f$var$tls.connect({
                highWaterMark: 16384,
                ...options,
                servername: servername,
                session: session,
                localAddress: localAddress,
                // TODO(HTTP/2): Add support for h2c
                ALPNProtocols: allowH2 ? [
                    "http/1.1",
                    "h2"
                ] : [
                    "http/1.1"
                ],
                socket: httpSocket,
                port: port || 443,
                host: hostname
            });
            socket.on("session", function(session) {
                // TODO (fix): Can a session become invalid once established? Don't think so?
                sessionCache.set(sessionKey, session);
            });
        } else {
            $3B1P3$assert(!httpSocket, "httpSocket can only be sent on TLS update");
            socket = $3B1P3$net.connect({
                highWaterMark: 65536,
                ...options,
                localAddress: localAddress,
                port: port || 80,
                host: hostname
            });
        }
        // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
        if (options.keepAlive == null || options.keepAlive) {
            const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;
            socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = $67fc20178c0ef33f$var$setupTimeout(()=>$67fc20178c0ef33f$var$onConnectTimeout(socket), timeout);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
            cancelTimeout();
            if (callback) {
                const cb = callback;
                callback = null;
                cb(null, this);
            }
        }).on("error", function(err) {
            cancelTimeout();
            if (callback) {
                const cb = callback;
                callback = null;
                cb(err);
            }
        });
        return socket;
    };
}
function $67fc20178c0ef33f$var$setupTimeout(onConnectTimeout, timeout) {
    if (!timeout) return ()=>{};
    let s1 = null;
    let s2 = null;
    const timeoutId = setTimeout(()=>{
        // setImmediate is added to make sure that we priotorise socket error events over timeouts
        s1 = setImmediate(()=>{
            if (process.platform === "win32") // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
            s2 = setImmediate(()=>onConnectTimeout());
            else onConnectTimeout();
        });
    }, timeout);
    return ()=>{
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s2);
    };
}
function $67fc20178c0ef33f$var$onConnectTimeout(socket) {
    $3zyxC.destroy(socket, new $67fc20178c0ef33f$require$ConnectTimeoutError());
}
module.exports = $67fc20178c0ef33f$var$buildConnector;

});

parcelRegister("jGj3E", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SPECIAL_HEADERS = module.exports.HEADER_STATE = module.exports.MINOR = module.exports.MAJOR = module.exports.CONNECTION_TOKEN_CHARS = module.exports.HEADER_CHARS = module.exports.TOKEN = module.exports.STRICT_TOKEN = module.exports.HEX = module.exports.URL_CHAR = module.exports.STRICT_URL_CHAR = module.exports.USERINFO_CHARS = module.exports.MARK = module.exports.ALPHANUM = module.exports.NUM = module.exports.HEX_MAP = module.exports.NUM_MAP = module.exports.ALPHA = module.exports.FINISH = module.exports.H_METHOD_MAP = module.exports.METHOD_MAP = module.exports.METHODS_RTSP = module.exports.METHODS_ICE = module.exports.METHODS_HTTP = module.exports.METHODS = module.exports.LENIENT_FLAGS = module.exports.FLAGS = module.exports.TYPE = module.exports.ERROR = void 0;

var $9WmRZ = parcelRequire("9WmRZ");
// C headers
var $e540b90da5fda7dc$var$ERROR;
(function(ERROR) {
    ERROR[ERROR["OK"] = 0] = "OK";
    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
    ERROR[ERROR["STRICT"] = 2] = "STRICT";
    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR[ERROR["USER"] = 24] = "USER";
})($e540b90da5fda7dc$var$ERROR = module.exports.ERROR || (module.exports.ERROR = {}));
var $e540b90da5fda7dc$var$TYPE;
(function(TYPE) {
    TYPE[TYPE["BOTH"] = 0] = "BOTH";
    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
})($e540b90da5fda7dc$var$TYPE = module.exports.TYPE || (module.exports.TYPE = {}));
var $e540b90da5fda7dc$var$FLAGS;
(function(FLAGS) {
    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
    // 1 << 8 is unused
    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
})($e540b90da5fda7dc$var$FLAGS = module.exports.FLAGS || (module.exports.FLAGS = {}));
var $e540b90da5fda7dc$var$LENIENT_FLAGS;
(function(LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
})($e540b90da5fda7dc$var$LENIENT_FLAGS = module.exports.LENIENT_FLAGS || (module.exports.LENIENT_FLAGS = {}));
var $e540b90da5fda7dc$var$METHODS;
(function(METHODS) {
    METHODS[METHODS["DELETE"] = 0] = "DELETE";
    METHODS[METHODS["GET"] = 1] = "GET";
    METHODS[METHODS["HEAD"] = 2] = "HEAD";
    METHODS[METHODS["POST"] = 3] = "POST";
    METHODS[METHODS["PUT"] = 4] = "PUT";
    /* pathological */ METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
    METHODS[METHODS["TRACE"] = 7] = "TRACE";
    /* WebDAV */ METHODS[METHODS["COPY"] = 8] = "COPY";
    METHODS[METHODS["LOCK"] = 9] = "LOCK";
    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
    METHODS[METHODS["MOVE"] = 11] = "MOVE";
    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
    METHODS[METHODS["BIND"] = 16] = "BIND";
    METHODS[METHODS["REBIND"] = 17] = "REBIND";
    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
    METHODS[METHODS["ACL"] = 19] = "ACL";
    /* subversion */ METHODS[METHODS["REPORT"] = 20] = "REPORT";
    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS[METHODS["MERGE"] = 23] = "MERGE";
    /* upnp */ METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    /* RFC-5789 */ METHODS[METHODS["PATCH"] = 28] = "PATCH";
    METHODS[METHODS["PURGE"] = 29] = "PURGE";
    /* CalDAV */ METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
    /* RFC-2068, section 19.6.1.2 */ METHODS[METHODS["LINK"] = 31] = "LINK";
    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
    /* icecast */ METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
    /* RFC-7540, section 11.6 */ METHODS[METHODS["PRI"] = 34] = "PRI";
    /* RFC-2326 RTSP */ METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS[METHODS["SETUP"] = 37] = "SETUP";
    METHODS[METHODS["PLAY"] = 38] = "PLAY";
    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
    METHODS[METHODS["RECORD"] = 44] = "RECORD";
    /* RAOP */ METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
})($e540b90da5fda7dc$var$METHODS = module.exports.METHODS || (module.exports.METHODS = {}));
module.exports.METHODS_HTTP = [
    $e540b90da5fda7dc$var$METHODS.DELETE,
    $e540b90da5fda7dc$var$METHODS.GET,
    $e540b90da5fda7dc$var$METHODS.HEAD,
    $e540b90da5fda7dc$var$METHODS.POST,
    $e540b90da5fda7dc$var$METHODS.PUT,
    $e540b90da5fda7dc$var$METHODS.CONNECT,
    $e540b90da5fda7dc$var$METHODS.OPTIONS,
    $e540b90da5fda7dc$var$METHODS.TRACE,
    $e540b90da5fda7dc$var$METHODS.COPY,
    $e540b90da5fda7dc$var$METHODS.LOCK,
    $e540b90da5fda7dc$var$METHODS.MKCOL,
    $e540b90da5fda7dc$var$METHODS.MOVE,
    $e540b90da5fda7dc$var$METHODS.PROPFIND,
    $e540b90da5fda7dc$var$METHODS.PROPPATCH,
    $e540b90da5fda7dc$var$METHODS.SEARCH,
    $e540b90da5fda7dc$var$METHODS.UNLOCK,
    $e540b90da5fda7dc$var$METHODS.BIND,
    $e540b90da5fda7dc$var$METHODS.REBIND,
    $e540b90da5fda7dc$var$METHODS.UNBIND,
    $e540b90da5fda7dc$var$METHODS.ACL,
    $e540b90da5fda7dc$var$METHODS.REPORT,
    $e540b90da5fda7dc$var$METHODS.MKACTIVITY,
    $e540b90da5fda7dc$var$METHODS.CHECKOUT,
    $e540b90da5fda7dc$var$METHODS.MERGE,
    $e540b90da5fda7dc$var$METHODS["M-SEARCH"],
    $e540b90da5fda7dc$var$METHODS.NOTIFY,
    $e540b90da5fda7dc$var$METHODS.SUBSCRIBE,
    $e540b90da5fda7dc$var$METHODS.UNSUBSCRIBE,
    $e540b90da5fda7dc$var$METHODS.PATCH,
    $e540b90da5fda7dc$var$METHODS.PURGE,
    $e540b90da5fda7dc$var$METHODS.MKCALENDAR,
    $e540b90da5fda7dc$var$METHODS.LINK,
    $e540b90da5fda7dc$var$METHODS.UNLINK,
    $e540b90da5fda7dc$var$METHODS.PRI,
    // TODO(indutny): should we allow it with HTTP?
    $e540b90da5fda7dc$var$METHODS.SOURCE
];
module.exports.METHODS_ICE = [
    $e540b90da5fda7dc$var$METHODS.SOURCE
];
module.exports.METHODS_RTSP = [
    $e540b90da5fda7dc$var$METHODS.OPTIONS,
    $e540b90da5fda7dc$var$METHODS.DESCRIBE,
    $e540b90da5fda7dc$var$METHODS.ANNOUNCE,
    $e540b90da5fda7dc$var$METHODS.SETUP,
    $e540b90da5fda7dc$var$METHODS.PLAY,
    $e540b90da5fda7dc$var$METHODS.PAUSE,
    $e540b90da5fda7dc$var$METHODS.TEARDOWN,
    $e540b90da5fda7dc$var$METHODS.GET_PARAMETER,
    $e540b90da5fda7dc$var$METHODS.SET_PARAMETER,
    $e540b90da5fda7dc$var$METHODS.REDIRECT,
    $e540b90da5fda7dc$var$METHODS.RECORD,
    $e540b90da5fda7dc$var$METHODS.FLUSH,
    // For AirPlay
    $e540b90da5fda7dc$var$METHODS.GET,
    $e540b90da5fda7dc$var$METHODS.POST
];
module.exports.METHOD_MAP = $9WmRZ.enumToMap($e540b90da5fda7dc$var$METHODS);
module.exports.H_METHOD_MAP = {};
Object.keys(module.exports.METHOD_MAP).forEach((key)=>{
    if (/^H/.test(key)) module.exports.H_METHOD_MAP[key] = module.exports.METHOD_MAP[key];
});
var $e540b90da5fda7dc$var$FINISH;
(function(FINISH) {
    FINISH[FINISH["SAFE"] = 0] = "SAFE";
    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
})($e540b90da5fda7dc$var$FINISH = module.exports.FINISH || (module.exports.FINISH = {}));
module.exports.ALPHA = [];
for(let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++){
    // Upper case
    module.exports.ALPHA.push(String.fromCharCode(i));
    // Lower case
    module.exports.ALPHA.push(String.fromCharCode(i + 0x20));
}
module.exports.NUM_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9
};
module.exports.HEX_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 0XA,
    B: 0XB,
    C: 0XC,
    D: 0XD,
    E: 0XE,
    F: 0XF,
    a: 0xa,
    b: 0xb,
    c: 0xc,
    d: 0xd,
    e: 0xe,
    f: 0xf
};
module.exports.NUM = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
];
module.exports.ALPHANUM = module.exports.ALPHA.concat(module.exports.NUM);
module.exports.MARK = [
    "-",
    "_",
    ".",
    "!",
    "~",
    "*",
    "'",
    "(",
    ")"
];
module.exports.USERINFO_CHARS = module.exports.ALPHANUM.concat(module.exports.MARK).concat([
    "%",
    ";",
    ":",
    "&",
    "=",
    "+",
    "$",
    ","
]);
// TODO(indutny): use RFC
module.exports.STRICT_URL_CHAR = [
    "!",
    '"',
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~"
].concat(module.exports.ALPHANUM);
module.exports.URL_CHAR = module.exports.STRICT_URL_CHAR.concat([
    "	",
    "\f"
]);
// All characters with 0x80 bit set to 1
for(let i = 0x80; i <= 0xff; i++)module.exports.URL_CHAR.push(i);
module.exports.HEX = module.exports.NUM.concat([
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F"
]);
/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*<any CHAR except CTLs or separators>
 *     separators     = "(" | ")" | "<" | ">" | "@"
 *                    | "," | ";" | ":" | "\" | <">
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */ module.exports.STRICT_TOKEN = [
    "!",
    "#",
    "$",
    "%",
    "&",
    "'",
    "*",
    "+",
    "-",
    ".",
    "^",
    "_",
    "`",
    "|",
    "~"
].concat(module.exports.ALPHANUM);
module.exports.TOKEN = module.exports.STRICT_TOKEN.concat([
    " "
]);
/*
 * Verify that a char is a valid visible (printable) US-ASCII
 * character or %x80-FF
 */ module.exports.HEADER_CHARS = [
    "	"
];
for(let i = 32; i <= 255; i++)if (i !== 127) module.exports.HEADER_CHARS.push(i);
// ',' = \x44
module.exports.CONNECTION_TOKEN_CHARS = module.exports.HEADER_CHARS.filter((c)=>c !== 44);
module.exports.MAJOR = module.exports.NUM_MAP;
module.exports.MINOR = module.exports.MAJOR;
var $e540b90da5fda7dc$var$HEADER_STATE;
(function(HEADER_STATE) {
    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
})($e540b90da5fda7dc$var$HEADER_STATE = module.exports.HEADER_STATE || (module.exports.HEADER_STATE = {}));
module.exports.SPECIAL_HEADERS = {
    "connection": $e540b90da5fda7dc$var$HEADER_STATE.CONNECTION,
    "content-length": $e540b90da5fda7dc$var$HEADER_STATE.CONTENT_LENGTH,
    "proxy-connection": $e540b90da5fda7dc$var$HEADER_STATE.CONNECTION,
    "transfer-encoding": $e540b90da5fda7dc$var$HEADER_STATE.TRANSFER_ENCODING,
    "upgrade": $e540b90da5fda7dc$var$HEADER_STATE.UPGRADE
};

});
parcelRegister("9WmRZ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.enumToMap = void 0;
function $73cb454bd73e331b$var$enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key)=>{
        const value = obj[key];
        if (typeof value === "number") res[key] = value;
    });
    return res;
}
module.exports.enumToMap = $73cb454bd73e331b$var$enumToMap;

});


parcelRegister("9sNdt", function(module, exports) {
"use strict";

var $6exB3 = parcelRequire("6exB3");
function $6e3ce7ea64cc8d5a$var$createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
    return (dispatch)=>{
        return function Intercept(opts, handler) {
            const { maxRedirections: maxRedirections = defaultMaxRedirections } = opts;
            if (!maxRedirections) return dispatch(opts, handler);
            const redirectHandler = new $6exB3(dispatch, maxRedirections, opts, handler);
            opts = {
                ...opts,
                maxRedirections: 0
            } // Stop sub dispatcher from also redirecting.
            ;
            return dispatch(opts, redirectHandler);
        };
    };
}
module.exports = $6e3ce7ea64cc8d5a$var$createRedirectInterceptor;

});
parcelRegister("6exB3", function(module, exports) {
"use strict";

var $3zyxC = parcelRequire("3zyxC");

var $lbv7W = parcelRequire("lbv7W");
var $489e1c7f27fbd6b9$require$kBodyUsed = $lbv7W.kBodyUsed;


var $k7roP = parcelRequire("k7roP");
var $489e1c7f27fbd6b9$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

const $489e1c7f27fbd6b9$var$redirectableStatusCodes = [
    300,
    301,
    302,
    303,
    307,
    308
];
const $489e1c7f27fbd6b9$var$kBody = Symbol("body");
class $489e1c7f27fbd6b9$var$BodyAsyncIterable {
    constructor(body){
        this[$489e1c7f27fbd6b9$var$kBody] = body;
        this[$489e1c7f27fbd6b9$require$kBodyUsed] = false;
    }
    async *[Symbol.asyncIterator]() {
        $3B1P3$assert(!this[$489e1c7f27fbd6b9$require$kBodyUsed], "disturbed");
        this[$489e1c7f27fbd6b9$require$kBodyUsed] = true;
        yield* this[$489e1c7f27fbd6b9$var$kBody];
    }
}
class $489e1c7f27fbd6b9$var$RedirectHandler {
    constructor(dispatch, maxRedirections, opts, handler){
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new $489e1c7f27fbd6b9$require$InvalidArgumentError("maxRedirections must be a positive number");
        $3zyxC.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = {
            ...opts,
            maxRedirections: 0
        } // opts must be a copy
        ;
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if ($3zyxC.isStream(this.opts.body)) {
            // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
            // so that it can be dispatched again?
            // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
            if ($3zyxC.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
                $3B1P3$assert(false);
            });
            if (typeof this.opts.body.readableDidRead !== "boolean") {
                this.opts.body[$489e1c7f27fbd6b9$require$kBodyUsed] = false;
                $3B1P3$events.prototype.on.call(this.opts.body, "data", function() {
                    this[$489e1c7f27fbd6b9$require$kBodyUsed] = true;
                });
            }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") // TODO (fix): We can't access ReadableStream internal state
        // to determine whether or not it has been disturbed. This is just
        // a workaround.
        this.opts.body = new $489e1c7f27fbd6b9$var$BodyAsyncIterable(this.opts.body);
        else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && $3zyxC.isIterable(this.opts.body)) // TODO: Should we allow re-using iterable if !this.opts.idempotent
        // or through some other flag?
        this.opts.body = new $489e1c7f27fbd6b9$var$BodyAsyncIterable(this.opts.body);
    }
    onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, {
            history: this.history
        });
    }
    onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
    }
    onError(error) {
        this.handler.onError(error);
    }
    onHeaders(statusCode, headers, resume, statusText) {
        this.location = this.history.length >= this.maxRedirections || $3zyxC.isDisturbed(this.opts.body) ? null : $489e1c7f27fbd6b9$var$parseLocation(statusCode, headers);
        if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
        if (!this.location) return this.handler.onHeaders(statusCode, headers, resume, statusText);
        const { origin: origin, pathname: pathname, search: search } = $3zyxC.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path = search ? `${pathname}${search}` : pathname;
        // Remove headers referring to the original URL.
        // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
        // https://tools.ietf.org/html/rfc7231#section-6.4
        this.opts.headers = $489e1c7f27fbd6b9$var$cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        // https://tools.ietf.org/html/rfc7231#section-6.4.4
        // In case of HTTP 303, always replace method to be either HEAD or GET
        if (statusCode === 303 && this.opts.method !== "HEAD") {
            this.opts.method = "GET";
            this.opts.body = null;
        }
    }
    onData(chunk) {
        if (this.location) ;
        else return this.handler.onData(chunk);
    }
    onComplete(trailers) {
        if (this.location) {
            /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */ this.location = null;
            this.abort = null;
            this.dispatch(this.opts, this);
        } else this.handler.onComplete(trailers);
    }
    onBodySent(chunk) {
        if (this.handler.onBodySent) this.handler.onBodySent(chunk);
    }
}
function $489e1c7f27fbd6b9$var$parseLocation(statusCode, headers) {
    if ($489e1c7f27fbd6b9$var$redirectableStatusCodes.indexOf(statusCode) === -1) return null;
    for(let i = 0; i < headers.length; i += 2){
        if (headers[i].toString().toLowerCase() === "location") return headers[i + 1];
    }
}
// https://tools.ietf.org/html/rfc7231#section-6.4.4
function $489e1c7f27fbd6b9$var$shouldRemoveHeader(header, removeContent, unknownOrigin) {
    if (header.length === 4) return $3zyxC.headerNameToString(header) === "host";
    if (removeContent && $3zyxC.headerNameToString(header).startsWith("content-")) return true;
    if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
        const name = $3zyxC.headerNameToString(header);
        return name === "authorization" || name === "cookie" || name === "proxy-authorization";
    }
    return false;
}
// https://tools.ietf.org/html/rfc7231#section-6.4
function $489e1c7f27fbd6b9$var$cleanRequestHeaders(headers, removeContent, unknownOrigin) {
    const ret = [];
    if (Array.isArray(headers)) {
        for(let i = 0; i < headers.length; i += 2)if (!$489e1c7f27fbd6b9$var$shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) ret.push(headers[i], headers[i + 1]);
    } else if (headers && typeof headers === "object") {
        for (const key of Object.keys(headers))if (!$489e1c7f27fbd6b9$var$shouldRemoveHeader(key, removeContent, unknownOrigin)) ret.push(key, headers[key]);
    } else $3B1P3$assert(headers == null, "headers must be an object or an array");
    return ret;
}
module.exports = $489e1c7f27fbd6b9$var$RedirectHandler;

});


parcelRegister("gxO6E", function(module, exports) {
module.exports = "";

});

parcelRegister("hzsOQ", function(module, exports) {
module.exports = "";

});


parcelRegister("fNXn9", function(module, exports) {
"use strict";

var $jknpQ = parcelRequire("jknpQ");
var $b8197cbcd208898c$require$PoolBase = $jknpQ.PoolBase;
var $b8197cbcd208898c$require$kClients = $jknpQ.kClients;
var $b8197cbcd208898c$require$kNeedDrain = $jknpQ.kNeedDrain;
var $b8197cbcd208898c$require$kAddClient = $jknpQ.kAddClient;
var $b8197cbcd208898c$require$kGetDispatcher = $jknpQ.kGetDispatcher;

var $9S8MD = parcelRequire("9S8MD");

var $k7roP = parcelRequire("k7roP");
var $b8197cbcd208898c$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $3zyxC = parcelRequire("3zyxC");

var $lbv7W = parcelRequire("lbv7W");
var $b8197cbcd208898c$require$kUrl = $lbv7W.kUrl;
var $b8197cbcd208898c$require$kInterceptors = $lbv7W.kInterceptors;

var $8Vvyz = parcelRequire("8Vvyz");
const $b8197cbcd208898c$var$kOptions = Symbol("options");
const $b8197cbcd208898c$var$kConnections = Symbol("connections");
const $b8197cbcd208898c$var$kFactory = Symbol("factory");
function $b8197cbcd208898c$var$defaultFactory(origin, opts) {
    return new $9S8MD(origin, opts);
}
class $b8197cbcd208898c$var$Pool extends $b8197cbcd208898c$require$PoolBase {
    constructor(origin, { connections: connections, factory: factory = $b8197cbcd208898c$var$defaultFactory, connect: connect, connectTimeout: connectTimeout, tls: tls, maxCachedSessions: maxCachedSessions, socketPath: socketPath, autoSelectFamily: autoSelectFamily, autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout, allowH2: allowH2, ...options } = {}){
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new $b8197cbcd208898c$require$InvalidArgumentError("invalid connections");
        if (typeof factory !== "function") throw new $b8197cbcd208898c$require$InvalidArgumentError("factory must be a function.");
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") throw new $b8197cbcd208898c$require$InvalidArgumentError("connect must be a function or an object");
        if (typeof connect !== "function") connect = $8Vvyz({
            ...tls,
            maxCachedSessions: maxCachedSessions,
            allowH2: allowH2,
            socketPath: socketPath,
            timeout: connectTimeout,
            ...$3zyxC.nodeHasAutoSelectFamily && autoSelectFamily ? {
                autoSelectFamily: autoSelectFamily,
                autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout
            } : undefined,
            ...connect
        });
        this[$b8197cbcd208898c$require$kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
        this[$b8197cbcd208898c$var$kConnections] = connections || null;
        this[$b8197cbcd208898c$require$kUrl] = $3zyxC.parseOrigin(origin);
        this[$b8197cbcd208898c$var$kOptions] = {
            ...$3zyxC.deepClone(options),
            connect: connect,
            allowH2: allowH2
        };
        this[$b8197cbcd208898c$var$kOptions].interceptors = options.interceptors ? {
            ...options.interceptors
        } : undefined;
        this[$b8197cbcd208898c$var$kFactory] = factory;
    }
    [$b8197cbcd208898c$require$kGetDispatcher]() {
        let dispatcher = this[$b8197cbcd208898c$require$kClients].find((dispatcher)=>!dispatcher[$b8197cbcd208898c$require$kNeedDrain]);
        if (dispatcher) return dispatcher;
        if (!this[$b8197cbcd208898c$var$kConnections] || this[$b8197cbcd208898c$require$kClients].length < this[$b8197cbcd208898c$var$kConnections]) {
            dispatcher = this[$b8197cbcd208898c$var$kFactory](this[$b8197cbcd208898c$require$kUrl], this[$b8197cbcd208898c$var$kOptions]);
            this[$b8197cbcd208898c$require$kAddClient](dispatcher);
        }
        return dispatcher;
    }
}
module.exports = $b8197cbcd208898c$var$Pool;

});
parcelRegister("jknpQ", function(module, exports) {
"use strict";

var $rZcCt = parcelRequire("rZcCt");

var $fgeV6 = parcelRequire("fgeV6");

var $lbv7W = parcelRequire("lbv7W");
var $e1220c8050c9ebc4$require$kConnected = $lbv7W.kConnected;
var $e1220c8050c9ebc4$require$kSize = $lbv7W.kSize;
var $e1220c8050c9ebc4$require$kRunning = $lbv7W.kRunning;
var $e1220c8050c9ebc4$require$kPending = $lbv7W.kPending;
var $e1220c8050c9ebc4$require$kQueued = $lbv7W.kQueued;
var $e1220c8050c9ebc4$require$kBusy = $lbv7W.kBusy;
var $e1220c8050c9ebc4$require$kFree = $lbv7W.kFree;
var $e1220c8050c9ebc4$require$kUrl = $lbv7W.kUrl;
var $e1220c8050c9ebc4$require$kClose = $lbv7W.kClose;
var $e1220c8050c9ebc4$require$kDestroy = $lbv7W.kDestroy;
var $e1220c8050c9ebc4$require$kDispatch = $lbv7W.kDispatch;

var $kRy4u = parcelRequire("kRy4u");
const $e1220c8050c9ebc4$var$kClients = Symbol("clients");
const $e1220c8050c9ebc4$var$kNeedDrain = Symbol("needDrain");
const $e1220c8050c9ebc4$var$kQueue = Symbol("queue");
const $e1220c8050c9ebc4$var$kClosedResolve = Symbol("closed resolve");
const $e1220c8050c9ebc4$var$kOnDrain = Symbol("onDrain");
const $e1220c8050c9ebc4$var$kOnConnect = Symbol("onConnect");
const $e1220c8050c9ebc4$var$kOnDisconnect = Symbol("onDisconnect");
const $e1220c8050c9ebc4$var$kOnConnectionError = Symbol("onConnectionError");
const $e1220c8050c9ebc4$var$kGetDispatcher = Symbol("get dispatcher");
const $e1220c8050c9ebc4$var$kAddClient = Symbol("add client");
const $e1220c8050c9ebc4$var$kRemoveClient = Symbol("remove client");
const $e1220c8050c9ebc4$var$kStats = Symbol("stats");
class $e1220c8050c9ebc4$var$PoolBase extends $rZcCt {
    constructor(){
        super();
        this[$e1220c8050c9ebc4$var$kQueue] = new $fgeV6();
        this[$e1220c8050c9ebc4$var$kClients] = [];
        this[$e1220c8050c9ebc4$require$kQueued] = 0;
        const pool = this;
        this[$e1220c8050c9ebc4$var$kOnDrain] = function onDrain(origin, targets) {
            const queue = pool[$e1220c8050c9ebc4$var$kQueue];
            let needDrain = false;
            while(!needDrain){
                const item = queue.shift();
                if (!item) break;
                pool[$e1220c8050c9ebc4$require$kQueued]--;
                needDrain = !this.dispatch(item.opts, item.handler);
            }
            this[$e1220c8050c9ebc4$var$kNeedDrain] = needDrain;
            if (!this[$e1220c8050c9ebc4$var$kNeedDrain] && pool[$e1220c8050c9ebc4$var$kNeedDrain]) {
                pool[$e1220c8050c9ebc4$var$kNeedDrain] = false;
                pool.emit("drain", origin, [
                    pool,
                    ...targets
                ]);
            }
            if (pool[$e1220c8050c9ebc4$var$kClosedResolve] && queue.isEmpty()) Promise.all(pool[$e1220c8050c9ebc4$var$kClients].map((c)=>c.close())).then(pool[$e1220c8050c9ebc4$var$kClosedResolve]);
        };
        this[$e1220c8050c9ebc4$var$kOnConnect] = (origin, targets)=>{
            pool.emit("connect", origin, [
                pool,
                ...targets
            ]);
        };
        this[$e1220c8050c9ebc4$var$kOnDisconnect] = (origin, targets, err)=>{
            pool.emit("disconnect", origin, [
                pool,
                ...targets
            ], err);
        };
        this[$e1220c8050c9ebc4$var$kOnConnectionError] = (origin, targets, err)=>{
            pool.emit("connectionError", origin, [
                pool,
                ...targets
            ], err);
        };
        this[$e1220c8050c9ebc4$var$kStats] = new $kRy4u(this);
    }
    get [$e1220c8050c9ebc4$require$kBusy]() {
        return this[$e1220c8050c9ebc4$var$kNeedDrain];
    }
    get [$e1220c8050c9ebc4$require$kConnected]() {
        return this[$e1220c8050c9ebc4$var$kClients].filter((client)=>client[$e1220c8050c9ebc4$require$kConnected]).length;
    }
    get [$e1220c8050c9ebc4$require$kFree]() {
        return this[$e1220c8050c9ebc4$var$kClients].filter((client)=>client[$e1220c8050c9ebc4$require$kConnected] && !client[$e1220c8050c9ebc4$var$kNeedDrain]).length;
    }
    get [$e1220c8050c9ebc4$require$kPending]() {
        let ret = this[$e1220c8050c9ebc4$require$kQueued];
        for (const { [$e1220c8050c9ebc4$require$kPending]: pending } of this[$e1220c8050c9ebc4$var$kClients])ret += pending;
        return ret;
    }
    get [$e1220c8050c9ebc4$require$kRunning]() {
        let ret = 0;
        for (const { [$e1220c8050c9ebc4$require$kRunning]: running } of this[$e1220c8050c9ebc4$var$kClients])ret += running;
        return ret;
    }
    get [$e1220c8050c9ebc4$require$kSize]() {
        let ret = this[$e1220c8050c9ebc4$require$kQueued];
        for (const { [$e1220c8050c9ebc4$require$kSize]: size } of this[$e1220c8050c9ebc4$var$kClients])ret += size;
        return ret;
    }
    get stats() {
        return this[$e1220c8050c9ebc4$var$kStats];
    }
    async [$e1220c8050c9ebc4$require$kClose]() {
        if (this[$e1220c8050c9ebc4$var$kQueue].isEmpty()) return Promise.all(this[$e1220c8050c9ebc4$var$kClients].map((c)=>c.close()));
        else return new Promise((resolve)=>{
            this[$e1220c8050c9ebc4$var$kClosedResolve] = resolve;
        });
    }
    async [$e1220c8050c9ebc4$require$kDestroy](err) {
        while(true){
            const item = this[$e1220c8050c9ebc4$var$kQueue].shift();
            if (!item) break;
            item.handler.onError(err);
        }
        return Promise.all(this[$e1220c8050c9ebc4$var$kClients].map((c)=>c.destroy(err)));
    }
    [$e1220c8050c9ebc4$require$kDispatch](opts, handler) {
        const dispatcher = this[$e1220c8050c9ebc4$var$kGetDispatcher]();
        if (!dispatcher) {
            this[$e1220c8050c9ebc4$var$kNeedDrain] = true;
            this[$e1220c8050c9ebc4$var$kQueue].push({
                opts: opts,
                handler: handler
            });
            this[$e1220c8050c9ebc4$require$kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
            dispatcher[$e1220c8050c9ebc4$var$kNeedDrain] = true;
            this[$e1220c8050c9ebc4$var$kNeedDrain] = !this[$e1220c8050c9ebc4$var$kGetDispatcher]();
        }
        return !this[$e1220c8050c9ebc4$var$kNeedDrain];
    }
    [$e1220c8050c9ebc4$var$kAddClient](client) {
        client.on("drain", this[$e1220c8050c9ebc4$var$kOnDrain]).on("connect", this[$e1220c8050c9ebc4$var$kOnConnect]).on("disconnect", this[$e1220c8050c9ebc4$var$kOnDisconnect]).on("connectionError", this[$e1220c8050c9ebc4$var$kOnConnectionError]);
        this[$e1220c8050c9ebc4$var$kClients].push(client);
        if (this[$e1220c8050c9ebc4$var$kNeedDrain]) process.nextTick(()=>{
            if (this[$e1220c8050c9ebc4$var$kNeedDrain]) this[$e1220c8050c9ebc4$var$kOnDrain](client[$e1220c8050c9ebc4$require$kUrl], [
                this,
                client
            ]);
        });
        return this;
    }
    [$e1220c8050c9ebc4$var$kRemoveClient](client) {
        client.close(()=>{
            const idx = this[$e1220c8050c9ebc4$var$kClients].indexOf(client);
            if (idx !== -1) this[$e1220c8050c9ebc4$var$kClients].splice(idx, 1);
        });
        this[$e1220c8050c9ebc4$var$kNeedDrain] = this[$e1220c8050c9ebc4$var$kClients].some((dispatcher)=>!dispatcher[$e1220c8050c9ebc4$var$kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
    }
}
module.exports = {
    PoolBase: $e1220c8050c9ebc4$var$PoolBase,
    kClients: $e1220c8050c9ebc4$var$kClients,
    kNeedDrain: $e1220c8050c9ebc4$var$kNeedDrain,
    kAddClient: $e1220c8050c9ebc4$var$kAddClient,
    kRemoveClient: $e1220c8050c9ebc4$var$kRemoveClient,
    kGetDispatcher: $e1220c8050c9ebc4$var$kGetDispatcher
};

});
parcelRegister("fgeV6", function(module, exports) {
/* eslint-disable */ "use strict";
// Extracted from node/lib/internal/fixed_queue.js
// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
const $b1c3ec71007b4590$var$kSize = 2048;
const $b1c3ec71007b4590$var$kMask = $b1c3ec71007b4590$var$kSize - 1;
// The FixedQueue is implemented as a singly-linked list of fixed-size
// circular buffers. It looks something like this:
//
//  head                                                       tail
//    |                                                          |
//    v                                                          v
// +-----------+ <-----\       +-----------+ <------\         +-----------+
// |  [null]   |        \----- |   next    |         \------- |   next    |
// +-----------+               +-----------+                  +-----------+
// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |       bottom --> |   item    |
// |   item    |               |   item    |                  |   item    |
// |    ...    |               |    ...    |                  |    ...    |
// |   item    |               |   item    |                  |   item    |
// |   item    |               |   item    |                  |   item    |
// |  [empty]  | <-- top       |   item    |                  |   item    |
// |  [empty]  |               |   item    |                  |   item    |
// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
// +-----------+               +-----------+                  +-----------+
//
// Or, if there is only one circular buffer, it looks something
// like either of these:
//
//  head   tail                                 head   tail
//    |     |                                     |     |
//    v     v                                     v     v
// +-----------+                               +-----------+
// |  [null]   |                               |  [null]   |
// +-----------+                               +-----------+
// |  [empty]  |                               |   item    |
// |  [empty]  |                               |   item    |
// |   item    | <-- bottom            top --> |  [empty]  |
// |   item    |                               |  [empty]  |
// |  [empty]  | <-- top            bottom --> |   item    |
// |  [empty]  |                               |   item    |
// +-----------+                               +-----------+
//
// Adding a value means moving `top` forward by one, removing means
// moving `bottom` forward by one. After reaching the end, the queue
// wraps around.
//
// When `top === bottom` the current queue is empty and when
// `top + 1 === bottom` it's full. This wastes a single space of storage
// but allows much quicker checks.
class $b1c3ec71007b4590$var$FixedCircularBuffer {
    constructor(){
        this.bottom = 0;
        this.top = 0;
        this.list = new Array($b1c3ec71007b4590$var$kSize);
        this.next = null;
    }
    isEmpty() {
        return this.top === this.bottom;
    }
    isFull() {
        return (this.top + 1 & $b1c3ec71007b4590$var$kMask) === this.bottom;
    }
    push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & $b1c3ec71007b4590$var$kMask;
    }
    shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === undefined) return null;
        this.list[this.bottom] = undefined;
        this.bottom = this.bottom + 1 & $b1c3ec71007b4590$var$kMask;
        return nextItem;
    }
}
module.exports = class FixedQueue {
    constructor(){
        this.head = this.tail = new $b1c3ec71007b4590$var$FixedCircularBuffer();
    }
    isEmpty() {
        return this.head.isEmpty();
    }
    push(data) {
        if (this.head.isFull()) // Head is full: Creates a new queue, sets the old queue's `.next` to it,
        // and sets it as the new main queue.
        this.head = this.head.next = new $b1c3ec71007b4590$var$FixedCircularBuffer();
        this.head.push(data);
    }
    shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) // If there is another queue, it forms the new tail.
        this.tail = tail.next;
        return next;
    }
};

});

parcelRegister("kRy4u", function(module, exports) {

var $lbv7W = parcelRequire("lbv7W");
var $f3032fbf8e562f72$require$kFree = $lbv7W.kFree;
var $f3032fbf8e562f72$require$kConnected = $lbv7W.kConnected;
var $f3032fbf8e562f72$require$kPending = $lbv7W.kPending;
var $f3032fbf8e562f72$require$kQueued = $lbv7W.kQueued;
var $f3032fbf8e562f72$require$kRunning = $lbv7W.kRunning;
var $f3032fbf8e562f72$require$kSize = $lbv7W.kSize;
const $f3032fbf8e562f72$var$kPool = Symbol("pool");
class $f3032fbf8e562f72$var$PoolStats {
    constructor(pool){
        this[$f3032fbf8e562f72$var$kPool] = pool;
    }
    get connected() {
        return this[$f3032fbf8e562f72$var$kPool][$f3032fbf8e562f72$require$kConnected];
    }
    get free() {
        return this[$f3032fbf8e562f72$var$kPool][$f3032fbf8e562f72$require$kFree];
    }
    get pending() {
        return this[$f3032fbf8e562f72$var$kPool][$f3032fbf8e562f72$require$kPending];
    }
    get queued() {
        return this[$f3032fbf8e562f72$var$kPool][$f3032fbf8e562f72$require$kQueued];
    }
    get running() {
        return this[$f3032fbf8e562f72$var$kPool][$f3032fbf8e562f72$require$kRunning];
    }
    get size() {
        return this[$f3032fbf8e562f72$var$kPool][$f3032fbf8e562f72$require$kSize];
    }
}
module.exports = $f3032fbf8e562f72$var$PoolStats;

});



parcelRegister("hvgBA", function(module, exports) {
"use strict";

var $k7roP = parcelRequire("k7roP");
var $cbe2365bc1aaced1$require$BalancedPoolMissingUpstreamError = $k7roP.BalancedPoolMissingUpstreamError;
var $cbe2365bc1aaced1$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $jknpQ = parcelRequire("jknpQ");
var $cbe2365bc1aaced1$require$PoolBase = $jknpQ.PoolBase;
var $cbe2365bc1aaced1$require$kClients = $jknpQ.kClients;
var $cbe2365bc1aaced1$require$kNeedDrain = $jknpQ.kNeedDrain;
var $cbe2365bc1aaced1$require$kAddClient = $jknpQ.kAddClient;
var $cbe2365bc1aaced1$require$kRemoveClient = $jknpQ.kRemoveClient;
var $cbe2365bc1aaced1$require$kGetDispatcher = $jknpQ.kGetDispatcher;

var $fNXn9 = parcelRequire("fNXn9");

var $lbv7W = parcelRequire("lbv7W");
var $cbe2365bc1aaced1$require$kUrl = $lbv7W.kUrl;
var $cbe2365bc1aaced1$require$kInterceptors = $lbv7W.kInterceptors;

var $3zyxC = parcelRequire("3zyxC");
var $cbe2365bc1aaced1$require$parseOrigin = $3zyxC.parseOrigin;
const $cbe2365bc1aaced1$var$kFactory = Symbol("factory");
const $cbe2365bc1aaced1$var$kOptions = Symbol("options");
const $cbe2365bc1aaced1$var$kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
const $cbe2365bc1aaced1$var$kCurrentWeight = Symbol("kCurrentWeight");
const $cbe2365bc1aaced1$var$kIndex = Symbol("kIndex");
const $cbe2365bc1aaced1$var$kWeight = Symbol("kWeight");
const $cbe2365bc1aaced1$var$kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
const $cbe2365bc1aaced1$var$kErrorPenalty = Symbol("kErrorPenalty");
function $cbe2365bc1aaced1$var$getGreatestCommonDivisor(a, b) {
    if (b === 0) return a;
    return $cbe2365bc1aaced1$var$getGreatestCommonDivisor(b, a % b);
}
function $cbe2365bc1aaced1$var$defaultFactory(origin, opts) {
    return new $fNXn9(origin, opts);
}
class $cbe2365bc1aaced1$var$BalancedPool extends $cbe2365bc1aaced1$require$PoolBase {
    constructor(upstreams = [], { factory: factory = $cbe2365bc1aaced1$var$defaultFactory, ...opts } = {}){
        super();
        this[$cbe2365bc1aaced1$var$kOptions] = opts;
        this[$cbe2365bc1aaced1$var$kIndex] = -1;
        this[$cbe2365bc1aaced1$var$kCurrentWeight] = 0;
        this[$cbe2365bc1aaced1$var$kMaxWeightPerServer] = this[$cbe2365bc1aaced1$var$kOptions].maxWeightPerServer || 100;
        this[$cbe2365bc1aaced1$var$kErrorPenalty] = this[$cbe2365bc1aaced1$var$kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) upstreams = [
            upstreams
        ];
        if (typeof factory !== "function") throw new $cbe2365bc1aaced1$require$InvalidArgumentError("factory must be a function.");
        this[$cbe2365bc1aaced1$require$kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[$cbe2365bc1aaced1$var$kFactory] = factory;
        for (const upstream of upstreams)this.addUpstream(upstream);
        this._updateBalancedPoolStats();
    }
    addUpstream(upstream) {
        const upstreamOrigin = $cbe2365bc1aaced1$require$parseOrigin(upstream).origin;
        if (this[$cbe2365bc1aaced1$require$kClients].find((pool)=>pool[$cbe2365bc1aaced1$require$kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) return this;
        const pool = this[$cbe2365bc1aaced1$var$kFactory](upstreamOrigin, Object.assign({}, this[$cbe2365bc1aaced1$var$kOptions]));
        this[$cbe2365bc1aaced1$require$kAddClient](pool);
        pool.on("connect", ()=>{
            pool[$cbe2365bc1aaced1$var$kWeight] = Math.min(this[$cbe2365bc1aaced1$var$kMaxWeightPerServer], pool[$cbe2365bc1aaced1$var$kWeight] + this[$cbe2365bc1aaced1$var$kErrorPenalty]);
        });
        pool.on("connectionError", ()=>{
            pool[$cbe2365bc1aaced1$var$kWeight] = Math.max(1, pool[$cbe2365bc1aaced1$var$kWeight] - this[$cbe2365bc1aaced1$var$kErrorPenalty]);
            this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args)=>{
            const err = args[2];
            if (err && err.code === "UND_ERR_SOCKET") {
                // decrease the weight of the pool.
                pool[$cbe2365bc1aaced1$var$kWeight] = Math.max(1, pool[$cbe2365bc1aaced1$var$kWeight] - this[$cbe2365bc1aaced1$var$kErrorPenalty]);
                this._updateBalancedPoolStats();
            }
        });
        for (const client of this[$cbe2365bc1aaced1$require$kClients])client[$cbe2365bc1aaced1$var$kWeight] = this[$cbe2365bc1aaced1$var$kMaxWeightPerServer];
        this._updateBalancedPoolStats();
        return this;
    }
    _updateBalancedPoolStats() {
        this[$cbe2365bc1aaced1$var$kGreatestCommonDivisor] = this[$cbe2365bc1aaced1$require$kClients].map((p)=>p[$cbe2365bc1aaced1$var$kWeight]).reduce($cbe2365bc1aaced1$var$getGreatestCommonDivisor, 0);
    }
    removeUpstream(upstream) {
        const upstreamOrigin = $cbe2365bc1aaced1$require$parseOrigin(upstream).origin;
        const pool = this[$cbe2365bc1aaced1$require$kClients].find((pool)=>pool[$cbe2365bc1aaced1$require$kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);
        if (pool) this[$cbe2365bc1aaced1$require$kRemoveClient](pool);
        return this;
    }
    get upstreams() {
        return this[$cbe2365bc1aaced1$require$kClients].filter((dispatcher)=>dispatcher.closed !== true && dispatcher.destroyed !== true).map((p)=>p[$cbe2365bc1aaced1$require$kUrl].origin);
    }
    [$cbe2365bc1aaced1$require$kGetDispatcher]() {
        // We validate that pools is greater than 0,
        // otherwise we would have to wait until an upstream
        // is added, which might never happen.
        if (this[$cbe2365bc1aaced1$require$kClients].length === 0) throw new $cbe2365bc1aaced1$require$BalancedPoolMissingUpstreamError();
        const dispatcher = this[$cbe2365bc1aaced1$require$kClients].find((dispatcher)=>!dispatcher[$cbe2365bc1aaced1$require$kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
        if (!dispatcher) return;
        const allClientsBusy = this[$cbe2365bc1aaced1$require$kClients].map((pool)=>pool[$cbe2365bc1aaced1$require$kNeedDrain]).reduce((a, b)=>a && b, true);
        if (allClientsBusy) return;
        let counter = 0;
        let maxWeightIndex = this[$cbe2365bc1aaced1$require$kClients].findIndex((pool)=>!pool[$cbe2365bc1aaced1$require$kNeedDrain]);
        while(counter++ < this[$cbe2365bc1aaced1$require$kClients].length){
            this[$cbe2365bc1aaced1$var$kIndex] = (this[$cbe2365bc1aaced1$var$kIndex] + 1) % this[$cbe2365bc1aaced1$require$kClients].length;
            const pool = this[$cbe2365bc1aaced1$require$kClients][this[$cbe2365bc1aaced1$var$kIndex]];
            // find pool index with the largest weight
            if (pool[$cbe2365bc1aaced1$var$kWeight] > this[$cbe2365bc1aaced1$require$kClients][maxWeightIndex][$cbe2365bc1aaced1$var$kWeight] && !pool[$cbe2365bc1aaced1$require$kNeedDrain]) maxWeightIndex = this[$cbe2365bc1aaced1$var$kIndex];
            // decrease the current weight every `this[kClients].length`.
            if (this[$cbe2365bc1aaced1$var$kIndex] === 0) {
                // Set the current weight to the next lower weight.
                this[$cbe2365bc1aaced1$var$kCurrentWeight] = this[$cbe2365bc1aaced1$var$kCurrentWeight] - this[$cbe2365bc1aaced1$var$kGreatestCommonDivisor];
                if (this[$cbe2365bc1aaced1$var$kCurrentWeight] <= 0) this[$cbe2365bc1aaced1$var$kCurrentWeight] = this[$cbe2365bc1aaced1$var$kMaxWeightPerServer];
            }
            if (pool[$cbe2365bc1aaced1$var$kWeight] >= this[$cbe2365bc1aaced1$var$kCurrentWeight] && !pool[$cbe2365bc1aaced1$require$kNeedDrain]) return pool;
        }
        this[$cbe2365bc1aaced1$var$kCurrentWeight] = this[$cbe2365bc1aaced1$require$kClients][maxWeightIndex][$cbe2365bc1aaced1$var$kWeight];
        this[$cbe2365bc1aaced1$var$kIndex] = maxWeightIndex;
        return this[$cbe2365bc1aaced1$require$kClients][maxWeightIndex];
    }
}
module.exports = $cbe2365bc1aaced1$var$BalancedPool;

});

parcelRegister("5HQxx", function(module, exports) {
"use strict";

var $k7roP = parcelRequire("k7roP");
var $4279b938effb8a63$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $lbv7W = parcelRequire("lbv7W");
var $4279b938effb8a63$require$kClients = $lbv7W.kClients;
var $4279b938effb8a63$require$kRunning = $lbv7W.kRunning;
var $4279b938effb8a63$require$kClose = $lbv7W.kClose;
var $4279b938effb8a63$require$kDestroy = $lbv7W.kDestroy;
var $4279b938effb8a63$require$kDispatch = $lbv7W.kDispatch;
var $4279b938effb8a63$require$kInterceptors = $lbv7W.kInterceptors;

var $rZcCt = parcelRequire("rZcCt");

var $fNXn9 = parcelRequire("fNXn9");

var $9S8MD = parcelRequire("9S8MD");

var $3zyxC = parcelRequire("3zyxC");

var $9sNdt = parcelRequire("9sNdt");

const { WeakRef: $4279b938effb8a63$var$WeakRef, FinalizationRegistry: $4279b938effb8a63$var$FinalizationRegistry } = (parcelRequire("j66Rt"))();
const $4279b938effb8a63$var$kOnConnect = Symbol("onConnect");
const $4279b938effb8a63$var$kOnDisconnect = Symbol("onDisconnect");
const $4279b938effb8a63$var$kOnConnectionError = Symbol("onConnectionError");
const $4279b938effb8a63$var$kMaxRedirections = Symbol("maxRedirections");
const $4279b938effb8a63$var$kOnDrain = Symbol("onDrain");
const $4279b938effb8a63$var$kFactory = Symbol("factory");
const $4279b938effb8a63$var$kFinalizer = Symbol("finalizer");
const $4279b938effb8a63$var$kOptions = Symbol("options");
function $4279b938effb8a63$var$defaultFactory(origin, opts) {
    return opts && opts.connections === 1 ? new $9S8MD(origin, opts) : new $fNXn9(origin, opts);
}
class $4279b938effb8a63$var$Agent extends $rZcCt {
    constructor({ factory: factory = $4279b938effb8a63$var$defaultFactory, maxRedirections: maxRedirections = 0, connect: connect, ...options } = {}){
        super();
        if (typeof factory !== "function") throw new $4279b938effb8a63$require$InvalidArgumentError("factory must be a function.");
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") throw new $4279b938effb8a63$require$InvalidArgumentError("connect must be a function or an object");
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new $4279b938effb8a63$require$InvalidArgumentError("maxRedirections must be a positive number");
        if (connect && typeof connect !== "function") connect = {
            ...connect
        };
        this[$4279b938effb8a63$require$kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [
            $9sNdt({
                maxRedirections: maxRedirections
            })
        ];
        this[$4279b938effb8a63$var$kOptions] = {
            ...$3zyxC.deepClone(options),
            connect: connect
        };
        this[$4279b938effb8a63$var$kOptions].interceptors = options.interceptors ? {
            ...options.interceptors
        } : undefined;
        this[$4279b938effb8a63$var$kMaxRedirections] = maxRedirections;
        this[$4279b938effb8a63$var$kFactory] = factory;
        this[$4279b938effb8a63$require$kClients] = new Map();
        this[$4279b938effb8a63$var$kFinalizer] = new $4279b938effb8a63$var$FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ (key)=>{
            const ref = this[$4279b938effb8a63$require$kClients].get(key);
            if (ref !== undefined && ref.deref() === undefined) this[$4279b938effb8a63$require$kClients].delete(key);
        });
        const agent = this;
        this[$4279b938effb8a63$var$kOnDrain] = (origin, targets)=>{
            agent.emit("drain", origin, [
                agent,
                ...targets
            ]);
        };
        this[$4279b938effb8a63$var$kOnConnect] = (origin, targets)=>{
            agent.emit("connect", origin, [
                agent,
                ...targets
            ]);
        };
        this[$4279b938effb8a63$var$kOnDisconnect] = (origin, targets, err)=>{
            agent.emit("disconnect", origin, [
                agent,
                ...targets
            ], err);
        };
        this[$4279b938effb8a63$var$kOnConnectionError] = (origin, targets, err)=>{
            agent.emit("connectionError", origin, [
                agent,
                ...targets
            ], err);
        };
    }
    get [$4279b938effb8a63$require$kRunning]() {
        let ret = 0;
        for (const ref of this[$4279b938effb8a63$require$kClients].values()){
            const client = ref.deref();
            /* istanbul ignore next: gc is undeterministic */ if (client) ret += client[$4279b938effb8a63$require$kRunning];
        }
        return ret;
    }
    [$4279b938effb8a63$require$kDispatch](opts, handler) {
        let key;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key = String(opts.origin);
        else throw new $4279b938effb8a63$require$InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        const ref = this[$4279b938effb8a63$require$kClients].get(key);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
            dispatcher = this[$4279b938effb8a63$var$kFactory](opts.origin, this[$4279b938effb8a63$var$kOptions]).on("drain", this[$4279b938effb8a63$var$kOnDrain]).on("connect", this[$4279b938effb8a63$var$kOnConnect]).on("disconnect", this[$4279b938effb8a63$var$kOnDisconnect]).on("connectionError", this[$4279b938effb8a63$var$kOnConnectionError]);
            this[$4279b938effb8a63$require$kClients].set(key, new $4279b938effb8a63$var$WeakRef(dispatcher));
            this[$4279b938effb8a63$var$kFinalizer].register(dispatcher, key);
        }
        return dispatcher.dispatch(opts, handler);
    }
    async [$4279b938effb8a63$require$kClose]() {
        const closePromises = [];
        for (const ref of this[$4279b938effb8a63$require$kClients].values()){
            const client = ref.deref();
            /* istanbul ignore else: gc is undeterministic */ if (client) closePromises.push(client.close());
        }
        await Promise.all(closePromises);
    }
    async [$4279b938effb8a63$require$kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[$4279b938effb8a63$require$kClients].values()){
            const client = ref.deref();
            /* istanbul ignore else: gc is undeterministic */ if (client) destroyPromises.push(client.destroy(err));
        }
        await Promise.all(destroyPromises);
    }
}
module.exports = $4279b938effb8a63$var$Agent;

});
parcelRegister("j66Rt", function(module, exports) {
"use strict";

var $lbv7W = parcelRequire("lbv7W");
var $de73e6670bb1ffc3$require$kConnected = $lbv7W.kConnected;
var $de73e6670bb1ffc3$require$kSize = $lbv7W.kSize;
class $de73e6670bb1ffc3$var$CompatWeakRef {
    constructor(value){
        this.value = value;
    }
    deref() {
        return this.value[$de73e6670bb1ffc3$require$kConnected] === 0 && this.value[$de73e6670bb1ffc3$require$kSize] === 0 ? undefined : this.value;
    }
}
class $de73e6670bb1ffc3$var$CompatFinalizer {
    constructor(finalizer){
        this.finalizer = finalizer;
    }
    register(dispatcher, key) {
        if (dispatcher.on) dispatcher.on("disconnect", ()=>{
            if (dispatcher[$de73e6670bb1ffc3$require$kConnected] === 0 && dispatcher[$de73e6670bb1ffc3$require$kSize] === 0) this.finalizer(key);
        });
    }
}
module.exports = function() {
    // FIXME: remove workaround when the Node bug is fixed
    // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
    if (process.env.NODE_V8_COVERAGE) return {
        WeakRef: $de73e6670bb1ffc3$var$CompatWeakRef,
        FinalizationRegistry: $de73e6670bb1ffc3$var$CompatFinalizer
    };
    return {
        WeakRef: $parcel$global.WeakRef || $de73e6670bb1ffc3$var$CompatWeakRef,
        FinalizationRegistry: $parcel$global.FinalizationRegistry || $de73e6670bb1ffc3$var$CompatFinalizer
    };
};

});


parcelRegister("2mr52", function(module, exports) {

$parcel$export(module.exports, "request", () => $1b82a46f19276f1d$export$b5fe3f66a567bec0, (v) => $1b82a46f19276f1d$export$b5fe3f66a567bec0 = v);
$parcel$export(module.exports, "stream", () => $1b82a46f19276f1d$export$4938110305e6185f, (v) => $1b82a46f19276f1d$export$4938110305e6185f = v);
$parcel$export(module.exports, "pipeline", () => $1b82a46f19276f1d$export$43f28b24e1eb8181, (v) => $1b82a46f19276f1d$export$43f28b24e1eb8181 = v);
$parcel$export(module.exports, "upgrade", () => $1b82a46f19276f1d$export$ba387509dbaf942e, (v) => $1b82a46f19276f1d$export$ba387509dbaf942e = v);
$parcel$export(module.exports, "connect", () => $1b82a46f19276f1d$export$64605811ab45167f, (v) => $1b82a46f19276f1d$export$64605811ab45167f = v);
var $1b82a46f19276f1d$export$b5fe3f66a567bec0;
var $1b82a46f19276f1d$export$4938110305e6185f;
var $1b82a46f19276f1d$export$43f28b24e1eb8181;
var $1b82a46f19276f1d$export$ba387509dbaf942e;
var $1b82a46f19276f1d$export$64605811ab45167f;
"use strict";

$1b82a46f19276f1d$export$b5fe3f66a567bec0 = (parcelRequire("5ucE8"));

$1b82a46f19276f1d$export$4938110305e6185f = (parcelRequire("ek91T"));

$1b82a46f19276f1d$export$43f28b24e1eb8181 = (parcelRequire("4rK39"));

$1b82a46f19276f1d$export$ba387509dbaf942e = (parcelRequire("hY2vq"));

$1b82a46f19276f1d$export$64605811ab45167f = (parcelRequire("7PuPT"));

});
parcelRegister("5ucE8", function(module, exports) {
"use strict";

var $dpbpL = parcelRequire("dpbpL");

var $k7roP = parcelRequire("k7roP");
var $3fe990671a15b5ab$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $3fe990671a15b5ab$require$RequestAbortedError = $k7roP.RequestAbortedError;

var $3zyxC = parcelRequire("3zyxC");

var $2RC70 = parcelRequire("2RC70");
var $3fe990671a15b5ab$require$getResolveErrorBodyCallback = $2RC70.getResolveErrorBodyCallback;

var $3fe990671a15b5ab$require$AsyncResource = $3B1P3$async_hooks.AsyncResource;

var $3ghv0 = parcelRequire("3ghv0");
var $3fe990671a15b5ab$require$addSignal = $3ghv0.addSignal;
var $3fe990671a15b5ab$require$removeSignal = $3ghv0.removeSignal;
class $3fe990671a15b5ab$var$RequestHandler extends $3fe990671a15b5ab$require$AsyncResource {
    constructor(opts, callback){
        if (!opts || typeof opts !== "object") throw new $3fe990671a15b5ab$require$InvalidArgumentError("invalid opts");
        const { signal: signal, method: method, opaque: opaque, body: body, onInfo: onInfo, responseHeaders: responseHeaders, throwOnError: throwOnError, highWaterMark: highWaterMark } = opts;
        try {
            if (typeof callback !== "function") throw new $3fe990671a15b5ab$require$InvalidArgumentError("invalid callback");
            if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new $3fe990671a15b5ab$require$InvalidArgumentError("invalid highWaterMark");
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $3fe990671a15b5ab$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            if (method === "CONNECT") throw new $3fe990671a15b5ab$require$InvalidArgumentError("invalid method");
            if (onInfo && typeof onInfo !== "function") throw new $3fe990671a15b5ab$require$InvalidArgumentError("invalid onInfo callback");
            super("UNDICI_REQUEST");
        } catch (err) {
            if ($3zyxC.isStream(body)) $3zyxC.destroy(body.on("error", $3zyxC.nop), err);
            throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if ($3zyxC.isStream(body)) body.on("error", (err)=>{
            this.onError(err);
        });
        $3fe990671a15b5ab$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $3fe990671a15b5ab$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { callback: callback, opaque: opaque, abort: abort, context: context, responseHeaders: responseHeaders, highWaterMark: highWaterMark } = this;
        const headers = responseHeaders === "raw" ? $3zyxC.parseRawHeaders(rawHeaders) : $3zyxC.parseHeaders(rawHeaders);
        if (statusCode < 200) {
            if (this.onInfo) this.onInfo({
                statusCode: statusCode,
                headers: headers
            });
            return;
        }
        const parsedHeaders = responseHeaders === "raw" ? $3zyxC.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        const body = new $dpbpL({
            resume: resume,
            abort: abort,
            contentType: contentType,
            highWaterMark: highWaterMark
        });
        this.callback = null;
        this.res = body;
        if (callback !== null) {
            if (this.throwOnError && statusCode >= 400) this.runInAsyncScope($3fe990671a15b5ab$require$getResolveErrorBodyCallback, null, {
                callback: callback,
                body: body,
                contentType: contentType,
                statusCode: statusCode,
                statusMessage: statusMessage,
                headers: headers
            });
            else this.runInAsyncScope(callback, null, null, {
                statusCode: statusCode,
                headers: headers,
                trailers: this.trailers,
                opaque: opaque,
                body: body,
                context: context
            });
        }
    }
    onData(chunk) {
        const { res: res } = this;
        return res.push(chunk);
    }
    onComplete(trailers) {
        const { res: res } = this;
        $3fe990671a15b5ab$require$removeSignal(this);
        $3zyxC.parseHeaders(trailers, this.trailers);
        res.push(null);
    }
    onError(err) {
        const { res: res, callback: callback, body: body, opaque: opaque } = this;
        $3fe990671a15b5ab$require$removeSignal(this);
        if (callback) {
            // TODO: Does this need queueMicrotask?
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
        if (res) {
            this.res = null;
            // Ensure all queued handlers are invoked before destroying res.
            queueMicrotask(()=>{
                $3zyxC.destroy(res, err);
            });
        }
        if (body) {
            this.body = null;
            $3zyxC.destroy(body, err);
        }
    }
}
function $3fe990671a15b5ab$var$request(opts, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $3fe990671a15b5ab$var$request.call(this, opts, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        this.dispatch(opts, new $3fe990671a15b5ab$var$RequestHandler(opts, callback));
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $3fe990671a15b5ab$var$request;
module.exports.RequestHandler = $3fe990671a15b5ab$var$RequestHandler;

});
parcelRegister("dpbpL", function(module, exports) {
// Ported from https://github.com/nodejs/undici/pull/907
"use strict";


var $9c2676dbc39844cf$require$Readable = $3B1P3$stream.Readable;

var $k7roP = parcelRequire("k7roP");
var $9c2676dbc39844cf$require$RequestAbortedError = $k7roP.RequestAbortedError;
var $9c2676dbc39844cf$require$NotSupportedError = $k7roP.NotSupportedError;
var $9c2676dbc39844cf$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $3zyxC = parcelRequire("3zyxC");

var $3zyxC = parcelRequire("3zyxC");
var $9c2676dbc39844cf$require$ReadableStreamFrom = $3zyxC.ReadableStreamFrom;
var $9c2676dbc39844cf$require$toUSVString = $3zyxC.toUSVString;
let $9c2676dbc39844cf$var$Blob;
const $9c2676dbc39844cf$var$kConsume = Symbol("kConsume");
const $9c2676dbc39844cf$var$kReading = Symbol("kReading");
const $9c2676dbc39844cf$var$kBody = Symbol("kBody");
const $9c2676dbc39844cf$var$kAbort = Symbol("abort");
const $9c2676dbc39844cf$var$kContentType = Symbol("kContentType");
const $9c2676dbc39844cf$var$noop = ()=>{};
module.exports = class BodyReadable extends $9c2676dbc39844cf$require$Readable {
    constructor({ resume: resume, abort: abort, contentType: contentType = "", highWaterMark: highWaterMark = 65536 // Same as nodejs fs streams.
     }){
        super({
            autoDestroy: true,
            read: resume,
            highWaterMark: highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[$9c2676dbc39844cf$var$kAbort] = abort;
        this[$9c2676dbc39844cf$var$kConsume] = null;
        this[$9c2676dbc39844cf$var$kBody] = null;
        this[$9c2676dbc39844cf$var$kContentType] = contentType;
        // Is stream being consumed through Readable API?
        // This is an optimization so that we avoid checking
        // for 'data' and 'readable' listeners in the hot path
        // inside push().
        this[$9c2676dbc39844cf$var$kReading] = false;
    }
    destroy(err) {
        if (this.destroyed) // Node < 16
        return this;
        if (!err && !this._readableState.endEmitted) err = new $9c2676dbc39844cf$require$RequestAbortedError();
        if (err) this[$9c2676dbc39844cf$var$kAbort]();
        return super.destroy(err);
    }
    emit(ev, ...args) {
        if (ev === "data") // Node < 16.7
        this._readableState.dataEmitted = true;
        else if (ev === "error") // Node < 16
        this._readableState.errorEmitted = true;
        return super.emit(ev, ...args);
    }
    on(ev, ...args) {
        if (ev === "data" || ev === "readable") this[$9c2676dbc39844cf$var$kReading] = true;
        return super.on(ev, ...args);
    }
    addListener(ev, ...args) {
        return this.on(ev, ...args);
    }
    off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") this[$9c2676dbc39844cf$var$kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        return ret;
    }
    removeListener(ev, ...args) {
        return this.off(ev, ...args);
    }
    push(chunk) {
        if (this[$9c2676dbc39844cf$var$kConsume] && chunk !== null && this.readableLength === 0) {
            $9c2676dbc39844cf$var$consumePush(this[$9c2676dbc39844cf$var$kConsume], chunk);
            return this[$9c2676dbc39844cf$var$kReading] ? super.push(chunk) : true;
        }
        return super.push(chunk);
    }
    // https://fetch.spec.whatwg.org/#dom-body-text
    async text() {
        return $9c2676dbc39844cf$var$consume(this, "text");
    }
    // https://fetch.spec.whatwg.org/#dom-body-json
    async json() {
        return $9c2676dbc39844cf$var$consume(this, "json");
    }
    // https://fetch.spec.whatwg.org/#dom-body-blob
    async blob() {
        return $9c2676dbc39844cf$var$consume(this, "blob");
    }
    // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
    async arrayBuffer() {
        return $9c2676dbc39844cf$var$consume(this, "arrayBuffer");
    }
    // https://fetch.spec.whatwg.org/#dom-body-formdata
    async formData() {
        // TODO: Implement.
        throw new $9c2676dbc39844cf$require$NotSupportedError();
    }
    // https://fetch.spec.whatwg.org/#dom-body-bodyused
    get bodyUsed() {
        return $3zyxC.isDisturbed(this);
    }
    // https://fetch.spec.whatwg.org/#dom-body-body
    get body() {
        if (!this[$9c2676dbc39844cf$var$kBody]) {
            this[$9c2676dbc39844cf$var$kBody] = $9c2676dbc39844cf$require$ReadableStreamFrom(this);
            if (this[$9c2676dbc39844cf$var$kConsume]) {
                // TODO: Is this the best way to force a lock?
                this[$9c2676dbc39844cf$var$kBody].getReader() // Ensure stream is locked.
                ;
                $3B1P3$assert(this[$9c2676dbc39844cf$var$kBody].locked);
            }
        }
        return this[$9c2676dbc39844cf$var$kBody];
    }
    dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) try {
            if (typeof signal !== "object" || !("aborted" in signal)) throw new $9c2676dbc39844cf$require$InvalidArgumentError("signal must be an AbortSignal");
            $3zyxC.throwIfAborted(signal);
        } catch (err) {
            return Promise.reject(err);
        }
        if (this.closed) return Promise.resolve(null);
        return new Promise((resolve, reject)=>{
            const signalListenerCleanup = signal ? $3zyxC.addAbortListener(signal, ()=>{
                this.destroy();
            }) : $9c2676dbc39844cf$var$noop;
            this.on("close", function() {
                signalListenerCleanup();
                if (signal && signal.aborted) reject(signal.reason || Object.assign(new Error("The operation was aborted"), {
                    name: "AbortError"
                }));
                else resolve(null);
            }).on("error", $9c2676dbc39844cf$var$noop).on("data", function(chunk) {
                limit -= chunk.length;
                if (limit <= 0) this.destroy();
            }).resume();
        });
    }
};
// https://streams.spec.whatwg.org/#readablestream-locked
function $9c2676dbc39844cf$var$isLocked(self) {
    // Consume is an implicit lock.
    return self[$9c2676dbc39844cf$var$kBody] && self[$9c2676dbc39844cf$var$kBody].locked === true || self[$9c2676dbc39844cf$var$kConsume];
}
// https://fetch.spec.whatwg.org/#body-unusable
function $9c2676dbc39844cf$var$isUnusable(self) {
    return $3zyxC.isDisturbed(self) || $9c2676dbc39844cf$var$isLocked(self);
}
async function $9c2676dbc39844cf$var$consume(stream, type) {
    if ($9c2676dbc39844cf$var$isUnusable(stream)) throw new TypeError("unusable");
    $3B1P3$assert(!stream[$9c2676dbc39844cf$var$kConsume]);
    return new Promise((resolve, reject)=>{
        stream[$9c2676dbc39844cf$var$kConsume] = {
            type: type,
            stream: stream,
            resolve: resolve,
            reject: reject,
            length: 0,
            body: []
        };
        stream.on("error", function(err) {
            $9c2676dbc39844cf$var$consumeFinish(this[$9c2676dbc39844cf$var$kConsume], err);
        }).on("close", function() {
            if (this[$9c2676dbc39844cf$var$kConsume].body !== null) $9c2676dbc39844cf$var$consumeFinish(this[$9c2676dbc39844cf$var$kConsume], new $9c2676dbc39844cf$require$RequestAbortedError());
        });
        process.nextTick($9c2676dbc39844cf$var$consumeStart, stream[$9c2676dbc39844cf$var$kConsume]);
    });
}
function $9c2676dbc39844cf$var$consumeStart(consume) {
    if (consume.body === null) return;
    const { _readableState: state } = consume.stream;
    for (const chunk of state.buffer)$9c2676dbc39844cf$var$consumePush(consume, chunk);
    if (state.endEmitted) $9c2676dbc39844cf$var$consumeEnd(this[$9c2676dbc39844cf$var$kConsume]);
    else consume.stream.on("end", function() {
        $9c2676dbc39844cf$var$consumeEnd(this[$9c2676dbc39844cf$var$kConsume]);
    });
    consume.stream.resume();
    while(consume.stream.read() != null);
}

function $9c2676dbc39844cf$var$consumeEnd(consume) {
    const { type: type, body: body, resolve: resolve, stream: stream, length: length } = consume;
    try {
        if (type === "text") resolve($9c2676dbc39844cf$require$toUSVString(Buffer.concat(body)));
        else if (type === "json") resolve(JSON.parse(Buffer.concat(body)));
        else if (type === "arrayBuffer") {
            const dst = new Uint8Array(length);
            let pos = 0;
            for (const buf of body){
                dst.set(buf, pos);
                pos += buf.byteLength;
            }
            resolve(dst.buffer);
        } else if (type === "blob") {
            if (!$9c2676dbc39844cf$var$Blob) $9c2676dbc39844cf$var$Blob = $9c2676dbc39844cf$import$d04c39d37e012a99$3b660928c86ff55c;
            resolve(new $9c2676dbc39844cf$var$Blob(body, {
                type: stream[$9c2676dbc39844cf$var$kContentType]
            }));
        }
        $9c2676dbc39844cf$var$consumeFinish(consume);
    } catch (err) {
        stream.destroy(err);
    }
}
function $9c2676dbc39844cf$var$consumePush(consume, chunk) {
    consume.length += chunk.length;
    consume.body.push(chunk);
}
function $9c2676dbc39844cf$var$consumeFinish(consume, err) {
    if (consume.body === null) return;
    if (err) consume.reject(err);
    else consume.resolve();
    consume.type = null;
    consume.stream = null;
    consume.resolve = null;
    consume.reject = null;
    consume.length = 0;
    consume.body = null;
}

});

parcelRegister("2RC70", function(module, exports) {


var $k7roP = parcelRequire("k7roP");
var $215e1843b9483d03$require$ResponseStatusCodeError = $k7roP.ResponseStatusCodeError;

var $3zyxC = parcelRequire("3zyxC");
var $215e1843b9483d03$require$toUSVString = $3zyxC.toUSVString;
async function $215e1843b9483d03$var$getResolveErrorBodyCallback({ callback: callback, body: body, contentType: contentType, statusCode: statusCode, statusMessage: statusMessage, headers: headers }) {
    $3B1P3$assert(body);
    let chunks = [];
    let limit = 0;
    for await (const chunk of body){
        chunks.push(chunk);
        limit += chunk.length;
        if (limit > 131072) {
            chunks = null;
            break;
        }
    }
    if (statusCode === 204 || !contentType || !chunks) {
        process.nextTick(callback, new $215e1843b9483d03$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
    }
    try {
        if (contentType.startsWith("application/json")) {
            const payload = JSON.parse($215e1843b9483d03$require$toUSVString(Buffer.concat(chunks)));
            process.nextTick(callback, new $215e1843b9483d03$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
            return;
        }
        if (contentType.startsWith("text/")) {
            const payload = $215e1843b9483d03$require$toUSVString(Buffer.concat(chunks));
            process.nextTick(callback, new $215e1843b9483d03$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
            return;
        }
    } catch (err) {
    // Process in a fallback if error
    }
    process.nextTick(callback, new $215e1843b9483d03$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
}
module.exports = {
    getResolveErrorBodyCallback: $215e1843b9483d03$var$getResolveErrorBodyCallback
};

});

parcelRegister("3ghv0", function(module, exports) {

var $3zyxC = parcelRequire("3zyxC");
var $260070b0e302d22b$require$addAbortListener = $3zyxC.addAbortListener;

var $k7roP = parcelRequire("k7roP");
var $260070b0e302d22b$require$RequestAbortedError = $k7roP.RequestAbortedError;
const $260070b0e302d22b$var$kListener = Symbol("kListener");
const $260070b0e302d22b$var$kSignal = Symbol("kSignal");
function $260070b0e302d22b$var$abort(self) {
    if (self.abort) self.abort();
    else self.onError(new $260070b0e302d22b$require$RequestAbortedError());
}
function $260070b0e302d22b$var$addSignal(self, signal) {
    self[$260070b0e302d22b$var$kSignal] = null;
    self[$260070b0e302d22b$var$kListener] = null;
    if (!signal) return;
    if (signal.aborted) {
        $260070b0e302d22b$var$abort(self);
        return;
    }
    self[$260070b0e302d22b$var$kSignal] = signal;
    self[$260070b0e302d22b$var$kListener] = ()=>{
        $260070b0e302d22b$var$abort(self);
    };
    $260070b0e302d22b$require$addAbortListener(self[$260070b0e302d22b$var$kSignal], self[$260070b0e302d22b$var$kListener]);
}
function $260070b0e302d22b$var$removeSignal(self) {
    if (!self[$260070b0e302d22b$var$kSignal]) return;
    if ("removeEventListener" in self[$260070b0e302d22b$var$kSignal]) self[$260070b0e302d22b$var$kSignal].removeEventListener("abort", self[$260070b0e302d22b$var$kListener]);
    else self[$260070b0e302d22b$var$kSignal].removeListener("abort", self[$260070b0e302d22b$var$kListener]);
    self[$260070b0e302d22b$var$kSignal] = null;
    self[$260070b0e302d22b$var$kListener] = null;
}
module.exports = {
    addSignal: $260070b0e302d22b$var$addSignal,
    removeSignal: $260070b0e302d22b$var$removeSignal
};

});


parcelRegister("ek91T", function(module, exports) {
"use strict";

var $a6d9f00950c354bb$require$finished = $3B1P3$stream.finished;
var $a6d9f00950c354bb$require$PassThrough = $3B1P3$stream.PassThrough;

var $k7roP = parcelRequire("k7roP");
var $a6d9f00950c354bb$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $a6d9f00950c354bb$require$InvalidReturnValueError = $k7roP.InvalidReturnValueError;
var $a6d9f00950c354bb$require$RequestAbortedError = $k7roP.RequestAbortedError;

var $3zyxC = parcelRequire("3zyxC");

var $2RC70 = parcelRequire("2RC70");
var $a6d9f00950c354bb$require$getResolveErrorBodyCallback = $2RC70.getResolveErrorBodyCallback;

var $a6d9f00950c354bb$require$AsyncResource = $3B1P3$async_hooks.AsyncResource;

var $3ghv0 = parcelRequire("3ghv0");
var $a6d9f00950c354bb$require$addSignal = $3ghv0.addSignal;
var $a6d9f00950c354bb$require$removeSignal = $3ghv0.removeSignal;
class $a6d9f00950c354bb$var$StreamHandler extends $a6d9f00950c354bb$require$AsyncResource {
    constructor(opts, factory, callback){
        if (!opts || typeof opts !== "object") throw new $a6d9f00950c354bb$require$InvalidArgumentError("invalid opts");
        const { signal: signal, method: method, opaque: opaque, body: body, onInfo: onInfo, responseHeaders: responseHeaders, throwOnError: throwOnError } = opts;
        try {
            if (typeof callback !== "function") throw new $a6d9f00950c354bb$require$InvalidArgumentError("invalid callback");
            if (typeof factory !== "function") throw new $a6d9f00950c354bb$require$InvalidArgumentError("invalid factory");
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $a6d9f00950c354bb$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            if (method === "CONNECT") throw new $a6d9f00950c354bb$require$InvalidArgumentError("invalid method");
            if (onInfo && typeof onInfo !== "function") throw new $a6d9f00950c354bb$require$InvalidArgumentError("invalid onInfo callback");
            super("UNDICI_STREAM");
        } catch (err) {
            if ($3zyxC.isStream(body)) $3zyxC.destroy(body.on("error", $3zyxC.nop), err);
            throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if ($3zyxC.isStream(body)) body.on("error", (err)=>{
            this.onError(err);
        });
        $a6d9f00950c354bb$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $a6d9f00950c354bb$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory: factory, opaque: opaque, context: context, callback: callback, responseHeaders: responseHeaders } = this;
        const headers = responseHeaders === "raw" ? $3zyxC.parseRawHeaders(rawHeaders) : $3zyxC.parseHeaders(rawHeaders);
        if (statusCode < 200) {
            if (this.onInfo) this.onInfo({
                statusCode: statusCode,
                headers: headers
            });
            return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
            const parsedHeaders = responseHeaders === "raw" ? $3zyxC.parseHeaders(rawHeaders) : headers;
            const contentType = parsedHeaders["content-type"];
            res = new $a6d9f00950c354bb$require$PassThrough();
            this.callback = null;
            this.runInAsyncScope($a6d9f00950c354bb$require$getResolveErrorBodyCallback, null, {
                callback: callback,
                body: res,
                contentType: contentType,
                statusCode: statusCode,
                statusMessage: statusMessage,
                headers: headers
            });
        } else {
            if (factory === null) return;
            res = this.runInAsyncScope(factory, null, {
                statusCode: statusCode,
                headers: headers,
                opaque: opaque,
                context: context
            });
            if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new $a6d9f00950c354bb$require$InvalidReturnValueError("expected Writable");
            // TODO: Avoid finished. It registers an unnecessary amount of listeners.
            $a6d9f00950c354bb$require$finished(res, {
                readable: false
            }, (err)=>{
                const { callback: callback, res: res, opaque: opaque, trailers: trailers, abort: abort } = this;
                this.res = null;
                if (err || !res.readable) $3zyxC.destroy(res, err);
                this.callback = null;
                this.runInAsyncScope(callback, null, err || null, {
                    opaque: opaque,
                    trailers: trailers
                });
                if (err) abort();
            });
        }
        res.on("drain", resume);
        this.res = res;
        const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
    }
    onData(chunk) {
        const { res: res } = this;
        return res ? res.write(chunk) : true;
    }
    onComplete(trailers) {
        const { res: res } = this;
        $a6d9f00950c354bb$require$removeSignal(this);
        if (!res) return;
        this.trailers = $3zyxC.parseHeaders(trailers);
        res.end();
    }
    onError(err) {
        const { res: res, callback: callback, opaque: opaque, body: body } = this;
        $a6d9f00950c354bb$require$removeSignal(this);
        this.factory = null;
        if (res) {
            this.res = null;
            $3zyxC.destroy(res, err);
        } else if (callback) {
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
        if (body) {
            this.body = null;
            $3zyxC.destroy(body, err);
        }
    }
}
function $a6d9f00950c354bb$var$stream(opts, factory, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $a6d9f00950c354bb$var$stream.call(this, opts, factory, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        this.dispatch(opts, new $a6d9f00950c354bb$var$StreamHandler(opts, factory, callback));
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $a6d9f00950c354bb$var$stream;

});

parcelRegister("4rK39", function(module, exports) {
"use strict";

var $33cd678d982544be$require$Readable = $3B1P3$stream.Readable;
var $33cd678d982544be$require$Duplex = $3B1P3$stream.Duplex;
var $33cd678d982544be$require$PassThrough = $3B1P3$stream.PassThrough;

var $k7roP = parcelRequire("k7roP");
var $33cd678d982544be$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $33cd678d982544be$require$InvalidReturnValueError = $k7roP.InvalidReturnValueError;
var $33cd678d982544be$require$RequestAbortedError = $k7roP.RequestAbortedError;

var $3zyxC = parcelRequire("3zyxC");

var $33cd678d982544be$require$AsyncResource = $3B1P3$async_hooks.AsyncResource;

var $3ghv0 = parcelRequire("3ghv0");
var $33cd678d982544be$require$addSignal = $3ghv0.addSignal;
var $33cd678d982544be$require$removeSignal = $3ghv0.removeSignal;

const $33cd678d982544be$var$kResume = Symbol("resume");
class $33cd678d982544be$var$PipelineRequest extends $33cd678d982544be$require$Readable {
    constructor(){
        super({
            autoDestroy: true
        });
        this[$33cd678d982544be$var$kResume] = null;
    }
    _read() {
        const { [$33cd678d982544be$var$kResume]: resume } = this;
        if (resume) {
            this[$33cd678d982544be$var$kResume] = null;
            resume();
        }
    }
    _destroy(err, callback) {
        this._read();
        callback(err);
    }
}
class $33cd678d982544be$var$PipelineResponse extends $33cd678d982544be$require$Readable {
    constructor(resume){
        super({
            autoDestroy: true
        });
        this[$33cd678d982544be$var$kResume] = resume;
    }
    _read() {
        this[$33cd678d982544be$var$kResume]();
    }
    _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) err = new $33cd678d982544be$require$RequestAbortedError();
        callback(err);
    }
}
class $33cd678d982544be$var$PipelineHandler extends $33cd678d982544be$require$AsyncResource {
    constructor(opts, handler){
        if (!opts || typeof opts !== "object") throw new $33cd678d982544be$require$InvalidArgumentError("invalid opts");
        if (typeof handler !== "function") throw new $33cd678d982544be$require$InvalidArgumentError("invalid handler");
        const { signal: signal, method: method, opaque: opaque, onInfo: onInfo, responseHeaders: responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $33cd678d982544be$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        if (method === "CONNECT") throw new $33cd678d982544be$require$InvalidArgumentError("invalid method");
        if (onInfo && typeof onInfo !== "function") throw new $33cd678d982544be$require$InvalidArgumentError("invalid onInfo callback");
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new $33cd678d982544be$var$PipelineRequest().on("error", $3zyxC.nop);
        this.ret = new $33cd678d982544be$require$Duplex({
            readableObjectMode: opts.objectMode,
            autoDestroy: true,
            read: ()=>{
                const { body: body } = this;
                if (body && body.resume) body.resume();
            },
            write: (chunk, encoding, callback)=>{
                const { req: req } = this;
                if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
                else req[$33cd678d982544be$var$kResume] = callback;
            },
            destroy: (err, callback)=>{
                const { body: body, req: req, res: res, ret: ret, abort: abort } = this;
                if (!err && !ret._readableState.endEmitted) err = new $33cd678d982544be$require$RequestAbortedError();
                if (abort && err) abort();
                $3zyxC.destroy(body, err);
                $3zyxC.destroy(req, err);
                $3zyxC.destroy(res, err);
                $33cd678d982544be$require$removeSignal(this);
                callback(err);
            }
        }).on("prefinish", ()=>{
            const { req: req } = this;
            // Node < 15 does not call _final in same tick.
            req.push(null);
        });
        this.res = null;
        $33cd678d982544be$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        const { ret: ret, res: res } = this;
        $3B1P3$assert(!res, "pipeline cannot be retried");
        if (ret.destroyed) throw new $33cd678d982544be$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume) {
        const { opaque: opaque, handler: handler, context: context } = this;
        if (statusCode < 200) {
            if (this.onInfo) {
                const headers = this.responseHeaders === "raw" ? $3zyxC.parseRawHeaders(rawHeaders) : $3zyxC.parseHeaders(rawHeaders);
                this.onInfo({
                    statusCode: statusCode,
                    headers: headers
                });
            }
            return;
        }
        this.res = new $33cd678d982544be$var$PipelineResponse(resume);
        let body;
        try {
            this.handler = null;
            const headers = this.responseHeaders === "raw" ? $3zyxC.parseRawHeaders(rawHeaders) : $3zyxC.parseHeaders(rawHeaders);
            body = this.runInAsyncScope(handler, null, {
                statusCode: statusCode,
                headers: headers,
                opaque: opaque,
                body: this.res,
                context: context
            });
        } catch (err) {
            this.res.on("error", $3zyxC.nop);
            throw err;
        }
        if (!body || typeof body.on !== "function") throw new $33cd678d982544be$require$InvalidReturnValueError("expected Readable");
        body.on("data", (chunk)=>{
            const { ret: ret, body: body } = this;
            if (!ret.push(chunk) && body.pause) body.pause();
        }).on("error", (err)=>{
            const { ret: ret } = this;
            $3zyxC.destroy(ret, err);
        }).on("end", ()=>{
            const { ret: ret } = this;
            ret.push(null);
        }).on("close", ()=>{
            const { ret: ret } = this;
            if (!ret._readableState.ended) $3zyxC.destroy(ret, new $33cd678d982544be$require$RequestAbortedError());
        });
        this.body = body;
    }
    onData(chunk) {
        const { res: res } = this;
        return res.push(chunk);
    }
    onComplete(trailers) {
        const { res: res } = this;
        res.push(null);
    }
    onError(err) {
        const { ret: ret } = this;
        this.handler = null;
        $3zyxC.destroy(ret, err);
    }
}
function $33cd678d982544be$var$pipeline(opts, handler) {
    try {
        const pipelineHandler = new $33cd678d982544be$var$PipelineHandler(opts, handler);
        this.dispatch({
            ...opts,
            body: pipelineHandler.req
        }, pipelineHandler);
        return pipelineHandler.ret;
    } catch (err) {
        return new $33cd678d982544be$require$PassThrough().destroy(err);
    }
}
module.exports = $33cd678d982544be$var$pipeline;

});

parcelRegister("hY2vq", function(module, exports) {
"use strict";

var $k7roP = parcelRequire("k7roP");
var $d149fbe6dea68ed2$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $d149fbe6dea68ed2$require$RequestAbortedError = $k7roP.RequestAbortedError;
var $d149fbe6dea68ed2$require$SocketError = $k7roP.SocketError;

var $d149fbe6dea68ed2$require$AsyncResource = $3B1P3$async_hooks.AsyncResource;

var $3zyxC = parcelRequire("3zyxC");

var $3ghv0 = parcelRequire("3ghv0");
var $d149fbe6dea68ed2$require$addSignal = $3ghv0.addSignal;
var $d149fbe6dea68ed2$require$removeSignal = $3ghv0.removeSignal;

class $d149fbe6dea68ed2$var$UpgradeHandler extends $d149fbe6dea68ed2$require$AsyncResource {
    constructor(opts, callback){
        if (!opts || typeof opts !== "object") throw new $d149fbe6dea68ed2$require$InvalidArgumentError("invalid opts");
        if (typeof callback !== "function") throw new $d149fbe6dea68ed2$require$InvalidArgumentError("invalid callback");
        const { signal: signal, opaque: opaque, responseHeaders: responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $d149fbe6dea68ed2$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        $d149fbe6dea68ed2$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $d149fbe6dea68ed2$require$RequestAbortedError();
        this.abort = abort;
        this.context = null;
    }
    onHeaders() {
        throw new $d149fbe6dea68ed2$require$SocketError("bad upgrade", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
        const { callback: callback, opaque: opaque, context: context } = this;
        $3B1P3$assert.strictEqual(statusCode, 101);
        $d149fbe6dea68ed2$require$removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? $3zyxC.parseRawHeaders(rawHeaders) : $3zyxC.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
            headers: headers,
            socket: socket,
            opaque: opaque,
            context: context
        });
    }
    onError(err) {
        const { callback: callback, opaque: opaque } = this;
        $d149fbe6dea68ed2$require$removeSignal(this);
        if (callback) {
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
    }
}
function $d149fbe6dea68ed2$var$upgrade(opts, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $d149fbe6dea68ed2$var$upgrade.call(this, opts, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        const upgradeHandler = new $d149fbe6dea68ed2$var$UpgradeHandler(opts, callback);
        this.dispatch({
            ...opts,
            method: opts.method || "GET",
            upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $d149fbe6dea68ed2$var$upgrade;

});

parcelRegister("7PuPT", function(module, exports) {
"use strict";

var $5b35373442862c93$require$AsyncResource = $3B1P3$async_hooks.AsyncResource;

var $k7roP = parcelRequire("k7roP");
var $5b35373442862c93$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $5b35373442862c93$require$RequestAbortedError = $k7roP.RequestAbortedError;
var $5b35373442862c93$require$SocketError = $k7roP.SocketError;

var $3zyxC = parcelRequire("3zyxC");

var $3ghv0 = parcelRequire("3ghv0");
var $5b35373442862c93$require$addSignal = $3ghv0.addSignal;
var $5b35373442862c93$require$removeSignal = $3ghv0.removeSignal;
class $5b35373442862c93$var$ConnectHandler extends $5b35373442862c93$require$AsyncResource {
    constructor(opts, callback){
        if (!opts || typeof opts !== "object") throw new $5b35373442862c93$require$InvalidArgumentError("invalid opts");
        if (typeof callback !== "function") throw new $5b35373442862c93$require$InvalidArgumentError("invalid callback");
        const { signal: signal, opaque: opaque, responseHeaders: responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $5b35373442862c93$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        $5b35373442862c93$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $5b35373442862c93$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders() {
        throw new $5b35373442862c93$require$SocketError("bad connect", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
        const { callback: callback, opaque: opaque, context: context } = this;
        $5b35373442862c93$require$removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        // Indicates is an HTTP2Session
        if (headers != null) headers = this.responseHeaders === "raw" ? $3zyxC.parseRawHeaders(rawHeaders) : $3zyxC.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
            statusCode: statusCode,
            headers: headers,
            socket: socket,
            opaque: opaque,
            context: context
        });
    }
    onError(err) {
        const { callback: callback, opaque: opaque } = this;
        $5b35373442862c93$require$removeSignal(this);
        if (callback) {
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
    }
}
function $5b35373442862c93$var$connect(opts, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $5b35373442862c93$var$connect.call(this, opts, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        const connectHandler = new $5b35373442862c93$var$ConnectHandler(opts, callback);
        this.dispatch({
            ...opts,
            method: "CONNECT"
        }, connectHandler);
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $5b35373442862c93$var$connect;

});


parcelRegister("7nLD2", function(module, exports) {
"use strict";

var $55ffa06d51b2dd25$require$promisify = $3B1P3$util.promisify;

var $9S8MD = parcelRequire("9S8MD");

var $5KfFj = parcelRequire("5KfFj");
var $55ffa06d51b2dd25$require$buildMockDispatch = $5KfFj.buildMockDispatch;

var $j9Suy = parcelRequire("j9Suy");
var $55ffa06d51b2dd25$require$kDispatches = $j9Suy.kDispatches;
var $55ffa06d51b2dd25$require$kMockAgent = $j9Suy.kMockAgent;
var $55ffa06d51b2dd25$require$kClose = $j9Suy.kClose;
var $55ffa06d51b2dd25$require$kOriginalClose = $j9Suy.kOriginalClose;
var $55ffa06d51b2dd25$require$kOrigin = $j9Suy.kOrigin;
var $55ffa06d51b2dd25$require$kOriginalDispatch = $j9Suy.kOriginalDispatch;
var $55ffa06d51b2dd25$require$kConnected = $j9Suy.kConnected;

var $iubtv = parcelRequire("iubtv");
var $55ffa06d51b2dd25$require$MockInterceptor = $iubtv.MockInterceptor;

var $lbv7W = parcelRequire("lbv7W");

var $k7roP = parcelRequire("k7roP");
var $55ffa06d51b2dd25$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
/**
 * MockClient provides an API that extends the Client to influence the mockDispatches.
 */ class $55ffa06d51b2dd25$var$MockClient extends $9S8MD {
    constructor(origin, opts){
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new $55ffa06d51b2dd25$require$InvalidArgumentError("Argument opts.agent must implement Agent");
        this[$55ffa06d51b2dd25$require$kMockAgent] = opts.agent;
        this[$55ffa06d51b2dd25$require$kOrigin] = origin;
        this[$55ffa06d51b2dd25$require$kDispatches] = [];
        this[$55ffa06d51b2dd25$require$kConnected] = 1;
        this[$55ffa06d51b2dd25$require$kOriginalDispatch] = this.dispatch;
        this[$55ffa06d51b2dd25$require$kOriginalClose] = this.close.bind(this);
        this.dispatch = $55ffa06d51b2dd25$require$buildMockDispatch.call(this);
        this.close = this[$55ffa06d51b2dd25$require$kClose];
    }
    get [$lbv7W.kConnected]() {
        return this[$55ffa06d51b2dd25$require$kConnected];
    }
    /**
   * Sets up the base interceptor for mocking replies from undici.
   */ intercept(opts) {
        return new $55ffa06d51b2dd25$require$MockInterceptor(opts, this[$55ffa06d51b2dd25$require$kDispatches]);
    }
    async [$55ffa06d51b2dd25$require$kClose]() {
        await $55ffa06d51b2dd25$require$promisify(this[$55ffa06d51b2dd25$require$kOriginalClose])();
        this[$55ffa06d51b2dd25$require$kConnected] = 0;
        this[$55ffa06d51b2dd25$require$kMockAgent][$lbv7W.kClients].delete(this[$55ffa06d51b2dd25$require$kOrigin]);
    }
}
module.exports = $55ffa06d51b2dd25$var$MockClient;

});
parcelRegister("5KfFj", function(module, exports) {
"use strict";

var $v0cmP = parcelRequire("v0cmP");
var $42ed666ab5daf15a$require$MockNotMatchedError = $v0cmP.MockNotMatchedError;

var $j9Suy = parcelRequire("j9Suy");
var $42ed666ab5daf15a$require$kDispatches = $j9Suy.kDispatches;
var $42ed666ab5daf15a$require$kMockAgent = $j9Suy.kMockAgent;
var $42ed666ab5daf15a$require$kOriginalDispatch = $j9Suy.kOriginalDispatch;
var $42ed666ab5daf15a$require$kOrigin = $j9Suy.kOrigin;
var $42ed666ab5daf15a$require$kGetNetConnect = $j9Suy.kGetNetConnect;

var $3zyxC = parcelRequire("3zyxC");
var $42ed666ab5daf15a$require$buildURL = $3zyxC.buildURL;
var $42ed666ab5daf15a$require$nop = $3zyxC.nop;

var $42ed666ab5daf15a$require$STATUS_CODES = $3B1P3$http.STATUS_CODES;

const { types: { isPromise: $42ed666ab5daf15a$var$isPromise } } = $3B1P3$util;
function $42ed666ab5daf15a$var$matchValue(match, value) {
    if (typeof match === "string") return match === value;
    if (match instanceof RegExp) return match.test(value);
    if (typeof match === "function") return match(value) === true;
    return false;
}
function $42ed666ab5daf15a$var$lowerCaseEntries(headers) {
    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue])=>{
        return [
            headerName.toLocaleLowerCase(),
            headerValue
        ];
    }));
}
/**
 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
 * @param {string} key
 */ function $42ed666ab5daf15a$var$getHeaderByName(headers, key) {
    if (Array.isArray(headers)) {
        for(let i = 0; i < headers.length; i += 2){
            if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i + 1];
        }
        return undefined;
    } else if (typeof headers.get === "function") return headers.get(key);
    else return $42ed666ab5daf15a$var$lowerCaseEntries(headers)[key.toLocaleLowerCase()];
}
/** @param {string[]} headers */ function $42ed666ab5daf15a$var$buildHeadersFromArray(headers) {
    const clone = headers.slice();
    const entries = [];
    for(let index = 0; index < clone.length; index += 2)entries.push([
        clone[index],
        clone[index + 1]
    ]);
    return Object.fromEntries(entries);
}
function $42ed666ab5daf15a$var$matchHeaders(mockDispatch, headers) {
    if (typeof mockDispatch.headers === "function") {
        if (Array.isArray(headers)) headers = $42ed666ab5daf15a$var$buildHeadersFromArray(headers);
        return mockDispatch.headers(headers ? $42ed666ab5daf15a$var$lowerCaseEntries(headers) : {});
    }
    if (typeof mockDispatch.headers === "undefined") return true;
    if (typeof headers !== "object" || typeof mockDispatch.headers !== "object") return false;
    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)){
        const headerValue = $42ed666ab5daf15a$var$getHeaderByName(headers, matchHeaderName);
        if (!$42ed666ab5daf15a$var$matchValue(matchHeaderValue, headerValue)) return false;
    }
    return true;
}
function $42ed666ab5daf15a$var$safeUrl(path) {
    if (typeof path !== "string") return path;
    const pathSegments = path.split("?");
    if (pathSegments.length !== 2) return path;
    const qp = new URLSearchParams(pathSegments.pop());
    qp.sort();
    return [
        ...pathSegments,
        qp.toString()
    ].join("?");
}
function $42ed666ab5daf15a$var$matchKey(mockDispatch, { path: path, method: method, body: body, headers: headers }) {
    const pathMatch = $42ed666ab5daf15a$var$matchValue(mockDispatch.path, path);
    const methodMatch = $42ed666ab5daf15a$var$matchValue(mockDispatch.method, method);
    const bodyMatch = typeof mockDispatch.body !== "undefined" ? $42ed666ab5daf15a$var$matchValue(mockDispatch.body, body) : true;
    const headersMatch = $42ed666ab5daf15a$var$matchHeaders(mockDispatch, headers);
    return pathMatch && methodMatch && bodyMatch && headersMatch;
}
function $42ed666ab5daf15a$var$getResponseData(data) {
    if (Buffer.isBuffer(data)) return data;
    else if (typeof data === "object") return JSON.stringify(data);
    else return data.toString();
}
function $42ed666ab5daf15a$var$getMockDispatch(mockDispatches, key) {
    const basePath = key.query ? $42ed666ab5daf15a$require$buildURL(key.path, key.query) : key.path;
    const resolvedPath = typeof basePath === "string" ? $42ed666ab5daf15a$var$safeUrl(basePath) : basePath;
    // Match path
    let matchedMockDispatches = mockDispatches.filter(({ consumed: consumed })=>!consumed).filter(({ path: path })=>$42ed666ab5daf15a$var$matchValue($42ed666ab5daf15a$var$safeUrl(path), resolvedPath));
    if (matchedMockDispatches.length === 0) throw new $42ed666ab5daf15a$require$MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
    // Match method
    matchedMockDispatches = matchedMockDispatches.filter(({ method: method })=>$42ed666ab5daf15a$var$matchValue(method, key.method));
    if (matchedMockDispatches.length === 0) throw new $42ed666ab5daf15a$require$MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
    // Match body
    matchedMockDispatches = matchedMockDispatches.filter(({ body: body })=>typeof body !== "undefined" ? $42ed666ab5daf15a$var$matchValue(body, key.body) : true);
    if (matchedMockDispatches.length === 0) throw new $42ed666ab5daf15a$require$MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
    // Match headers
    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch)=>$42ed666ab5daf15a$var$matchHeaders(mockDispatch, key.headers));
    if (matchedMockDispatches.length === 0) throw new $42ed666ab5daf15a$require$MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
    return matchedMockDispatches[0];
}
function $42ed666ab5daf15a$var$addMockDispatch(mockDispatches, key, data) {
    const baseData = {
        timesInvoked: 0,
        times: 1,
        persist: false,
        consumed: false
    };
    const replyData = typeof data === "function" ? {
        callback: data
    } : {
        ...data
    };
    const newMockDispatch = {
        ...baseData,
        ...key,
        pending: true,
        data: {
            error: null,
            ...replyData
        }
    };
    mockDispatches.push(newMockDispatch);
    return newMockDispatch;
}
function $42ed666ab5daf15a$var$deleteMockDispatch(mockDispatches, key) {
    const index = mockDispatches.findIndex((dispatch)=>{
        if (!dispatch.consumed) return false;
        return $42ed666ab5daf15a$var$matchKey(dispatch, key);
    });
    if (index !== -1) mockDispatches.splice(index, 1);
}
function $42ed666ab5daf15a$var$buildKey(opts) {
    const { path: path, method: method, body: body, headers: headers, query: query } = opts;
    return {
        path: path,
        method: method,
        body: body,
        headers: headers,
        query: query
    };
}
function $42ed666ab5daf15a$var$generateKeyValues(data) {
    return Object.entries(data).reduce((keyValuePairs, [key, value])=>[
            ...keyValuePairs,
            Buffer.from(`${key}`),
            Array.isArray(value) ? value.map((x)=>Buffer.from(`${x}`)) : Buffer.from(`${value}`)
        ], []);
}
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 * @param {number} statusCode
 */ function $42ed666ab5daf15a$var$getStatusText(statusCode) {
    return $42ed666ab5daf15a$require$STATUS_CODES[statusCode] || "unknown";
}
async function $42ed666ab5daf15a$var$getResponse(body) {
    const buffers = [];
    for await (const data of body)buffers.push(data);
    return Buffer.concat(buffers).toString("utf8");
}
/**
 * Mock dispatch function used to simulate undici dispatches
 */ function $42ed666ab5daf15a$var$mockDispatch(opts, handler) {
    // Get mock dispatch from built key
    const key = $42ed666ab5daf15a$var$buildKey(opts);
    const mockDispatch = $42ed666ab5daf15a$var$getMockDispatch(this[$42ed666ab5daf15a$require$kDispatches], key);
    mockDispatch.timesInvoked++;
    // Here's where we resolve a callback if a callback is present for the dispatch data.
    if (mockDispatch.data.callback) mockDispatch.data = {
        ...mockDispatch.data,
        ...mockDispatch.data.callback(opts)
    };
    // Parse mockDispatch data
    const { data: { statusCode: statusCode, data: data, headers: headers, trailers: trailers, error: error }, delay: delay, persist: persist } = mockDispatch;
    const { timesInvoked: timesInvoked, times: times } = mockDispatch;
    // If it's used up and not persistent, mark as consumed
    mockDispatch.consumed = !persist && timesInvoked >= times;
    mockDispatch.pending = timesInvoked < times;
    // If specified, trigger dispatch error
    if (error !== null) {
        $42ed666ab5daf15a$var$deleteMockDispatch(this[$42ed666ab5daf15a$require$kDispatches], key);
        handler.onError(error);
        return true;
    }
    // Handle the request with a delay if necessary
    if (typeof delay === "number" && delay > 0) setTimeout(()=>{
        handleReply(this[$42ed666ab5daf15a$require$kDispatches]);
    }, delay);
    else handleReply(this[$42ed666ab5daf15a$require$kDispatches]);
    function handleReply(mockDispatches, _data = data) {
        // fetch's HeadersList is a 1D string array
        const optsHeaders = Array.isArray(opts.headers) ? $42ed666ab5daf15a$var$buildHeadersFromArray(opts.headers) : opts.headers;
        const body = typeof _data === "function" ? _data({
            ...opts,
            headers: optsHeaders
        }) : _data;
        // util.types.isPromise is likely needed for jest.
        if ($42ed666ab5daf15a$var$isPromise(body)) {
            // If handleReply is asynchronous, throwing an error
            // in the callback will reject the promise, rather than
            // synchronously throw the error, which breaks some tests.
            // Rather, we wait for the callback to resolve if it is a
            // promise, and then re-run handleReply with the new body.
            body.then((newData)=>handleReply(mockDispatches, newData));
            return;
        }
        const responseData = $42ed666ab5daf15a$var$getResponseData(body);
        const responseHeaders = $42ed666ab5daf15a$var$generateKeyValues(headers);
        const responseTrailers = $42ed666ab5daf15a$var$generateKeyValues(trailers);
        handler.abort = $42ed666ab5daf15a$require$nop;
        handler.onHeaders(statusCode, responseHeaders, resume, $42ed666ab5daf15a$var$getStatusText(statusCode));
        handler.onData(Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        $42ed666ab5daf15a$var$deleteMockDispatch(mockDispatches, key);
    }
    function resume() {}
    return true;
}
function $42ed666ab5daf15a$var$buildMockDispatch() {
    const agent = this[$42ed666ab5daf15a$require$kMockAgent];
    const origin = this[$42ed666ab5daf15a$require$kOrigin];
    const originalDispatch = this[$42ed666ab5daf15a$require$kOriginalDispatch];
    return function dispatch(opts, handler) {
        if (agent.isMockActive) try {
            $42ed666ab5daf15a$var$mockDispatch.call(this, opts, handler);
        } catch (error) {
            if (error instanceof $42ed666ab5daf15a$require$MockNotMatchedError) {
                const netConnect = agent[$42ed666ab5daf15a$require$kGetNetConnect]();
                if (netConnect === false) throw new $42ed666ab5daf15a$require$MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
                if ($42ed666ab5daf15a$var$checkNetConnect(netConnect, origin)) originalDispatch.call(this, opts, handler);
                else throw new $42ed666ab5daf15a$require$MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
            } else throw error;
        }
        else originalDispatch.call(this, opts, handler);
    };
}
function $42ed666ab5daf15a$var$checkNetConnect(netConnect, origin) {
    const url = new URL(origin);
    if (netConnect === true) return true;
    else if (Array.isArray(netConnect) && netConnect.some((matcher)=>$42ed666ab5daf15a$var$matchValue(matcher, url.host))) return true;
    return false;
}
function $42ed666ab5daf15a$var$buildMockOptions(opts) {
    if (opts) {
        const { agent: agent, ...mockOptions } = opts;
        return mockOptions;
    }
}
module.exports = {
    getResponseData: $42ed666ab5daf15a$var$getResponseData,
    getMockDispatch: $42ed666ab5daf15a$var$getMockDispatch,
    addMockDispatch: $42ed666ab5daf15a$var$addMockDispatch,
    deleteMockDispatch: $42ed666ab5daf15a$var$deleteMockDispatch,
    buildKey: $42ed666ab5daf15a$var$buildKey,
    generateKeyValues: $42ed666ab5daf15a$var$generateKeyValues,
    matchValue: $42ed666ab5daf15a$var$matchValue,
    getResponse: $42ed666ab5daf15a$var$getResponse,
    getStatusText: $42ed666ab5daf15a$var$getStatusText,
    mockDispatch: $42ed666ab5daf15a$var$mockDispatch,
    buildMockDispatch: $42ed666ab5daf15a$var$buildMockDispatch,
    checkNetConnect: $42ed666ab5daf15a$var$checkNetConnect,
    buildMockOptions: $42ed666ab5daf15a$var$buildMockOptions,
    getHeaderByName: $42ed666ab5daf15a$var$getHeaderByName
};

});
parcelRegister("v0cmP", function(module, exports) {
"use strict";

var $k7roP = parcelRequire("k7roP");
var $05d30cc706db0cf5$require$UndiciError = $k7roP.UndiciError;
class $05d30cc706db0cf5$var$MockNotMatchedError extends $05d30cc706db0cf5$require$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $05d30cc706db0cf5$var$MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
    }
}
module.exports = {
    MockNotMatchedError: $05d30cc706db0cf5$var$MockNotMatchedError
};

});

parcelRegister("j9Suy", function(module, exports) {
"use strict";
module.exports = {
    kAgent: Symbol("agent"),
    kOptions: Symbol("options"),
    kFactory: Symbol("factory"),
    kDispatches: Symbol("dispatches"),
    kDispatchKey: Symbol("dispatch key"),
    kDefaultHeaders: Symbol("default headers"),
    kDefaultTrailers: Symbol("default trailers"),
    kContentLength: Symbol("content length"),
    kMockAgent: Symbol("mock agent"),
    kMockAgentSet: Symbol("mock agent set"),
    kMockAgentGet: Symbol("mock agent get"),
    kMockDispatch: Symbol("mock dispatch"),
    kClose: Symbol("close"),
    kOriginalClose: Symbol("original agent close"),
    kOrigin: Symbol("origin"),
    kIsMockActive: Symbol("is mock active"),
    kNetConnect: Symbol("net connect"),
    kGetNetConnect: Symbol("get net connect"),
    kConnected: Symbol("connected")
};

});


parcelRegister("iubtv", function(module, exports) {

$parcel$export(module.exports, "MockInterceptor", () => $d753edfeb6197c80$export$fb1b189d8a131a8b, (v) => $d753edfeb6197c80$export$fb1b189d8a131a8b = v);
var $d753edfeb6197c80$export$fb1b189d8a131a8b;
var $d753edfeb6197c80$export$61f2724da7650995;
"use strict";

var $5KfFj = parcelRequire("5KfFj");
var $d753edfeb6197c80$require$getResponseData = $5KfFj.getResponseData;
var $d753edfeb6197c80$require$buildKey = $5KfFj.buildKey;
var $d753edfeb6197c80$require$addMockDispatch = $5KfFj.addMockDispatch;

var $j9Suy = parcelRequire("j9Suy");
var $d753edfeb6197c80$require$kDispatches = $j9Suy.kDispatches;
var $d753edfeb6197c80$require$kDispatchKey = $j9Suy.kDispatchKey;
var $d753edfeb6197c80$require$kDefaultHeaders = $j9Suy.kDefaultHeaders;
var $d753edfeb6197c80$require$kDefaultTrailers = $j9Suy.kDefaultTrailers;
var $d753edfeb6197c80$require$kContentLength = $j9Suy.kContentLength;
var $d753edfeb6197c80$require$kMockDispatch = $j9Suy.kMockDispatch;

var $k7roP = parcelRequire("k7roP");
var $d753edfeb6197c80$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $3zyxC = parcelRequire("3zyxC");
var $d753edfeb6197c80$require$buildURL = $3zyxC.buildURL;
/**
 * Defines the scope API for an interceptor reply
 */ class $d753edfeb6197c80$var$MockScope {
    constructor(mockDispatch){
        this[$d753edfeb6197c80$require$kMockDispatch] = mockDispatch;
    }
    /**
   * Delay a reply by a set amount in ms.
   */ delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new $d753edfeb6197c80$require$InvalidArgumentError("waitInMs must be a valid integer > 0");
        this[$d753edfeb6197c80$require$kMockDispatch].delay = waitInMs;
        return this;
    }
    /**
   * For a defined reply, never mark as consumed.
   */ persist() {
        this[$d753edfeb6197c80$require$kMockDispatch].persist = true;
        return this;
    }
    /**
   * Allow one to define a reply for a set amount of matching requests.
   */ times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new $d753edfeb6197c80$require$InvalidArgumentError("repeatTimes must be a valid integer > 0");
        this[$d753edfeb6197c80$require$kMockDispatch].times = repeatTimes;
        return this;
    }
}
/**
 * Defines an interceptor for a Mock
 */ class $d753edfeb6197c80$var$MockInterceptor {
    constructor(opts, mockDispatches){
        if (typeof opts !== "object") throw new $d753edfeb6197c80$require$InvalidArgumentError("opts must be an object");
        if (typeof opts.path === "undefined") throw new $d753edfeb6197c80$require$InvalidArgumentError("opts.path must be defined");
        if (typeof opts.method === "undefined") opts.method = "GET";
        // See https://github.com/nodejs/undici/issues/1245
        // As per RFC 3986, clients are not supposed to send URI
        // fragments to servers when they retrieve a document,
        if (typeof opts.path === "string") {
            if (opts.query) opts.path = $d753edfeb6197c80$require$buildURL(opts.path, opts.query);
            else {
                // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
                const parsedURL = new URL(opts.path, "data://");
                opts.path = parsedURL.pathname + parsedURL.search;
            }
        }
        if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
        this[$d753edfeb6197c80$require$kDispatchKey] = $d753edfeb6197c80$require$buildKey(opts);
        this[$d753edfeb6197c80$require$kDispatches] = mockDispatches;
        this[$d753edfeb6197c80$require$kDefaultHeaders] = {};
        this[$d753edfeb6197c80$require$kDefaultTrailers] = {};
        this[$d753edfeb6197c80$require$kContentLength] = false;
    }
    createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = $d753edfeb6197c80$require$getResponseData(data);
        const contentLength = this[$d753edfeb6197c80$require$kContentLength] ? {
            "content-length": responseData.length
        } : {};
        const headers = {
            ...this[$d753edfeb6197c80$require$kDefaultHeaders],
            ...contentLength,
            ...responseOptions.headers
        };
        const trailers = {
            ...this[$d753edfeb6197c80$require$kDefaultTrailers],
            ...responseOptions.trailers
        };
        return {
            statusCode: statusCode,
            data: data,
            headers: headers,
            trailers: trailers
        };
    }
    validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") throw new $d753edfeb6197c80$require$InvalidArgumentError("statusCode must be defined");
        if (typeof data === "undefined") throw new $d753edfeb6197c80$require$InvalidArgumentError("data must be defined");
        if (typeof responseOptions !== "object") throw new $d753edfeb6197c80$require$InvalidArgumentError("responseOptions must be an object");
    }
    /**
   * Mock an undici request with a defined reply.
   */ reply(replyData) {
        // Values of reply aren't available right now as they
        // can only be available when the reply callback is invoked.
        if (typeof replyData === "function") {
            // We'll first wrap the provided callback in another function,
            // this function will properly resolve the data from the callback
            // when invoked.
            const wrappedDefaultsCallback = (opts)=>{
                // Our reply options callback contains the parameter for statusCode, data and options.
                const resolvedData = replyData(opts);
                // Check if it is in the right format
                if (typeof resolvedData !== "object") throw new $d753edfeb6197c80$require$InvalidArgumentError("reply options callback must return an object");
                const { statusCode: statusCode, data: data = "", responseOptions: responseOptions = {} } = resolvedData;
                this.validateReplyParameters(statusCode, data, responseOptions);
                // Since the values can be obtained immediately we return them
                // from this higher order function that will be resolved later.
                return {
                    ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
                };
            };
            // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
            const newMockDispatch = $d753edfeb6197c80$require$addMockDispatch(this[$d753edfeb6197c80$require$kDispatches], this[$d753edfeb6197c80$require$kDispatchKey], wrappedDefaultsCallback);
            return new $d753edfeb6197c80$var$MockScope(newMockDispatch);
        }
        // We can have either one or three parameters, if we get here,
        // we should have 1-3 parameters. So we spread the arguments of
        // this function to obtain the parameters, since replyData will always
        // just be the statusCode.
        const [statusCode, data = "", responseOptions = {}] = [
            ...arguments
        ];
        this.validateReplyParameters(statusCode, data, responseOptions);
        // Send in-already provided data like usual
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = $d753edfeb6197c80$require$addMockDispatch(this[$d753edfeb6197c80$require$kDispatches], this[$d753edfeb6197c80$require$kDispatchKey], dispatchData);
        return new $d753edfeb6197c80$var$MockScope(newMockDispatch);
    }
    /**
   * Mock an undici request with a defined error.
   */ replyWithError(error) {
        if (typeof error === "undefined") throw new $d753edfeb6197c80$require$InvalidArgumentError("error must be defined");
        const newMockDispatch = $d753edfeb6197c80$require$addMockDispatch(this[$d753edfeb6197c80$require$kDispatches], this[$d753edfeb6197c80$require$kDispatchKey], {
            error: error
        });
        return new $d753edfeb6197c80$var$MockScope(newMockDispatch);
    }
    /**
   * Set default reply headers on the interceptor for subsequent replies
   */ defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") throw new $d753edfeb6197c80$require$InvalidArgumentError("headers must be defined");
        this[$d753edfeb6197c80$require$kDefaultHeaders] = headers;
        return this;
    }
    /**
   * Set default reply trailers on the interceptor for subsequent replies
   */ defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") throw new $d753edfeb6197c80$require$InvalidArgumentError("trailers must be defined");
        this[$d753edfeb6197c80$require$kDefaultTrailers] = trailers;
        return this;
    }
    /**
   * Set reply content length header for replies on the interceptor
   */ replyContentLength() {
        this[$d753edfeb6197c80$require$kContentLength] = true;
        return this;
    }
}
$d753edfeb6197c80$export$fb1b189d8a131a8b = $d753edfeb6197c80$var$MockInterceptor;
$d753edfeb6197c80$export$61f2724da7650995 = $d753edfeb6197c80$var$MockScope;

});


parcelRegister("beZvN", function(module, exports) {
"use strict";

var $lbv7W = parcelRequire("lbv7W");
var $82f0b77f4461cf2f$require$kClients = $lbv7W.kClients;

var $5HQxx = parcelRequire("5HQxx");

var $j9Suy = parcelRequire("j9Suy");
var $82f0b77f4461cf2f$require$kAgent = $j9Suy.kAgent;
var $82f0b77f4461cf2f$require$kMockAgentSet = $j9Suy.kMockAgentSet;
var $82f0b77f4461cf2f$require$kMockAgentGet = $j9Suy.kMockAgentGet;
var $82f0b77f4461cf2f$require$kDispatches = $j9Suy.kDispatches;
var $82f0b77f4461cf2f$require$kIsMockActive = $j9Suy.kIsMockActive;
var $82f0b77f4461cf2f$require$kNetConnect = $j9Suy.kNetConnect;
var $82f0b77f4461cf2f$require$kGetNetConnect = $j9Suy.kGetNetConnect;
var $82f0b77f4461cf2f$require$kOptions = $j9Suy.kOptions;
var $82f0b77f4461cf2f$require$kFactory = $j9Suy.kFactory;

var $7nLD2 = parcelRequire("7nLD2");

var $ewKZ2 = parcelRequire("ewKZ2");

var $5KfFj = parcelRequire("5KfFj");
var $82f0b77f4461cf2f$require$matchValue = $5KfFj.matchValue;
var $82f0b77f4461cf2f$require$buildMockOptions = $5KfFj.buildMockOptions;

var $k7roP = parcelRequire("k7roP");
var $82f0b77f4461cf2f$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $82f0b77f4461cf2f$require$UndiciError = $k7roP.UndiciError;

var $2qRNu = parcelRequire("2qRNu");

var $hZmm0 = parcelRequire("hZmm0");

var $1S0qu = parcelRequire("1S0qu");
class $82f0b77f4461cf2f$var$FakeWeakRef {
    constructor(value){
        this.value = value;
    }
    deref() {
        return this.value;
    }
}
class $82f0b77f4461cf2f$var$MockAgent extends $2qRNu {
    constructor(opts){
        super(opts);
        this[$82f0b77f4461cf2f$require$kNetConnect] = true;
        this[$82f0b77f4461cf2f$require$kIsMockActive] = true;
        // Instantiate Agent and encapsulate
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") throw new $82f0b77f4461cf2f$require$InvalidArgumentError("Argument opts.agent must implement Agent");
        const agent = opts && opts.agent ? opts.agent : new $5HQxx(opts);
        this[$82f0b77f4461cf2f$require$kAgent] = agent;
        this[$82f0b77f4461cf2f$require$kClients] = agent[$82f0b77f4461cf2f$require$kClients];
        this[$82f0b77f4461cf2f$require$kOptions] = $82f0b77f4461cf2f$require$buildMockOptions(opts);
    }
    get(origin) {
        let dispatcher = this[$82f0b77f4461cf2f$require$kMockAgentGet](origin);
        if (!dispatcher) {
            dispatcher = this[$82f0b77f4461cf2f$require$kFactory](origin);
            this[$82f0b77f4461cf2f$require$kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
    }
    dispatch(opts, handler) {
        // Call MockAgent.get to perform additional setup before dispatching as normal
        this.get(opts.origin);
        return this[$82f0b77f4461cf2f$require$kAgent].dispatch(opts, handler);
    }
    async close() {
        await this[$82f0b77f4461cf2f$require$kAgent].close();
        this[$82f0b77f4461cf2f$require$kClients].clear();
    }
    deactivate() {
        this[$82f0b77f4461cf2f$require$kIsMockActive] = false;
    }
    activate() {
        this[$82f0b77f4461cf2f$require$kIsMockActive] = true;
    }
    enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
            if (Array.isArray(this[$82f0b77f4461cf2f$require$kNetConnect])) this[$82f0b77f4461cf2f$require$kNetConnect].push(matcher);
            else this[$82f0b77f4461cf2f$require$kNetConnect] = [
                matcher
            ];
        } else if (typeof matcher === "undefined") this[$82f0b77f4461cf2f$require$kNetConnect] = true;
        else throw new $82f0b77f4461cf2f$require$InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
    }
    disableNetConnect() {
        this[$82f0b77f4461cf2f$require$kNetConnect] = false;
    }
    // This is required to bypass issues caused by using global symbols - see:
    // https://github.com/nodejs/undici/issues/1447
    get isMockActive() {
        return this[$82f0b77f4461cf2f$require$kIsMockActive];
    }
    [$82f0b77f4461cf2f$require$kMockAgentSet](origin, dispatcher) {
        this[$82f0b77f4461cf2f$require$kClients].set(origin, new $82f0b77f4461cf2f$var$FakeWeakRef(dispatcher));
    }
    [$82f0b77f4461cf2f$require$kFactory](origin) {
        const mockOptions = Object.assign({
            agent: this
        }, this[$82f0b77f4461cf2f$require$kOptions]);
        return this[$82f0b77f4461cf2f$require$kOptions] && this[$82f0b77f4461cf2f$require$kOptions].connections === 1 ? new $7nLD2(origin, mockOptions) : new $ewKZ2(origin, mockOptions);
    }
    [$82f0b77f4461cf2f$require$kMockAgentGet](origin) {
        // First check if we can immediately find it
        const ref = this[$82f0b77f4461cf2f$require$kClients].get(origin);
        if (ref) return ref.deref();
        // If the origin is not a string create a dummy parent pool and return to user
        if (typeof origin !== "string") {
            const dispatcher = this[$82f0b77f4461cf2f$require$kFactory]("http://localhost:9999");
            this[$82f0b77f4461cf2f$require$kMockAgentSet](origin, dispatcher);
            return dispatcher;
        }
        // If we match, create a pool and assign the same dispatches
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[$82f0b77f4461cf2f$require$kClients])){
            const nonExplicitDispatcher = nonExplicitRef.deref();
            if (nonExplicitDispatcher && typeof keyMatcher !== "string" && $82f0b77f4461cf2f$require$matchValue(keyMatcher, origin)) {
                const dispatcher = this[$82f0b77f4461cf2f$require$kFactory](origin);
                this[$82f0b77f4461cf2f$require$kMockAgentSet](origin, dispatcher);
                dispatcher[$82f0b77f4461cf2f$require$kDispatches] = nonExplicitDispatcher[$82f0b77f4461cf2f$require$kDispatches];
                return dispatcher;
            }
        }
    }
    [$82f0b77f4461cf2f$require$kGetNetConnect]() {
        return this[$82f0b77f4461cf2f$require$kNetConnect];
    }
    pendingInterceptors() {
        const mockAgentClients = this[$82f0b77f4461cf2f$require$kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope])=>scope.deref()[$82f0b77f4461cf2f$require$kDispatches].map((dispatch)=>({
                    ...dispatch,
                    origin: origin
                }))).filter(({ pending: pending })=>pending);
    }
    assertNoPendingInterceptors({ pendingInterceptorsFormatter: pendingInterceptorsFormatter = new $1S0qu() } = {}) {
        const pending = this.pendingInterceptors();
        if (pending.length === 0) return;
        const pluralizer = new $hZmm0("interceptor", "interceptors").pluralize(pending.length);
        throw new $82f0b77f4461cf2f$require$UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
    }
}
module.exports = $82f0b77f4461cf2f$var$MockAgent;

});
parcelRegister("ewKZ2", function(module, exports) {
"use strict";

var $a9387fce477476a1$require$promisify = $3B1P3$util.promisify;

var $fNXn9 = parcelRequire("fNXn9");

var $5KfFj = parcelRequire("5KfFj");
var $a9387fce477476a1$require$buildMockDispatch = $5KfFj.buildMockDispatch;

var $j9Suy = parcelRequire("j9Suy");
var $a9387fce477476a1$require$kDispatches = $j9Suy.kDispatches;
var $a9387fce477476a1$require$kMockAgent = $j9Suy.kMockAgent;
var $a9387fce477476a1$require$kClose = $j9Suy.kClose;
var $a9387fce477476a1$require$kOriginalClose = $j9Suy.kOriginalClose;
var $a9387fce477476a1$require$kOrigin = $j9Suy.kOrigin;
var $a9387fce477476a1$require$kOriginalDispatch = $j9Suy.kOriginalDispatch;
var $a9387fce477476a1$require$kConnected = $j9Suy.kConnected;

var $iubtv = parcelRequire("iubtv");
var $a9387fce477476a1$require$MockInterceptor = $iubtv.MockInterceptor;

var $lbv7W = parcelRequire("lbv7W");

var $k7roP = parcelRequire("k7roP");
var $a9387fce477476a1$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
/**
 * MockPool provides an API that extends the Pool to influence the mockDispatches.
 */ class $a9387fce477476a1$var$MockPool extends $fNXn9 {
    constructor(origin, opts){
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new $a9387fce477476a1$require$InvalidArgumentError("Argument opts.agent must implement Agent");
        this[$a9387fce477476a1$require$kMockAgent] = opts.agent;
        this[$a9387fce477476a1$require$kOrigin] = origin;
        this[$a9387fce477476a1$require$kDispatches] = [];
        this[$a9387fce477476a1$require$kConnected] = 1;
        this[$a9387fce477476a1$require$kOriginalDispatch] = this.dispatch;
        this[$a9387fce477476a1$require$kOriginalClose] = this.close.bind(this);
        this.dispatch = $a9387fce477476a1$require$buildMockDispatch.call(this);
        this.close = this[$a9387fce477476a1$require$kClose];
    }
    get [$lbv7W.kConnected]() {
        return this[$a9387fce477476a1$require$kConnected];
    }
    /**
   * Sets up the base interceptor for mocking replies from undici.
   */ intercept(opts) {
        return new $a9387fce477476a1$require$MockInterceptor(opts, this[$a9387fce477476a1$require$kDispatches]);
    }
    async [$a9387fce477476a1$require$kClose]() {
        await $a9387fce477476a1$require$promisify(this[$a9387fce477476a1$require$kOriginalClose])();
        this[$a9387fce477476a1$require$kConnected] = 0;
        this[$a9387fce477476a1$require$kMockAgent][$lbv7W.kClients].delete(this[$a9387fce477476a1$require$kOrigin]);
    }
}
module.exports = $a9387fce477476a1$var$MockPool;

});

parcelRegister("hZmm0", function(module, exports) {
"use strict";
const $03612f5fafa06cce$var$singulars = {
    pronoun: "it",
    is: "is",
    was: "was",
    this: "this"
};
const $03612f5fafa06cce$var$plurals = {
    pronoun: "they",
    is: "are",
    was: "were",
    this: "these"
};
module.exports = class Pluralizer {
    constructor(singular, plural){
        this.singular = singular;
        this.plural = plural;
    }
    pluralize(count) {
        const one = count === 1;
        const keys = one ? $03612f5fafa06cce$var$singulars : $03612f5fafa06cce$var$plurals;
        const noun = one ? this.singular : this.plural;
        return {
            ...keys,
            count: count,
            noun: noun
        };
    }
};

});

parcelRegister("1S0qu", function(module, exports) {
"use strict";

var $15cb2a367d74e98b$require$Transform = $3B1P3$stream.Transform;

var $15cb2a367d74e98b$require$Console = $3B1P3$console.Console;
/**
 * Gets the output of `console.table(…)` as a string.
 */ module.exports = class PendingInterceptorsFormatter {
    constructor({ disableColors: disableColors } = {}){
        this.transform = new $15cb2a367d74e98b$require$Transform({
            transform (chunk, _enc, cb) {
                cb(null, chunk);
            }
        });
        this.logger = new $15cb2a367d74e98b$require$Console({
            stdout: this.transform,
            inspectOptions: {
                colors: !disableColors && !process.env.CI
            }
        });
    }
    format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(({ method: method, path: path, data: { statusCode: statusCode }, persist: persist, times: times, timesInvoked: timesInvoked, origin: origin })=>({
                Method: method,
                Origin: origin,
                Path: path,
                "Status code": statusCode,
                Persistent: persist ? "\u2705" : "\u274C",
                Invocations: timesInvoked,
                Remaining: persist ? Infinity : times - timesInvoked
            }));
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
    }
};

});


parcelRegister("4aEF5", function(module, exports) {
"use strict";

var $lbv7W = parcelRequire("lbv7W");
var $3097a32a317f8dae$require$kProxy = $lbv7W.kProxy;
var $3097a32a317f8dae$require$kClose = $lbv7W.kClose;
var $3097a32a317f8dae$require$kDestroy = $lbv7W.kDestroy;
var $3097a32a317f8dae$require$kInterceptors = $lbv7W.kInterceptors;

var $3097a32a317f8dae$require$URL = $3B1P3$url.URL;

var $5HQxx = parcelRequire("5HQxx");

var $fNXn9 = parcelRequire("fNXn9");

var $rZcCt = parcelRequire("rZcCt");

var $k7roP = parcelRequire("k7roP");
var $3097a32a317f8dae$require$InvalidArgumentError = $k7roP.InvalidArgumentError;
var $3097a32a317f8dae$require$RequestAbortedError = $k7roP.RequestAbortedError;

var $8Vvyz = parcelRequire("8Vvyz");
const $3097a32a317f8dae$var$kAgent = Symbol("proxy agent");
const $3097a32a317f8dae$var$kClient = Symbol("proxy client");
const $3097a32a317f8dae$var$kProxyHeaders = Symbol("proxy headers");
const $3097a32a317f8dae$var$kRequestTls = Symbol("request tls settings");
const $3097a32a317f8dae$var$kProxyTls = Symbol("proxy tls settings");
const $3097a32a317f8dae$var$kConnectEndpoint = Symbol("connect endpoint function");
function $3097a32a317f8dae$var$defaultProtocolPort(protocol) {
    return protocol === "https:" ? 443 : 80;
}
function $3097a32a317f8dae$var$buildProxyOptions(opts) {
    if (typeof opts === "string") opts = {
        uri: opts
    };
    if (!opts || !opts.uri) throw new $3097a32a317f8dae$require$InvalidArgumentError("Proxy opts.uri is mandatory");
    return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
    };
}
function $3097a32a317f8dae$var$defaultFactory(origin, opts) {
    return new $fNXn9(origin, opts);
}
class $3097a32a317f8dae$var$ProxyAgent extends $rZcCt {
    constructor(opts){
        super(opts);
        this[$3097a32a317f8dae$require$kProxy] = $3097a32a317f8dae$var$buildProxyOptions(opts);
        this[$3097a32a317f8dae$var$kAgent] = new $5HQxx(opts);
        this[$3097a32a317f8dae$require$kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") opts = {
            uri: opts
        };
        if (!opts || !opts.uri) throw new $3097a32a317f8dae$require$InvalidArgumentError("Proxy opts.uri is mandatory");
        const { clientFactory: clientFactory = $3097a32a317f8dae$var$defaultFactory } = opts;
        if (typeof clientFactory !== "function") throw new $3097a32a317f8dae$require$InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        this[$3097a32a317f8dae$var$kRequestTls] = opts.requestTls;
        this[$3097a32a317f8dae$var$kProxyTls] = opts.proxyTls;
        this[$3097a32a317f8dae$var$kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new $3097a32a317f8dae$require$URL(opts.uri);
        const { origin: origin, port: port, host: host, username: username, password: password } = resolvedUrl;
        if (opts.auth && opts.token) throw new $3097a32a317f8dae$require$InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        else if (opts.auth) /* @deprecated in favour of opts.token */ this[$3097a32a317f8dae$var$kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        else if (opts.token) this[$3097a32a317f8dae$var$kProxyHeaders]["proxy-authorization"] = opts.token;
        else if (username && password) this[$3097a32a317f8dae$var$kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        const connect = $8Vvyz({
            ...opts.proxyTls
        });
        this[$3097a32a317f8dae$var$kConnectEndpoint] = $8Vvyz({
            ...opts.requestTls
        });
        this[$3097a32a317f8dae$var$kClient] = clientFactory(resolvedUrl, {
            connect: connect
        });
        this[$3097a32a317f8dae$var$kAgent] = new $5HQxx({
            ...opts,
            connect: async (opts, callback)=>{
                let requestedHost = opts.host;
                if (!opts.port) requestedHost += `:${$3097a32a317f8dae$var$defaultProtocolPort(opts.protocol)}`;
                try {
                    const { socket: socket, statusCode: statusCode } = await this[$3097a32a317f8dae$var$kClient].connect({
                        origin: origin,
                        port: port,
                        path: requestedHost,
                        signal: opts.signal,
                        headers: {
                            ...this[$3097a32a317f8dae$var$kProxyHeaders],
                            host: host
                        }
                    });
                    if (statusCode !== 200) {
                        socket.on("error", ()=>{}).destroy();
                        callback(new $3097a32a317f8dae$require$RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
                    }
                    if (opts.protocol !== "https:") {
                        callback(null, socket);
                        return;
                    }
                    let servername;
                    if (this[$3097a32a317f8dae$var$kRequestTls]) servername = this[$3097a32a317f8dae$var$kRequestTls].servername;
                    else servername = opts.servername;
                    this[$3097a32a317f8dae$var$kConnectEndpoint]({
                        ...opts,
                        servername: servername,
                        httpSocket: socket
                    }, callback);
                } catch (err) {
                    callback(err);
                }
            }
        });
    }
    dispatch(opts, handler) {
        const { host: host } = new $3097a32a317f8dae$require$URL(opts.origin);
        const headers = $3097a32a317f8dae$var$buildHeaders(opts.headers);
        $3097a32a317f8dae$var$throwIfProxyAuthIsSent(headers);
        return this[$3097a32a317f8dae$var$kAgent].dispatch({
            ...opts,
            headers: {
                ...headers,
                host: host
            }
        }, handler);
    }
    async [$3097a32a317f8dae$require$kClose]() {
        await this[$3097a32a317f8dae$var$kAgent].close();
        await this[$3097a32a317f8dae$var$kClient].close();
    }
    async [$3097a32a317f8dae$require$kDestroy]() {
        await this[$3097a32a317f8dae$var$kAgent].destroy();
        await this[$3097a32a317f8dae$var$kClient].destroy();
    }
}
/**
 * @param {string[] | Record<string, string>} headers
 * @returns {Record<string, string>}
 */ function $3097a32a317f8dae$var$buildHeaders(headers) {
    // When using undici.fetch, the headers list is stored
    // as an array.
    if (Array.isArray(headers)) {
        /** @type {Record<string, string>} */ const headersPair = {};
        for(let i = 0; i < headers.length; i += 2)headersPair[headers[i]] = headers[i + 1];
        return headersPair;
    }
    return headers;
}
/**
 * @param {Record<string, string>} headers
 *
 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
 * Nevertheless, it was changed and to avoid a security vulnerability by end users
 * this check was created.
 * It should be removed in the next major version for performance reasons
 */ function $3097a32a317f8dae$var$throwIfProxyAuthIsSent(headers) {
    const existProxyAuth = headers && Object.keys(headers).find((key)=>key.toLowerCase() === "proxy-authorization");
    if (existProxyAuth) throw new $3097a32a317f8dae$require$InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
}
module.exports = $3097a32a317f8dae$var$ProxyAgent;

});

parcelRegister("b9FWR", function(module, exports) {


var $lbv7W = parcelRequire("lbv7W");
var $81f11305310996c5$require$kRetryHandlerDefaultRetry = $lbv7W.kRetryHandlerDefaultRetry;

var $k7roP = parcelRequire("k7roP");
var $81f11305310996c5$require$RequestRetryError = $k7roP.RequestRetryError;

var $3zyxC = parcelRequire("3zyxC");
var $81f11305310996c5$require$isDisturbed = $3zyxC.isDisturbed;
var $81f11305310996c5$require$parseHeaders = $3zyxC.parseHeaders;
var $81f11305310996c5$require$parseRangeHeader = $3zyxC.parseRangeHeader;
function $81f11305310996c5$var$calculateRetryAfterHeader(retryAfter) {
    const current = Date.now();
    const diff = new Date(retryAfter).getTime() - current;
    return diff;
}
class $81f11305310996c5$var$RetryHandler {
    constructor(opts, handlers){
        const { retryOptions: retryOptions, ...dispatchOpts } = opts;
        const { // Retry scoped
        retry: retryFn, maxRetries: maxRetries, maxTimeout: maxTimeout, minTimeout: minTimeout, timeoutFactor: timeoutFactor, methods: // Response scoped
        methods, errorCodes: errorCodes, retryAfter: retryAfter, statusCodes: statusCodes } = retryOptions !== null && retryOptions !== void 0 ? retryOptions : {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
            retry: retryFn !== null && retryFn !== void 0 ? retryFn : $81f11305310996c5$var$RetryHandler[$81f11305310996c5$require$kRetryHandlerDefaultRetry],
            retryAfter: retryAfter !== null && retryAfter !== void 0 ? retryAfter : true,
            maxTimeout: maxTimeout !== null && maxTimeout !== void 0 ? maxTimeout : 30000,
            timeout: minTimeout !== null && minTimeout !== void 0 ? minTimeout : 500,
            timeoutFactor: timeoutFactor !== null && timeoutFactor !== void 0 ? timeoutFactor : 2,
            maxRetries: maxRetries !== null && maxRetries !== void 0 ? maxRetries : 5,
            // What errors we should retry
            methods: methods !== null && methods !== void 0 ? methods : [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "DELETE",
                "TRACE"
            ],
            // Indicates which errors to retry
            statusCodes: statusCodes !== null && statusCodes !== void 0 ? statusCodes : [
                500,
                502,
                503,
                504,
                429
            ],
            // List of errors to retry
            errorCodes: errorCodes !== null && errorCodes !== void 0 ? errorCodes : [
                "ECONNRESET",
                "ECONNREFUSED",
                "ENOTFOUND",
                "ENETDOWN",
                "ENETUNREACH",
                "EHOSTDOWN",
                "EHOSTUNREACH",
                "EPIPE"
            ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        // Handle possible onConnect duplication
        this.handler.onConnect((reason)=>{
            this.aborted = true;
            if (this.abort) this.abort(reason);
            else this.reason = reason;
        });
    }
    onRequestSent() {
        if (this.handler.onRequestSent) this.handler.onRequestSent();
    }
    onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) this.handler.onUpgrade(statusCode, headers, socket);
    }
    onConnect(abort) {
        if (this.aborted) abort(this.reason);
        else this.abort = abort;
    }
    onBodySent(chunk) {
        if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
    }
    static [$81f11305310996c5$require$kRetryHandlerDefaultRetry](err, { state: state, opts: opts }, cb) {
        const { statusCode: statusCode, code: code, headers: headers } = err;
        const { method: method, retryOptions: retryOptions } = opts;
        const { maxRetries: maxRetries, timeout: timeout, maxTimeout: maxTimeout, timeoutFactor: timeoutFactor, statusCodes: statusCodes, errorCodes: errorCodes, methods: methods } = retryOptions;
        let { counter: counter, currentTimeout: currentTimeout } = state;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
        // Any code that is not a Undici's originated and allowed to retry
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
            cb(err);
            return;
        }
        // If a set of method are provided and the current method is not in the list
        if (Array.isArray(methods) && !methods.includes(method)) {
            cb(err);
            return;
        }
        // If a set of status code are provided and the current status code is not in the list
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
            cb(err);
            return;
        }
        // If we reached the max number of retries
        if (counter > maxRetries) {
            cb(err);
            return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
            retryAfterHeader = Number(retryAfterHeader);
            retryAfterHeader = isNaN(retryAfterHeader) ? $81f11305310996c5$var$calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3 // Retry-After is in seconds
            ;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
        state.currentTimeout = retryTimeout;
        setTimeout(()=>cb(null), retryTimeout);
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const headers = $81f11305310996c5$require$parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
            this.abort(new $81f11305310996c5$require$RequestRetryError("Request failed", statusCode, {
                headers: headers,
                count: this.retryCount
            }));
            return false;
        }
        // Checkpoint for resume from where we left it
        if (this.resume != null) {
            this.resume = null;
            if (statusCode !== 206) return true;
            const contentRange = $81f11305310996c5$require$parseRangeHeader(headers["content-range"]);
            // If no content range
            if (!contentRange) {
                this.abort(new $81f11305310996c5$require$RequestRetryError("Content-Range mismatch", statusCode, {
                    headers: headers,
                    count: this.retryCount
                }));
                return false;
            }
            // Let's start with a weak etag check
            if (this.etag != null && this.etag !== headers.etag) {
                this.abort(new $81f11305310996c5$require$RequestRetryError("ETag mismatch", statusCode, {
                    headers: headers,
                    count: this.retryCount
                }));
                return false;
            }
            const { start: start, size: size, end: end = size } = contentRange;
            $3B1P3$assert(this.start === start, "content-range mismatch");
            $3B1P3$assert(this.end == null || this.end === end, "content-range mismatch");
            this.resume = resume;
            return true;
        }
        if (this.end == null) {
            if (statusCode === 206) {
                // First time we receive 206
                const range = $81f11305310996c5$require$parseRangeHeader(headers["content-range"]);
                if (range == null) return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
                const { start: start, size: size, end: end = size } = range;
                $3B1P3$assert(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
                $3B1P3$assert(Number.isFinite(start));
                $3B1P3$assert(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
                this.start = start;
                this.end = end;
            }
            // We make our best to checkpoint the body for further range headers
            if (this.end == null) {
                const contentLength = headers["content-length"];
                this.end = contentLength != null ? Number(contentLength) : null;
            }
            $3B1P3$assert(Number.isFinite(this.start));
            $3B1P3$assert(this.end == null || Number.isFinite(this.end), "invalid content-length");
            this.resume = resume;
            this.etag = headers.etag != null ? headers.etag : null;
            return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
        }
        const err = new $81f11305310996c5$require$RequestRetryError("Request failed", statusCode, {
            headers: headers,
            count: this.retryCount
        });
        this.abort(err);
        return false;
    }
    onData(chunk) {
        this.start += chunk.length;
        return this.handler.onData(chunk);
    }
    onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
    }
    onError(err) {
        if (this.aborted || $81f11305310996c5$require$isDisturbed(this.opts.body)) return this.handler.onError(err);
        this.retryOpts.retry(err, {
            state: {
                counter: this.retryCount++,
                currentTimeout: this.retryAfter
            },
            opts: {
                retryOptions: this.retryOpts,
                ...this.opts
            }
        }, onRetry.bind(this));
        function onRetry(err) {
            if (err != null || this.aborted || $81f11305310996c5$require$isDisturbed(this.opts.body)) return this.handler.onError(err);
            var _this_end;
            if (this.start !== 0) this.opts = {
                ...this.opts,
                headers: {
                    ...this.opts.headers,
                    range: `bytes=${this.start}-${(_this_end = this.end) !== null && _this_end !== void 0 ? _this_end : ""}`
                }
            };
            try {
                this.dispatch(this.opts, this);
            } catch (err) {
                this.handler.onError(err);
            }
        }
    }
}
module.exports = $81f11305310996c5$var$RetryHandler;

});

parcelRegister("iOd5O", function(module, exports) {
"use strict";
// We include a version number for the Dispatcher API. In case of breaking changes,
// this version number must be increased to avoid conflicts.
const $db170d76521d7d2c$var$globalDispatcher = Symbol.for("undici.globalDispatcher.1");

var $k7roP = parcelRequire("k7roP");
var $db170d76521d7d2c$require$InvalidArgumentError = $k7roP.InvalidArgumentError;

var $5HQxx = parcelRequire("5HQxx");
if ($db170d76521d7d2c$var$getGlobalDispatcher() === undefined) $db170d76521d7d2c$var$setGlobalDispatcher(new $5HQxx());
function $db170d76521d7d2c$var$setGlobalDispatcher(agent) {
    if (!agent || typeof agent.dispatch !== "function") throw new $db170d76521d7d2c$require$InvalidArgumentError("Argument agent must implement Agent");
    Object.defineProperty(globalThis, $db170d76521d7d2c$var$globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
    });
}
function $db170d76521d7d2c$var$getGlobalDispatcher() {
    return globalThis[$db170d76521d7d2c$var$globalDispatcher];
}
module.exports = {
    setGlobalDispatcher: $db170d76521d7d2c$var$setGlobalDispatcher,
    getGlobalDispatcher: $db170d76521d7d2c$var$getGlobalDispatcher
};

});

parcelRegister("2KLMW", function(module, exports) {
"use strict";
module.exports = class DecoratorHandler {
    constructor(handler){
        this.handler = handler;
    }
    onConnect(...args) {
        return this.handler.onConnect(...args);
    }
    onError(...args) {
        return this.handler.onError(...args);
    }
    onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
    }
    onHeaders(...args) {
        return this.handler.onHeaders(...args);
    }
    onData(...args) {
        return this.handler.onData(...args);
    }
    onComplete(...args) {
        return this.handler.onComplete(...args);
    }
    onBodySent(...args) {
        return this.handler.onBodySent(...args);
    }
};

});

parcelRegister("6liPj", function(module, exports) {
// https://github.com/Ethan-Arrowood/undici-fetch
"use strict";

var $fhz2k = parcelRequire("fhz2k");
var $49e34ecf086aca0e$require$Response = $fhz2k.Response;
var $49e34ecf086aca0e$require$makeNetworkError = $fhz2k.makeNetworkError;
var $49e34ecf086aca0e$require$makeAppropriateNetworkError = $fhz2k.makeAppropriateNetworkError;
var $49e34ecf086aca0e$require$filterResponse = $fhz2k.filterResponse;
var $49e34ecf086aca0e$require$makeResponse = $fhz2k.makeResponse;

var $2qoFF = parcelRequire("2qoFF");
var $49e34ecf086aca0e$require$Headers = $2qoFF.Headers;

var $7TBdE = parcelRequire("7TBdE");
var $49e34ecf086aca0e$require$Request = $7TBdE.Request;
var $49e34ecf086aca0e$require$makeRequest = $7TBdE.makeRequest;


var $f1lDT = parcelRequire("f1lDT");
var $49e34ecf086aca0e$require$bytesMatch = $f1lDT.bytesMatch;
var $49e34ecf086aca0e$require$makePolicyContainer = $f1lDT.makePolicyContainer;
var $49e34ecf086aca0e$require$clonePolicyContainer = $f1lDT.clonePolicyContainer;
var $49e34ecf086aca0e$require$requestBadPort = $f1lDT.requestBadPort;
var $49e34ecf086aca0e$require$TAOCheck = $f1lDT.TAOCheck;
var $49e34ecf086aca0e$require$appendRequestOriginHeader = $f1lDT.appendRequestOriginHeader;
var $49e34ecf086aca0e$require$responseLocationURL = $f1lDT.responseLocationURL;
var $49e34ecf086aca0e$require$requestCurrentURL = $f1lDT.requestCurrentURL;
var $49e34ecf086aca0e$require$setRequestReferrerPolicyOnRedirect = $f1lDT.setRequestReferrerPolicyOnRedirect;
var $49e34ecf086aca0e$require$tryUpgradeRequestToAPotentiallyTrustworthyURL = $f1lDT.tryUpgradeRequestToAPotentiallyTrustworthyURL;
var $49e34ecf086aca0e$require$createOpaqueTimingInfo = $f1lDT.createOpaqueTimingInfo;
var $49e34ecf086aca0e$require$appendFetchMetadata = $f1lDT.appendFetchMetadata;
var $49e34ecf086aca0e$require$corsCheck = $f1lDT.corsCheck;
var $49e34ecf086aca0e$require$crossOriginResourcePolicyCheck = $f1lDT.crossOriginResourcePolicyCheck;
var $49e34ecf086aca0e$require$determineRequestsReferrer = $f1lDT.determineRequestsReferrer;
var $49e34ecf086aca0e$require$coarsenedSharedCurrentTime = $f1lDT.coarsenedSharedCurrentTime;
var $49e34ecf086aca0e$require$createDeferredPromise = $f1lDT.createDeferredPromise;
var $49e34ecf086aca0e$require$isBlobLike = $f1lDT.isBlobLike;
var $49e34ecf086aca0e$require$sameOrigin = $f1lDT.sameOrigin;
var $49e34ecf086aca0e$require$isCancelled = $f1lDT.isCancelled;
var $49e34ecf086aca0e$require$isAborted = $f1lDT.isAborted;
var $49e34ecf086aca0e$require$isErrorLike = $f1lDT.isErrorLike;
var $49e34ecf086aca0e$require$fullyReadBody = $f1lDT.fullyReadBody;
var $49e34ecf086aca0e$require$readableStreamClose = $f1lDT.readableStreamClose;
var $49e34ecf086aca0e$require$isomorphicEncode = $f1lDT.isomorphicEncode;
var $49e34ecf086aca0e$require$urlIsLocal = $f1lDT.urlIsLocal;
var $49e34ecf086aca0e$require$urlIsHttpHttpsScheme = $f1lDT.urlIsHttpHttpsScheme;
var $49e34ecf086aca0e$require$urlHasHttpsScheme = $f1lDT.urlHasHttpsScheme;

var $hxvf1 = parcelRequire("hxvf1");
var $49e34ecf086aca0e$require$kState = $hxvf1.kState;
var $49e34ecf086aca0e$require$kHeaders = $hxvf1.kHeaders;
var $49e34ecf086aca0e$require$kGuard = $hxvf1.kGuard;
var $49e34ecf086aca0e$require$kRealm = $hxvf1.kRealm;


var $8J9Tb = parcelRequire("8J9Tb");
var $49e34ecf086aca0e$require$safelyExtractBody = $8J9Tb.safelyExtractBody;

var $leEOP = parcelRequire("leEOP");
var $49e34ecf086aca0e$require$redirectStatusSet = $leEOP.redirectStatusSet;
var $49e34ecf086aca0e$require$nullBodyStatus = $leEOP.nullBodyStatus;
var $49e34ecf086aca0e$require$safeMethodsSet = $leEOP.safeMethodsSet;
var $49e34ecf086aca0e$require$requestBodyHeader = $leEOP.requestBodyHeader;
var $49e34ecf086aca0e$require$subresourceSet = $leEOP.subresourceSet;
var $49e34ecf086aca0e$require$DOMException = $leEOP.DOMException;

var $lbv7W = parcelRequire("lbv7W");
var $49e34ecf086aca0e$require$kHeadersList = $lbv7W.kHeadersList;


var $49e34ecf086aca0e$require$Readable = $3B1P3$stream.Readable;
var $49e34ecf086aca0e$require$pipeline = $3B1P3$stream.pipeline;

var $3zyxC = parcelRequire("3zyxC");
var $49e34ecf086aca0e$require$addAbortListener = $3zyxC.addAbortListener;
var $49e34ecf086aca0e$require$isErrored = $3zyxC.isErrored;
var $49e34ecf086aca0e$require$isReadable = $3zyxC.isReadable;
var $49e34ecf086aca0e$require$nodeMajor = $3zyxC.nodeMajor;
var $49e34ecf086aca0e$require$nodeMinor = $3zyxC.nodeMinor;

var $dGZhg = parcelRequire("dGZhg");
var $49e34ecf086aca0e$require$dataURLProcessor = $dGZhg.dataURLProcessor;
var $49e34ecf086aca0e$require$serializeAMimeType = $dGZhg.serializeAMimeType;

var $49e34ecf086aca0e$require$TransformStream = $3B1P3$streamweb.TransformStream;

var $iOd5O = parcelRequire("iOd5O");
var $49e34ecf086aca0e$require$getGlobalDispatcher = $iOd5O.getGlobalDispatcher;

var $2BhCx = parcelRequire("2BhCx");
var $49e34ecf086aca0e$require$webidl = $2BhCx.webidl;

var $49e34ecf086aca0e$require$STATUS_CODES = $3B1P3$http.STATUS_CODES;
const $49e34ecf086aca0e$var$GET_OR_HEAD = [
    "GET",
    "HEAD"
];
/** @type {import('buffer').resolveObjectURL} */ let $49e34ecf086aca0e$var$resolveObjectURL;
let $49e34ecf086aca0e$var$ReadableStream = globalThis.ReadableStream;
class $49e34ecf086aca0e$var$Fetch extends $3B1P3$events {
    constructor(dispatcher){
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        // 2 terminated listeners get added per request,
        // but only 1 gets removed. If there are 20 redirects,
        // 21 listeners will be added.
        // See https://github.com/nodejs/undici/issues/1711
        // TODO (fix): Find and fix root cause for leaked listener.
        this.setMaxListeners(21);
    }
    terminate(reason) {
        var _this_connection;
        if (this.state !== "ongoing") return;
        this.state = "terminated";
        (_this_connection = this.connection) === null || _this_connection === void 0 ? void 0 : _this_connection.destroy(reason);
        this.emit("terminated", reason);
    }
    // https://fetch.spec.whatwg.org/#fetch-controller-abort
    abort(error) {
        var _this_connection;
        if (this.state !== "ongoing") return;
        // 1. Set controller’s state to "aborted".
        this.state = "aborted";
        // 2. Let fallbackError be an "AbortError" DOMException.
        // 3. Set error to fallbackError if it is not given.
        if (!error) error = new $49e34ecf086aca0e$require$DOMException("The operation was aborted.", "AbortError");
        // 4. Let serializedError be StructuredSerialize(error).
        //    If that threw an exception, catch it, and let
        //    serializedError be StructuredSerialize(fallbackError).
        // 5. Set controller’s serialized abort reason to serializedError.
        this.serializedAbortReason = error;
        (_this_connection = this.connection) === null || _this_connection === void 0 ? void 0 : _this_connection.destroy(error);
        this.emit("terminated", error);
    }
}
// https://fetch.spec.whatwg.org/#fetch-method
function $49e34ecf086aca0e$var$fetch(input, init = {}) {
    var _globalObject_constructor;
    $49e34ecf086aca0e$require$webidl.argumentLengthCheck(arguments, 1, {
        header: "globalThis.fetch"
    });
    // 1. Let p be a new promise.
    const p = $49e34ecf086aca0e$require$createDeferredPromise();
    // 2. Let requestObject be the result of invoking the initial value of
    // Request as constructor with input and init as arguments. If this throws
    // an exception, reject p with it and return p.
    let requestObject;
    try {
        requestObject = new $49e34ecf086aca0e$require$Request(input, init);
    } catch (e) {
        p.reject(e);
        return p.promise;
    }
    // 3. Let request be requestObject’s request.
    const request = requestObject[$49e34ecf086aca0e$require$kState];
    // 4. If requestObject’s signal’s aborted flag is set, then:
    if (requestObject.signal.aborted) {
        // 1. Abort the fetch() call with p, request, null, and
        //    requestObject’s signal’s abort reason.
        $49e34ecf086aca0e$var$abortFetch(p, request, null, requestObject.signal.reason);
        // 2. Return p.
        return p.promise;
    }
    // 5. Let globalObject be request’s client’s global object.
    const globalObject = request.client.globalObject;
    // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
    // request’s service-workers mode to "none".
    if ((globalObject === null || globalObject === void 0 ? void 0 : (_globalObject_constructor = globalObject.constructor) === null || _globalObject_constructor === void 0 ? void 0 : _globalObject_constructor.name) === "ServiceWorkerGlobalScope") request.serviceWorkers = "none";
    // 7. Let responseObject be null.
    let responseObject = null;
    // 8. Let relevantRealm be this’s relevant Realm.
    const relevantRealm = null;
    // 9. Let locallyAborted be false.
    let locallyAborted = false;
    // 10. Let controller be null.
    let controller = null;
    // 11. Add the following abort steps to requestObject’s signal:
    $49e34ecf086aca0e$require$addAbortListener(requestObject.signal, ()=>{
        // 1. Set locallyAborted to true.
        locallyAborted = true;
        // 2. Assert: controller is non-null.
        $3B1P3$assert(controller != null);
        // 3. Abort controller with requestObject’s signal’s abort reason.
        controller.abort(requestObject.signal.reason);
        // 4. Abort the fetch() call with p, request, responseObject,
        //    and requestObject’s signal’s abort reason.
        $49e34ecf086aca0e$var$abortFetch(p, request, responseObject, requestObject.signal.reason);
    });
    // 12. Let handleFetchDone given response response be to finalize and
    // report timing with response, globalObject, and "fetch".
    const handleFetchDone = (response)=>$49e34ecf086aca0e$var$finalizeAndReportTiming(response, "fetch");
    // 13. Set controller to the result of calling fetch given request,
    // with processResponseEndOfBody set to handleFetchDone, and processResponse
    // given response being these substeps:
    const processResponse = (response)=>{
        // 1. If locallyAborted is true, terminate these substeps.
        if (locallyAborted) return Promise.resolve();
        // 2. If response’s aborted flag is set, then:
        if (response.aborted) {
            // 1. Let deserializedError be the result of deserialize a serialized
            //    abort reason given controller’s serialized abort reason and
            //    relevantRealm.
            // 2. Abort the fetch() call with p, request, responseObject, and
            //    deserializedError.
            $49e34ecf086aca0e$var$abortFetch(p, request, responseObject, controller.serializedAbortReason);
            return Promise.resolve();
        }
        // 3. If response is a network error, then reject p with a TypeError
        // and terminate these substeps.
        if (response.type === "error") {
            p.reject(Object.assign(new TypeError("fetch failed"), {
                cause: response.error
            }));
            return Promise.resolve();
        }
        // 4. Set responseObject to the result of creating a Response object,
        // given response, "immutable", and relevantRealm.
        responseObject = new $49e34ecf086aca0e$require$Response();
        responseObject[$49e34ecf086aca0e$require$kState] = response;
        responseObject[$49e34ecf086aca0e$require$kRealm] = relevantRealm;
        responseObject[$49e34ecf086aca0e$require$kHeaders][$49e34ecf086aca0e$require$kHeadersList] = response.headersList;
        responseObject[$49e34ecf086aca0e$require$kHeaders][$49e34ecf086aca0e$require$kGuard] = "immutable";
        responseObject[$49e34ecf086aca0e$require$kHeaders][$49e34ecf086aca0e$require$kRealm] = relevantRealm;
        // 5. Resolve p with responseObject.
        p.resolve(responseObject);
    };
    var _init_dispatcher;
    controller = $49e34ecf086aca0e$var$fetching({
        request: request,
        processResponseEndOfBody: handleFetchDone,
        processResponse: processResponse,
        dispatcher: (_init_dispatcher = init.dispatcher) !== null && _init_dispatcher !== void 0 ? _init_dispatcher : $49e34ecf086aca0e$require$getGlobalDispatcher() // undici
    });
    // 14. Return p.
    return p.promise;
}
// https://fetch.spec.whatwg.org/#finalize-and-report-timing
function $49e34ecf086aca0e$var$finalizeAndReportTiming(response, initiatorType = "other") {
    var _response_urlList;
    // 1. If response is an aborted network error, then return.
    if (response.type === "error" && response.aborted) return;
    // 2. If response’s URL list is null or empty, then return.
    if (!((_response_urlList = response.urlList) === null || _response_urlList === void 0 ? void 0 : _response_urlList.length)) return;
    // 3. Let originalURL be response’s URL list[0].
    const originalURL = response.urlList[0];
    // 4. Let timingInfo be response’s timing info.
    let timingInfo = response.timingInfo;
    // 5. Let cacheState be response’s cache state.
    let cacheState = response.cacheState;
    // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
    if (!$49e34ecf086aca0e$require$urlIsHttpHttpsScheme(originalURL)) return;
    // 7. If timingInfo is null, then return.
    if (timingInfo === null) return;
    // 8. If response’s timing allow passed flag is not set, then:
    if (!response.timingAllowPassed) {
        //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
        timingInfo = $49e34ecf086aca0e$require$createOpaqueTimingInfo({
            startTime: timingInfo.startTime
        });
        //  2. Set cacheState to the empty string.
        cacheState = "";
    }
    // 9. Set timingInfo’s end time to the coarsened shared current time
    // given global’s relevant settings object’s cross-origin isolated
    // capability.
    // TODO: given global’s relevant settings object’s cross-origin isolated
    // capability?
    timingInfo.endTime = $49e34ecf086aca0e$require$coarsenedSharedCurrentTime();
    // 10. Set response’s timing info to timingInfo.
    response.timingInfo = timingInfo;
    // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
    // global, and cacheState.
    $49e34ecf086aca0e$var$markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
}
// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
function $49e34ecf086aca0e$var$markResourceTiming(timingInfo, originalURL, initiatorType, globalThis1, cacheState) {
    if ($49e34ecf086aca0e$require$nodeMajor > 18 || $49e34ecf086aca0e$require$nodeMajor === 18 && $49e34ecf086aca0e$require$nodeMinor >= 2) performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis1, cacheState);
}
// https://fetch.spec.whatwg.org/#abort-fetch
function $49e34ecf086aca0e$var$abortFetch(p, request, responseObject, error) {
    var _request_body, _response_body;
    // Note: AbortSignal.reason was added in node v17.2.0
    // which would give us an undefined error to reject with.
    // Remove this once node v16 is no longer supported.
    if (!error) error = new $49e34ecf086aca0e$require$DOMException("The operation was aborted.", "AbortError");
    // 1. Reject promise with error.
    p.reject(error);
    // 2. If request’s body is not null and is readable, then cancel request’s
    // body with error.
    if (request.body != null && $49e34ecf086aca0e$require$isReadable((_request_body = request.body) === null || _request_body === void 0 ? void 0 : _request_body.stream)) request.body.stream.cancel(error).catch((err)=>{
        if (err.code === "ERR_INVALID_STATE") // Node bug?
        return;
        throw err;
    });
    // 3. If responseObject is null, then return.
    if (responseObject == null) return;
    // 4. Let response be responseObject’s response.
    const response = responseObject[$49e34ecf086aca0e$require$kState];
    // 5. If response’s body is not null and is readable, then error response’s
    // body with error.
    if (response.body != null && $49e34ecf086aca0e$require$isReadable((_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.stream)) response.body.stream.cancel(error).catch((err)=>{
        if (err.code === "ERR_INVALID_STATE") // Node bug?
        return;
        throw err;
    });
}
// https://fetch.spec.whatwg.org/#fetching
function $49e34ecf086aca0e$var$fetching({ request: request, processRequestBodyChunkLength: processRequestBodyChunkLength, processRequestEndOfBody: processRequestEndOfBody, processResponse: processResponse, processResponseEndOfBody: processResponseEndOfBody, processResponseConsumeBody: processResponseConsumeBody, useParallelQueue: useParallelQueue = false, dispatcher: dispatcher // undici
 }) {
    var _request_client_globalObject_constructor, _request_client_globalObject, _request_client, _request_client1;
    // 1. Let taskDestination be null.
    let taskDestination = null;
    // 2. Let crossOriginIsolatedCapability be false.
    let crossOriginIsolatedCapability = false;
    // 3. If request’s client is non-null, then:
    if (request.client != null) {
        // 1. Set taskDestination to request’s client’s global object.
        taskDestination = request.client.globalObject;
        // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
        // isolated capability.
        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
    }
    // 4. If useParallelQueue is true, then set taskDestination to the result of
    // starting a new parallel queue.
    // TODO
    // 5. Let timingInfo be a new fetch timing info whose start time and
    // post-redirect start time are the coarsened shared current time given
    // crossOriginIsolatedCapability.
    const currenTime = $49e34ecf086aca0e$require$coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
    const timingInfo = $49e34ecf086aca0e$require$createOpaqueTimingInfo({
        startTime: currenTime
    });
    // 6. Let fetchParams be a new fetch params whose
    // request is request,
    // timing info is timingInfo,
    // process request body chunk length is processRequestBodyChunkLength,
    // process request end-of-body is processRequestEndOfBody,
    // process response is processResponse,
    // process response consume body is processResponseConsumeBody,
    // process response end-of-body is processResponseEndOfBody,
    // task destination is taskDestination,
    // and cross-origin isolated capability is crossOriginIsolatedCapability.
    const fetchParams = {
        controller: new $49e34ecf086aca0e$var$Fetch(dispatcher),
        request: request,
        timingInfo: timingInfo,
        processRequestBodyChunkLength: processRequestBodyChunkLength,
        processRequestEndOfBody: processRequestEndOfBody,
        processResponse: processResponse,
        processResponseConsumeBody: processResponseConsumeBody,
        processResponseEndOfBody: processResponseEndOfBody,
        taskDestination: taskDestination,
        crossOriginIsolatedCapability: crossOriginIsolatedCapability
    };
    // 7. If request’s body is a byte sequence, then set request’s body to
    //    request’s body as a body.
    // NOTE: Since fetching is only called from fetch, body should already be
    // extracted.
    $3B1P3$assert(!request.body || request.body.stream);
    // 8. If request’s window is "client", then set request’s window to request’s
    // client, if request’s client’s global object is a Window object; otherwise
    // "no-window".
    if (request.window === "client") // TODO: What if request.client is null?
    request.window = ((_request_client = request.client) === null || _request_client === void 0 ? void 0 : (_request_client_globalObject = _request_client.globalObject) === null || _request_client_globalObject === void 0 ? void 0 : (_request_client_globalObject_constructor = _request_client_globalObject.constructor) === null || _request_client_globalObject_constructor === void 0 ? void 0 : _request_client_globalObject_constructor.name) === "Window" ? request.client : "no-window";
    // 9. If request’s origin is "client", then set request’s origin to request’s
    // client’s origin.
    if (request.origin === "client") // TODO: What if request.client is null?
    request.origin = (_request_client1 = request.client) === null || _request_client1 === void 0 ? void 0 : _request_client1.origin;
    // 10. If all of the following conditions are true:
    // TODO
    // 11. If request’s policy container is "client", then:
    if (request.policyContainer === "client") {
        // 1. If request’s client is non-null, then set request’s policy
        // container to a clone of request’s client’s policy container. [HTML]
        if (request.client != null) request.policyContainer = $49e34ecf086aca0e$require$clonePolicyContainer(request.client.policyContainer);
        else // 2. Otherwise, set request’s policy container to a new policy
        // container.
        request.policyContainer = $49e34ecf086aca0e$require$makePolicyContainer();
    }
    // 12. If request’s header list does not contain `Accept`, then:
    if (!request.headersList.contains("accept")) {
        // 1. Let value be `*/*`.
        const value = "*/*";
        // 2. A user agent should set value to the first matching statement, if
        // any, switching on request’s destination:
        // "document"
        // "frame"
        // "iframe"
        // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
        // "image"
        // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
        // "style"
        // `text/css,*/*;q=0.1`
        // TODO
        // 3. Append `Accept`/value to request’s header list.
        request.headersList.append("accept", value);
    }
    // 13. If request’s header list does not contain `Accept-Language`, then
    // user agents should append `Accept-Language`/an appropriate value to
    // request’s header list.
    if (!request.headersList.contains("accept-language")) request.headersList.append("accept-language", "*");
    // 14. If request’s priority is null, then use request’s initiator and
    // destination appropriately in setting request’s priority to a
    // user-agent-defined object.
    request.priority;
    // 15. If request is a subresource request, then:
    $49e34ecf086aca0e$require$subresourceSet.has(request.destination);
    // 16. Run main fetch given fetchParams.
    $49e34ecf086aca0e$var$mainFetch(fetchParams).catch((err)=>{
        fetchParams.controller.terminate(err);
    });
    // 17. Return fetchParam's controller
    return fetchParams.controller;
}
// https://fetch.spec.whatwg.org/#concept-main-fetch
async function $49e34ecf086aca0e$var$mainFetch(fetchParams, recursive = false) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let response be null.
    let response = null;
    // 3. If request’s local-URLs-only flag is set and request’s current URL is
    // not local, then set response to a network error.
    if (request.localURLsOnly && !$49e34ecf086aca0e$require$urlIsLocal($49e34ecf086aca0e$require$requestCurrentURL(request))) response = $49e34ecf086aca0e$require$makeNetworkError("local URLs only");
    // 4. Run report Content Security Policy violations for request.
    // TODO
    // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
    $49e34ecf086aca0e$require$tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
    // 6. If should request be blocked due to a bad port, should fetching request
    // be blocked as mixed content, or should request be blocked by Content
    // Security Policy returns blocked, then set response to a network error.
    if ($49e34ecf086aca0e$require$requestBadPort(request) === "blocked") response = $49e34ecf086aca0e$require$makeNetworkError("bad port");
    // TODO: should fetching request be blocked as mixed content?
    // TODO: should request be blocked by Content Security Policy?
    // 7. If request’s referrer policy is the empty string, then set request’s
    // referrer policy to request’s policy container’s referrer policy.
    if (request.referrerPolicy === "") request.referrerPolicy = request.policyContainer.referrerPolicy;
    // 8. If request’s referrer is not "no-referrer", then set request’s
    // referrer to the result of invoking determine request’s referrer.
    if (request.referrer !== "no-referrer") request.referrer = $49e34ecf086aca0e$require$determineRequestsReferrer(request);
    // 9. Set request’s current URL’s scheme to "https" if all of the following
    // conditions are true:
    // - request’s current URL’s scheme is "http"
    // - request’s current URL’s host is a domain
    // - Matching request’s current URL’s host per Known HSTS Host Domain Name
    //   Matching results in either a superdomain match with an asserted
    //   includeSubDomains directive or a congruent match (with or without an
    //   asserted includeSubDomains directive). [HSTS]
    // TODO
    // 10. If recursive is false, then run the remaining steps in parallel.
    // TODO
    // 11. If response is null, then set response to the result of running
    // the steps corresponding to the first matching statement:
    if (response === null) response = await (async ()=>{
        const currentURL = $49e34ecf086aca0e$require$requestCurrentURL(request);
        if (// - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        $49e34ecf086aca0e$require$sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || // request’s current URL’s scheme is "data"
        currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
        request.mode === "navigate" || request.mode === "websocket") {
            // 1. Set request’s response tainting to "basic".
            request.responseTainting = "basic";
            // 2. Return the result of running scheme fetch given fetchParams.
            return await $49e34ecf086aca0e$var$schemeFetch(fetchParams);
        }
        // request’s mode is "same-origin"
        if (request.mode === "same-origin") // 1. Return a network error.
        return $49e34ecf086aca0e$require$makeNetworkError('request mode cannot be "same-origin"');
        // request’s mode is "no-cors"
        if (request.mode === "no-cors") {
            // 1. If request’s redirect mode is not "follow", then return a network
            // error.
            if (request.redirect !== "follow") return $49e34ecf086aca0e$require$makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
            // 2. Set request’s response tainting to "opaque".
            request.responseTainting = "opaque";
            // 3. Return the result of running scheme fetch given fetchParams.
            return await $49e34ecf086aca0e$var$schemeFetch(fetchParams);
        }
        // request’s current URL’s scheme is not an HTTP(S) scheme
        if (!$49e34ecf086aca0e$require$urlIsHttpHttpsScheme($49e34ecf086aca0e$require$requestCurrentURL(request))) // Return a network error.
        return $49e34ecf086aca0e$require$makeNetworkError("URL scheme must be a HTTP(S) scheme");
        // - request’s use-CORS-preflight flag is set
        // - request’s unsafe-request flag is set and either request’s method is
        //   not a CORS-safelisted method or CORS-unsafe request-header names with
        //   request’s header list is not empty
        //    1. Set request’s response tainting to "cors".
        //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
        //    given fetchParams and true.
        //    3. If corsWithPreflightResponse is a network error, then clear cache
        //    entries using request.
        //    4. Return corsWithPreflightResponse.
        // TODO
        // Otherwise
        //    1. Set request’s response tainting to "cors".
        request.responseTainting = "cors";
        //    2. Return the result of running HTTP fetch given fetchParams.
        return await $49e34ecf086aca0e$var$httpFetch(fetchParams);
    })();
    // 12. If recursive is true, then return response.
    if (recursive) return response;
    // 13. If response is not a network error and response is not a filtered
    // response, then:
    if (response.status !== 0 && !response.internalResponse) {
        // If request’s response tainting is "cors", then:
        request.responseTainting;
        // Set response to the following filtered response with response as its
        // internal response, depending on request’s response tainting:
        if (request.responseTainting === "basic") response = $49e34ecf086aca0e$require$filterResponse(response, "basic");
        else if (request.responseTainting === "cors") response = $49e34ecf086aca0e$require$filterResponse(response, "cors");
        else if (request.responseTainting === "opaque") response = $49e34ecf086aca0e$require$filterResponse(response, "opaque");
        else $3B1P3$assert(false);
    }
    // 14. Let internalResponse be response, if response is a network error,
    // and response’s internal response otherwise.
    let internalResponse = response.status === 0 ? response : response.internalResponse;
    // 15. If internalResponse’s URL list is empty, then set it to a clone of
    // request’s URL list.
    if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request.urlList);
    // 16. If request’s timing allow failed flag is unset, then set
    // internalResponse’s timing allow passed flag.
    if (!request.timingAllowFailed) response.timingAllowPassed = true;
    // 17. If response is not a network error and any of the following returns
    // blocked
    // - should internalResponse to request be blocked as mixed content
    // - should internalResponse to request be blocked by Content Security Policy
    // - should internalResponse to request be blocked due to its MIME type
    // - should internalResponse to request be blocked due to nosniff
    // TODO
    // 18. If response’s type is "opaque", internalResponse’s status is 206,
    // internalResponse’s range-requested flag is set, and request’s header
    // list does not contain `Range`, then set response and internalResponse
    // to a network error.
    if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) response = internalResponse = $49e34ecf086aca0e$require$makeNetworkError();
    // 19. If response is not a network error and either request’s method is
    // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
    // set internalResponse’s body to null and disregard any enqueuing toward
    // it (if any).
    if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || $49e34ecf086aca0e$require$nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
    }
    // 20. If request’s integrity metadata is not the empty string, then:
    if (request.integrity) {
        // 1. Let processBodyError be this step: run fetch finale given fetchParams
        // and a network error.
        const processBodyError = (reason)=>$49e34ecf086aca0e$var$fetchFinale(fetchParams, $49e34ecf086aca0e$require$makeNetworkError(reason));
        // 2. If request’s response tainting is "opaque", or response’s body is null,
        // then run processBodyError and abort these steps.
        if (request.responseTainting === "opaque" || response.body == null) {
            processBodyError(response.error);
            return;
        }
        // 3. Let processBody given bytes be these steps:
        const processBody = (bytes)=>{
            // 1. If bytes do not match request’s integrity metadata,
            // then run processBodyError and abort these steps. [SRI]
            if (!$49e34ecf086aca0e$require$bytesMatch(bytes, request.integrity)) {
                processBodyError("integrity mismatch");
                return;
            }
            // 2. Set response’s body to bytes as a body.
            response.body = $49e34ecf086aca0e$require$safelyExtractBody(bytes)[0];
            // 3. Run fetch finale given fetchParams and response.
            $49e34ecf086aca0e$var$fetchFinale(fetchParams, response);
        };
        // 4. Fully read response’s body given processBody and processBodyError.
        await $49e34ecf086aca0e$require$fullyReadBody(response.body, processBody, processBodyError);
    } else // 21. Otherwise, run fetch finale given fetchParams and response.
    $49e34ecf086aca0e$var$fetchFinale(fetchParams, response);
}

// https://fetch.spec.whatwg.org/#concept-scheme-fetch
// given a fetch params fetchParams
function $49e34ecf086aca0e$var$schemeFetch(fetchParams) {
    // Note: since the connection is destroyed on redirect, which sets fetchParams to a
    // cancelled state, we do not want this condition to trigger *unless* there have been
    // no redirects. See https://github.com/nodejs/undici/issues/1776
    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if ($49e34ecf086aca0e$require$isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve($49e34ecf086aca0e$require$makeAppropriateNetworkError(fetchParams));
    // 2. Let request be fetchParams’s request.
    const { request: request } = fetchParams;
    const { protocol: scheme } = $49e34ecf086aca0e$require$requestCurrentURL(request);
    // 3. Switch on request’s current URL’s scheme and run the associated steps:
    switch(scheme){
        case "about:":
            // If request’s current URL’s path is the string "blank", then return a new response
            // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
            // and body is the empty byte sequence as a body.
            // Otherwise, return a network error.
            return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("about scheme is not supported"));
        case "blob:":
            {
                if (!$49e34ecf086aca0e$var$resolveObjectURL) $49e34ecf086aca0e$var$resolveObjectURL = $3B1P3$buffer.resolveObjectURL;
                // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
                const blobURLEntry = $49e34ecf086aca0e$require$requestCurrentURL(request);
                // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
                // Buffer.resolveObjectURL does not ignore URL queries.
                if (blobURLEntry.search.length !== 0) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("NetworkError when attempting to fetch resource."));
                const blobURLEntryObject = $49e34ecf086aca0e$var$resolveObjectURL(blobURLEntry.toString());
                // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
                //    object is not a Blob object, then return a network error.
                if (request.method !== "GET" || !$49e34ecf086aca0e$require$isBlobLike(blobURLEntryObject)) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("invalid method"));
                // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
                const bodyWithType = $49e34ecf086aca0e$require$safelyExtractBody(blobURLEntryObject);
                // 4. Let body be bodyWithType’s body.
                const body = bodyWithType[0];
                // 5. Let length be body’s length, serialized and isomorphic encoded.
                const length = $49e34ecf086aca0e$require$isomorphicEncode(`${body.length}`);
                var _bodyWithType_;
                // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
                const type = (_bodyWithType_ = bodyWithType[1]) !== null && _bodyWithType_ !== void 0 ? _bodyWithType_ : "";
                // 7. Return a new response whose status message is `OK`, header list is
                //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
                const response = $49e34ecf086aca0e$require$makeResponse({
                    statusText: "OK",
                    headersList: [
                        [
                            "content-length",
                            {
                                name: "Content-Length",
                                value: length
                            }
                        ],
                        [
                            "content-type",
                            {
                                name: "Content-Type",
                                value: type
                            }
                        ]
                    ]
                });
                response.body = body;
                return Promise.resolve(response);
            }
        case "data:":
            {
                // 1. Let dataURLStruct be the result of running the
                //    data: URL processor on request’s current URL.
                const currentURL = $49e34ecf086aca0e$require$requestCurrentURL(request);
                const dataURLStruct = $49e34ecf086aca0e$require$dataURLProcessor(currentURL);
                // 2. If dataURLStruct is failure, then return a
                //    network error.
                if (dataURLStruct === "failure") return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("failed to fetch the data URL"));
                // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
                const mimeType = $49e34ecf086aca0e$require$serializeAMimeType(dataURLStruct.mimeType);
                // 4. Return a response whose status message is `OK`,
                //    header list is « (`Content-Type`, mimeType) »,
                //    and body is dataURLStruct’s body as a body.
                return Promise.resolve($49e34ecf086aca0e$require$makeResponse({
                    statusText: "OK",
                    headersList: [
                        [
                            "content-type",
                            {
                                name: "Content-Type",
                                value: mimeType
                            }
                        ]
                    ],
                    body: $49e34ecf086aca0e$require$safelyExtractBody(dataURLStruct.body)[0]
                }));
            }
        case "file:":
            // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
            // When in doubt, return a network error.
            return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("not implemented... yet..."));
        case "http:":
        case "https:":
            // Return the result of running HTTP fetch given fetchParams.
            return $49e34ecf086aca0e$var$httpFetch(fetchParams).catch((err)=>$49e34ecf086aca0e$require$makeNetworkError(err));
        default:
            return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("unknown scheme"));
    }
}
// https://fetch.spec.whatwg.org/#finalize-response
function $49e34ecf086aca0e$var$finalizeResponse(fetchParams, response) {
    // 1. Set fetchParams’s request’s done flag.
    fetchParams.request.done = true;
    // 2, If fetchParams’s process response done is not null, then queue a fetch
    // task to run fetchParams’s process response done given response, with
    // fetchParams’s task destination.
    if (fetchParams.processResponseDone != null) queueMicrotask(()=>fetchParams.processResponseDone(response));
}
// https://fetch.spec.whatwg.org/#fetch-finale
function $49e34ecf086aca0e$var$fetchFinale(fetchParams, response) {
    // 1. If response is a network error, then:
    if (response.type === "error") {
        // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
        response.urlList = [
            fetchParams.request.urlList[0]
        ];
        // 2. Set response’s timing info to the result of creating an opaque timing
        // info for fetchParams’s timing info.
        response.timingInfo = $49e34ecf086aca0e$require$createOpaqueTimingInfo({
            startTime: fetchParams.timingInfo.startTime
        });
    }
    // 2. Let processResponseEndOfBody be the following steps:
    const processResponseEndOfBody = ()=>{
        // 1. Set fetchParams’s request’s done flag.
        fetchParams.request.done = true;
        // If fetchParams’s process response end-of-body is not null,
        // then queue a fetch task to run fetchParams’s process response
        // end-of-body given response with fetchParams’s task destination.
        if (fetchParams.processResponseEndOfBody != null) queueMicrotask(()=>fetchParams.processResponseEndOfBody(response));
    };
    // 3. If fetchParams’s process response is non-null, then queue a fetch task
    // to run fetchParams’s process response given response, with fetchParams’s
    // task destination.
    if (fetchParams.processResponse != null) queueMicrotask(()=>fetchParams.processResponse(response));
    // 4. If response’s body is null, then run processResponseEndOfBody.
    if (response.body == null) processResponseEndOfBody();
    else {
        // 5. Otherwise:
        // 1. Let transformStream be a new a TransformStream.
        // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
        // enqueues chunk in transformStream.
        const identityTransformAlgorithm = (chunk, controller)=>{
            controller.enqueue(chunk);
        };
        // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
        // and flushAlgorithm set to processResponseEndOfBody.
        const transformStream = new $49e34ecf086aca0e$require$TransformStream({
            start () {},
            transform: identityTransformAlgorithm,
            flush: processResponseEndOfBody
        }, {
            size () {
                return 1;
            }
        }, {
            size () {
                return 1;
            }
        });
        // 4. Set response’s body to the result of piping response’s body through transformStream.
        response.body = {
            stream: response.body.stream.pipeThrough(transformStream)
        };
    }
    // 6. If fetchParams’s process response consume body is non-null, then:
    if (fetchParams.processResponseConsumeBody != null) {
        // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
        // process response consume body given response and nullOrBytes.
        const processBody = (nullOrBytes)=>fetchParams.processResponseConsumeBody(response, nullOrBytes);
        // 2. Let processBodyError be this step: run fetchParams’s process
        // response consume body given response and failure.
        const processBodyError = (failure)=>fetchParams.processResponseConsumeBody(response, failure);
        // 3. If response’s body is null, then queue a fetch task to run processBody
        // given null, with fetchParams’s task destination.
        if (response.body == null) queueMicrotask(()=>processBody(null));
        else // 4. Otherwise, fully read response’s body given processBody, processBodyError,
        // and fetchParams’s task destination.
        return $49e34ecf086aca0e$require$fullyReadBody(response.body, processBody, processBodyError);
        return Promise.resolve();
    }
}
// https://fetch.spec.whatwg.org/#http-fetch
async function $49e34ecf086aca0e$var$httpFetch(fetchParams) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let response be null.
    let response = null;
    // 3. Let actualResponse be null.
    let actualResponse = null;
    // 4. Let timingInfo be fetchParams’s timing info.
    const timingInfo = fetchParams.timingInfo;
    // 5. If request’s service-workers mode is "all", then:
    request.serviceWorkers;
    // 6. If response is null, then:
    if (response === null) {
        // 1. If makeCORSPreflight is true and one of these conditions is true:
        // TODO
        // 2. If request’s redirect mode is "follow", then set request’s
        // service-workers mode to "none".
        if (request.redirect === "follow") request.serviceWorkers = "none";
        // 3. Set response and actualResponse to the result of running
        // HTTP-network-or-cache fetch given fetchParams.
        actualResponse = response = await $49e34ecf086aca0e$var$httpNetworkOrCacheFetch(fetchParams);
        // 4. If request’s response tainting is "cors" and a CORS check
        // for request and response returns failure, then return a network error.
        if (request.responseTainting === "cors" && $49e34ecf086aca0e$require$corsCheck(request, response) === "failure") return $49e34ecf086aca0e$require$makeNetworkError("cors failure");
        // 5. If the TAO check for request and response returns failure, then set
        // request’s timing allow failed flag.
        if ($49e34ecf086aca0e$require$TAOCheck(request, response) === "failure") request.timingAllowFailed = true;
    }
    // 7. If either request’s response tainting or response’s type
    // is "opaque", and the cross-origin resource policy check with
    // request’s origin, request’s client, request’s destination,
    // and actualResponse returns blocked, then return a network error.
    if ((request.responseTainting === "opaque" || response.type === "opaque") && $49e34ecf086aca0e$require$crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === "blocked") return $49e34ecf086aca0e$require$makeNetworkError("blocked");
    // 8. If actualResponse’s status is a redirect status, then:
    if ($49e34ecf086aca0e$require$redirectStatusSet.has(actualResponse.status)) {
        // 1. If actualResponse’s status is not 303, request’s body is not null,
        // and the connection uses HTTP/2, then user agents may, and are even
        // encouraged to, transmit an RST_STREAM frame.
        // See, https://github.com/whatwg/fetch/issues/1288
        if (request.redirect !== "manual") fetchParams.controller.connection.destroy();
        // 2. Switch on request’s redirect mode:
        if (request.redirect === "error") // Set response to a network error.
        response = $49e34ecf086aca0e$require$makeNetworkError("unexpected redirect");
        else if (request.redirect === "manual") // Set response to an opaque-redirect filtered response whose internal
        // response is actualResponse.
        // NOTE(spec): On the web this would return an `opaqueredirect` response,
        // but that doesn't make sense server side.
        // See https://github.com/nodejs/undici/issues/1193.
        response = actualResponse;
        else if (request.redirect === "follow") // Set response to the result of running HTTP-redirect fetch given
        // fetchParams and response.
        response = await $49e34ecf086aca0e$var$httpRedirectFetch(fetchParams, response);
        else $3B1P3$assert(false);
    }
    // 9. Set response’s timing info to timingInfo.
    response.timingInfo = timingInfo;
    // 10. Return response.
    return response;
}
// https://fetch.spec.whatwg.org/#http-redirect-fetch
function $49e34ecf086aca0e$var$httpRedirectFetch(fetchParams, response) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let actualResponse be response, if response is not a filtered response,
    // and response’s internal response otherwise.
    const actualResponse = response.internalResponse ? response.internalResponse : response;
    // 3. Let locationURL be actualResponse’s location URL given request’s current
    // URL’s fragment.
    let locationURL;
    try {
        locationURL = $49e34ecf086aca0e$require$responseLocationURL(actualResponse, $49e34ecf086aca0e$require$requestCurrentURL(request).hash);
        // 4. If locationURL is null, then return response.
        if (locationURL == null) return response;
    } catch (err) {
        // 5. If locationURL is failure, then return a network error.
        return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError(err));
    }
    // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
    // error.
    if (!$49e34ecf086aca0e$require$urlIsHttpHttpsScheme(locationURL)) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("URL scheme must be a HTTP(S) scheme"));
    // 7. If request’s redirect count is 20, then return a network error.
    if (request.redirectCount === 20) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError("redirect count exceeded"));
    // 8. Increase request’s redirect count by 1.
    request.redirectCount += 1;
    // 9. If request’s mode is "cors", locationURL includes credentials, and
    // request’s origin is not same origin with locationURL’s origin, then return
    //  a network error.
    if (request.mode === "cors" && (locationURL.username || locationURL.password) && !$49e34ecf086aca0e$require$sameOrigin(request, locationURL)) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError('cross origin not allowed for request mode "cors"'));
    // 10. If request’s response tainting is "cors" and locationURL includes
    // credentials, then return a network error.
    if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError('URL cannot contain credentials for request mode "cors"'));
    // 11. If actualResponse’s status is not 303, request’s body is non-null,
    // and request’s body’s source is null, then return a network error.
    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) return Promise.resolve($49e34ecf086aca0e$require$makeNetworkError());
    // 12. If one of the following is true
    // - actualResponse’s status is 301 or 302 and request’s method is `POST`
    // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
    if ([
        301,
        302
    ].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !$49e34ecf086aca0e$var$GET_OR_HEAD.includes(request.method)) {
        // then:
        // 1. Set request’s method to `GET` and request’s body to null.
        request.method = "GET";
        request.body = null;
        // 2. For each headerName of request-body-header name, delete headerName from
        // request’s header list.
        for (const headerName of $49e34ecf086aca0e$require$requestBodyHeader)request.headersList.delete(headerName);
    }
    // 13. If request’s current URL’s origin is not same origin with locationURL’s
    //     origin, then for each headerName of CORS non-wildcard request-header name,
    //     delete headerName from request’s header list.
    if (!$49e34ecf086aca0e$require$sameOrigin($49e34ecf086aca0e$require$requestCurrentURL(request), locationURL)) {
        // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
        request.headersList.delete("authorization");
        // https://fetch.spec.whatwg.org/#authentication-entries
        request.headersList.delete("proxy-authorization", true);
        // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
        request.headersList.delete("cookie");
        request.headersList.delete("host");
    }
    // 14. If request’s body is non-null, then set request’s body to the first return
    // value of safely extracting request’s body’s source.
    if (request.body != null) {
        $3B1P3$assert(request.body.source != null);
        request.body = $49e34ecf086aca0e$require$safelyExtractBody(request.body.source)[0];
    }
    // 15. Let timingInfo be fetchParams’s timing info.
    const timingInfo = fetchParams.timingInfo;
    // 16. Set timingInfo’s redirect end time and post-redirect start time to the
    // coarsened shared current time given fetchParams’s cross-origin isolated
    // capability.
    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = $49e34ecf086aca0e$require$coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
    // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
    //  redirect start time to timingInfo’s start time.
    if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
    // 18. Append locationURL to request’s URL list.
    request.urlList.push(locationURL);
    // 19. Invoke set request’s referrer policy on redirect on request and
    // actualResponse.
    $49e34ecf086aca0e$require$setRequestReferrerPolicyOnRedirect(request, actualResponse);
    // 20. Return the result of running main fetch given fetchParams and true.
    return $49e34ecf086aca0e$var$mainFetch(fetchParams, true);
}
// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
async function $49e34ecf086aca0e$var$httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let httpFetchParams be null.
    let httpFetchParams = null;
    // 3. Let httpRequest be null.
    let httpRequest = null;
    // 4. Let response be null.
    let response = null;
    // 5. Let storedResponse be null.
    // TODO: cache
    // 6. Let httpCache be null.
    const httpCache = null;
    // 7. Let the revalidatingFlag be unset.
    const revalidatingFlag = false;
    // 8. Run these steps, but abort when the ongoing fetch is terminated:
    //    1. If request’s window is "no-window" and request’s redirect mode is
    //    "error", then set httpFetchParams to fetchParams and httpRequest to
    //    request.
    if (request.window === "no-window" && request.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request;
    } else {
        // Otherwise:
        // 1. Set httpRequest to a clone of request.
        httpRequest = $49e34ecf086aca0e$require$makeRequest(request);
        // 2. Set httpFetchParams to a copy of fetchParams.
        httpFetchParams = {
            ...fetchParams
        };
        // 3. Set httpFetchParams’s request to httpRequest.
        httpFetchParams.request = httpRequest;
    }
    //    3. Let includeCredentials be true if one of
    const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
    //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
    //    body is non-null; otherwise null.
    const contentLength = httpRequest.body ? httpRequest.body.length : null;
    //    5. Let contentLengthHeaderValue be null.
    let contentLengthHeaderValue = null;
    //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
    //    `PUT`, then set contentLengthHeaderValue to `0`.
    if (httpRequest.body == null && [
        "POST",
        "PUT"
    ].includes(httpRequest.method)) contentLengthHeaderValue = "0";
    //    7. If contentLength is non-null, then set contentLengthHeaderValue to
    //    contentLength, serialized and isomorphic encoded.
    if (contentLength != null) contentLengthHeaderValue = $49e34ecf086aca0e$require$isomorphicEncode(`${contentLength}`);
    //    8. If contentLengthHeaderValue is non-null, then append
    //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
    //    list.
    if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue);
    //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
    //    contentLengthHeaderValue) to httpRequest’s header list.
    //    10. If contentLength is non-null and httpRequest’s keepalive is true,
    //    then:
    contentLength != null && httpRequest.keepalive;
    //    11. If httpRequest’s referrer is a URL, then append
    //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
    //     to httpRequest’s header list.
    if (httpRequest.referrer instanceof URL) httpRequest.headersList.append("referer", $49e34ecf086aca0e$require$isomorphicEncode(httpRequest.referrer.href));
    //    12. Append a request `Origin` header for httpRequest.
    $49e34ecf086aca0e$require$appendRequestOriginHeader(httpRequest);
    //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
    $49e34ecf086aca0e$require$appendFetchMetadata(httpRequest);
    //    14. If httpRequest’s header list does not contain `User-Agent`, then
    //    user agents should append `User-Agent`/default `User-Agent` value to
    //    httpRequest’s header list.
    if (!httpRequest.headersList.contains("user-agent")) httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
    //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
    //    list contains `If-Modified-Since`, `If-None-Match`,
    //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
    //    httpRequest’s cache mode to "no-store".
    if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) httpRequest.cache = "no-store";
    //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
    //    no-cache cache-control header modification flag is unset, and
    //    httpRequest’s header list does not contain `Cache-Control`, then append
    //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
    if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "max-age=0");
    //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
    if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        // 1. If httpRequest’s header list does not contain `Pragma`, then append
        // `Pragma`/`no-cache` to httpRequest’s header list.
        if (!httpRequest.headersList.contains("pragma")) httpRequest.headersList.append("pragma", "no-cache");
        // 2. If httpRequest’s header list does not contain `Cache-Control`,
        // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
        if (!httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "no-cache");
    }
    //    18. If httpRequest’s header list contains `Range`, then append
    //    `Accept-Encoding`/`identity` to httpRequest’s header list.
    if (httpRequest.headersList.contains("range")) httpRequest.headersList.append("accept-encoding", "identity");
    //    19. Modify httpRequest’s header list per HTTP. Do not append a given
    //    header if httpRequest’s header list contains that header’s name.
    //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
    if (!httpRequest.headersList.contains("accept-encoding")) {
        if ($49e34ecf086aca0e$require$urlHasHttpsScheme($49e34ecf086aca0e$require$requestCurrentURL(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        else httpRequest.headersList.append("accept-encoding", "gzip, deflate");
    }
    httpRequest.headersList.delete("host");
    //    20. If includeCredentials is true, then:
    includeCredentials;
    //    21. If there’s a proxy-authentication entry, use it as appropriate.
    //    TODO: proxy-authentication
    //    22. Set httpCache to the result of determining the HTTP cache
    //    partition, given httpRequest.
    //    TODO: cache
    //    23. If httpCache is null, then set httpRequest’s cache mode to
    //    "no-store".
    if (httpCache == null) httpRequest.cache = "no-store";
    //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
    //    then:
    httpRequest.mode !== "no-store" && httpRequest.mode;
    // 9. If aborted, then return the appropriate network error for fetchParams.
    // TODO
    // 10. If response is null, then:
    if (response == null) {
        // 1. If httpRequest’s cache mode is "only-if-cached", then return a
        // network error.
        if (httpRequest.mode === "only-if-cached") return $49e34ecf086aca0e$require$makeNetworkError("only if cached");
        // 2. Let forwardResponse be the result of running HTTP-network fetch
        // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
        const forwardResponse = await $49e34ecf086aca0e$var$httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
        // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
        // in the range 200 to 399, inclusive, invalidate appropriate stored
        // responses in httpCache, as per the "Invalidation" chapter of HTTP
        // Caching, and set storedResponse to null. [HTTP-CACHING]
        !$49e34ecf086aca0e$require$safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status;
        // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
        // then:
        revalidatingFlag && forwardResponse.status;
        // 5. If response is null, then:
        if (response == null) // 1. Set response to forwardResponse.
        response = forwardResponse;
    }
    // 11. Set response’s URL list to a clone of httpRequest’s URL list.
    response.urlList = [
        ...httpRequest.urlList
    ];
    // 12. If httpRequest’s header list contains `Range`, then set response’s
    // range-requested flag.
    if (httpRequest.headersList.contains("range")) response.rangeRequested = true;
    // 13. Set response’s request-includes-credentials to includeCredentials.
    response.requestIncludesCredentials = includeCredentials;
    // 14. If response’s status is 401, httpRequest’s response tainting is not
    // "cors", includeCredentials is true, and request’s window is an environment
    // settings object, then:
    // TODO
    // 15. If response’s status is 407, then:
    if (response.status === 407) {
        // 1. If request’s window is "no-window", then return a network error.
        if (request.window === "no-window") return $49e34ecf086aca0e$require$makeNetworkError();
        // 2. ???
        // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
        if ($49e34ecf086aca0e$require$isCancelled(fetchParams)) return $49e34ecf086aca0e$require$makeAppropriateNetworkError(fetchParams);
        // 4. Prompt the end user as appropriate in request’s window and store
        // the result as a proxy-authentication entry. [HTTP-AUTH]
        // TODO: Invoke some kind of callback?
        // 5. Set response to the result of running HTTP-network-or-cache fetch given
        // fetchParams.
        // TODO
        return $49e34ecf086aca0e$require$makeNetworkError("proxy authentication required");
    }
    // 16. If all of the following are true
    if (// response’s status is 421
    response.status === 421 && // isNewConnectionFetch is false
    !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
    (request.body == null || request.body.source != null)) {
        // then:
        // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
        if ($49e34ecf086aca0e$require$isCancelled(fetchParams)) return $49e34ecf086aca0e$require$makeAppropriateNetworkError(fetchParams);
        // 2. Set response to the result of running HTTP-network-or-cache
        // fetch given fetchParams, isAuthenticationFetch, and true.
        // TODO (spec): The spec doesn't specify this but we need to cancel
        // the active response before we can start a new one.
        // https://github.com/whatwg/fetch/issues/1293
        fetchParams.controller.connection.destroy();
        response = await $49e34ecf086aca0e$var$httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
    }
    // 17. If isAuthenticationFetch is true, then create an authentication entry
    isAuthenticationFetch;
    // 18. Return response.
    return response;
}

// https://fetch.spec.whatwg.org/#http-network-fetch
async function $49e34ecf086aca0e$var$httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
    $3B1P3$assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
    fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy (err) {
            if (!this.destroyed) {
                var _this_abort, _this;
                this.destroyed = true;
                (_this_abort = (_this = this).abort) === null || _this_abort === void 0 ? void 0 : _this_abort.call(_this, err !== null && err !== void 0 ? err : new $49e34ecf086aca0e$require$DOMException("The operation was aborted.", "AbortError"));
            }
        }
    };
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let response be null.
    let response = null;
    // 3. Let timingInfo be fetchParams’s timing info.
    const timingInfo = fetchParams.timingInfo;
    // 4. Let httpCache be the result of determining the HTTP cache partition,
    // given request.
    // TODO: cache
    const httpCache = null;
    // 5. If httpCache is null, then set request’s cache mode to "no-store".
    if (httpCache == null) request.cache = "no-store";
    // 6. Let networkPartitionKey be the result of determining the network
    // partition key given request.
    // TODO
    // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
    // "no".
    const newConnection = forceNewConnection ? "yes" : "no" // eslint-disable-line no-unused-vars
    ;
    // 8. Switch on request’s mode:
    request.mode;
    // 9. Run these steps, but abort when the ongoing fetch is terminated:
    //    1. If connection is failure, then return a network error.
    //    2. Set timingInfo’s final connection timing info to the result of
    //    calling clamp and coarsen connection timing info with connection’s
    //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
    //    cross-origin isolated capability.
    //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
    //    and request’s body’s source is null, then append (`Transfer-Encoding`,
    //    `chunked`) to request’s header list.
    //    4. Set timingInfo’s final network-request start time to the coarsened
    //    shared current time given fetchParams’s cross-origin isolated
    //    capability.
    //    5. Set response to the result of making an HTTP request over connection
    //    using request with the following caveats:
    //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
    //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]
    //        - If request’s body is non-null, and request’s body’s source is null,
    //        then the user agent may have a buffer of up to 64 kibibytes and store
    //        a part of request’s body in that buffer. If the user agent reads from
    //        request’s body beyond that buffer’s size and the user agent needs to
    //        resend request, then instead return a network error.
    //        - Set timingInfo’s final network-response start time to the coarsened
    //        shared current time given fetchParams’s cross-origin isolated capability,
    //        immediately after the user agent’s HTTP parser receives the first byte
    //        of the response (e.g., frame header bytes for HTTP/2 or response status
    //        line for HTTP/1.x).
    //        - Wait until all the headers are transmitted.
    //        - Any responses whose status is in the range 100 to 199, inclusive,
    //        and is not 101, are to be ignored, except for the purposes of setting
    //        timingInfo’s final network-response start time above.
    //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
    //    response is transferred via HTTP/1.0 or older, then return a network
    //    error.
    //    - If the HTTP request results in a TLS client certificate dialog, then:
    //        1. If request’s window is an environment settings object, make the
    //        dialog available in request’s window.
    //        2. Otherwise, return a network error.
    // To transmit request’s body body, run these steps:
    let requestBody = null;
    // 1. If body is null and fetchParams’s process request end-of-body is
    // non-null, then queue a fetch task given fetchParams’s process request
    // end-of-body and fetchParams’s task destination.
    if (request.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(()=>fetchParams.processRequestEndOfBody());
    else if (request.body != null) {
        // 2. Otherwise, if body is non-null:
        //    1. Let processBodyChunk given bytes be these steps:
        const processBodyChunk = async function*(bytes) {
            var // 3. If fetchParams’s process request body is non-null, then run
            // fetchParams’s process request body given bytes’s length.
            _fetchParams_processRequestBodyChunkLength;
            // 1. If the ongoing fetch is terminated, then abort these steps.
            if ($49e34ecf086aca0e$require$isCancelled(fetchParams)) return;
            // 2. Run this step in parallel: transmit bytes.
            yield bytes;
            (_fetchParams_processRequestBodyChunkLength = fetchParams.processRequestBodyChunkLength) === null || _fetchParams_processRequestBodyChunkLength === void 0 ? void 0 : _fetchParams_processRequestBodyChunkLength.call(fetchParams, bytes.byteLength);
        };
        // 2. Let processEndOfBody be these steps:
        const processEndOfBody = ()=>{
            // 1. If fetchParams is canceled, then abort these steps.
            if ($49e34ecf086aca0e$require$isCancelled(fetchParams)) return;
            // 2. If fetchParams’s process request end-of-body is non-null,
            // then run fetchParams’s process request end-of-body.
            if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
        };
        // 3. Let processBodyError given e be these steps:
        const processBodyError = (e)=>{
            // 1. If fetchParams is canceled, then abort these steps.
            if ($49e34ecf086aca0e$require$isCancelled(fetchParams)) return;
            // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
            if (e.name === "AbortError") fetchParams.controller.abort();
            else fetchParams.controller.terminate(e);
        };
        // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
        // processBodyError, and fetchParams’s task destination.
        requestBody = async function*() {
            try {
                for await (const bytes of request.body.stream)yield* processBodyChunk(bytes);
                processEndOfBody();
            } catch (err) {
                processBodyError(err);
            }
        }();
    }
    try {
        // socket is only provided for websockets
        const { body: body, status: status, statusText: statusText, headersList: headersList, socket: socket } = await dispatch({
            body: requestBody
        });
        if (socket) response = $49e34ecf086aca0e$require$makeResponse({
            status: status,
            statusText: statusText,
            headersList: headersList,
            socket: socket
        });
        else {
            const iterator = body[Symbol.asyncIterator]();
            fetchParams.controller.next = ()=>iterator.next();
            response = $49e34ecf086aca0e$require$makeResponse({
                status: status,
                statusText: statusText,
                headersList: headersList
            });
        }
    } catch (err) {
        // 10. If aborted, then:
        if (err.name === "AbortError") {
            // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
            fetchParams.controller.connection.destroy();
            // 2. Return the appropriate network error for fetchParams.
            return $49e34ecf086aca0e$require$makeAppropriateNetworkError(fetchParams, err);
        }
        return $49e34ecf086aca0e$require$makeNetworkError(err);
    }
    // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
    // if it is suspended.
    const pullAlgorithm = ()=>{
        fetchParams.controller.resume();
    };
    // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
    // controller with reason, given reason.
    const cancelAlgorithm = (reason)=>{
        fetchParams.controller.abort(reason);
    };
    // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
    // the user agent.
    // TODO
    // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
    // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
    // TODO
    // 15. Let stream be a new ReadableStream.
    // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
    // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
    // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
    if (!$49e34ecf086aca0e$var$ReadableStream) $49e34ecf086aca0e$var$ReadableStream = $3B1P3$streamweb.ReadableStream;
    const stream = new $49e34ecf086aca0e$var$ReadableStream({
        async start (controller) {
            fetchParams.controller.controller = controller;
        },
        async pull (controller) {
            await pullAlgorithm(controller);
        },
        async cancel (reason) {
            await cancelAlgorithm(reason);
        }
    }, {
        highWaterMark: 0,
        size () {
            return 1;
        }
    });
    // 17. Run these steps, but abort when the ongoing fetch is terminated:
    //    1. Set response’s body to a new body whose stream is stream.
    response.body = {
        stream: stream
    };
    //    2. If response is not a network error and request’s cache mode is
    //    not "no-store", then update response in httpCache for request.
    //    TODO
    //    3. If includeCredentials is true and the user agent is not configured
    //    to block cookies for request (see section 7 of [COOKIES]), then run the
    //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
    //    the value of each header whose name is a byte-case-insensitive match for
    //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
    //    TODO
    // 18. If aborted, then:
    // TODO
    // 19. Run these steps in parallel:
    //    1. Run these steps, but abort when fetchParams is canceled:
    fetchParams.controller.on("terminated", onAborted);
    fetchParams.controller.resume = async ()=>{
        // 1. While true
        while(true){
            // 1-3. See onData...
            // 4. Set bytes to the result of handling content codings given
            // codings and bytes.
            let bytes;
            let isFailure;
            try {
                const { done: done, value: value } = await fetchParams.controller.next();
                if ($49e34ecf086aca0e$require$isAborted(fetchParams)) break;
                bytes = done ? undefined : value;
            } catch (err) {
                if (fetchParams.controller.ended && !timingInfo.encodedBodySize) // zlib doesn't like empty streams.
                bytes = undefined;
                else {
                    bytes = err;
                    // err may be propagated from the result of calling readablestream.cancel,
                    // which might not be an error. https://github.com/nodejs/undici/issues/2009
                    isFailure = true;
                }
            }
            if (bytes === undefined) {
                // 2. Otherwise, if the bytes transmission for response’s message
                // body is done normally and stream is readable, then close
                // stream, finalize response for fetchParams and response, and
                // abort these in-parallel steps.
                $49e34ecf086aca0e$require$readableStreamClose(fetchParams.controller.controller);
                $49e34ecf086aca0e$var$finalizeResponse(fetchParams, response);
                return;
            }
            var _bytes_byteLength;
            // 5. Increase timingInfo’s decoded body size by bytes’s length.
            timingInfo.decodedBodySize += (_bytes_byteLength = bytes === null || bytes === void 0 ? void 0 : bytes.byteLength) !== null && _bytes_byteLength !== void 0 ? _bytes_byteLength : 0;
            // 6. If bytes is failure, then terminate fetchParams’s controller.
            if (isFailure) {
                fetchParams.controller.terminate(bytes);
                return;
            }
            // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
            // into stream.
            fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
            // 8. If stream is errored, then terminate the ongoing fetch.
            if ($49e34ecf086aca0e$require$isErrored(stream)) {
                fetchParams.controller.terminate();
                return;
            }
            // 9. If stream doesn’t need more data ask the user agent to suspend
            // the ongoing fetch.
            if (!fetchParams.controller.controller.desiredSize) return;
        }
    };
    //    2. If aborted, then:
    function onAborted(reason) {
        // 2. If fetchParams is aborted, then:
        if ($49e34ecf086aca0e$require$isAborted(fetchParams)) {
            // 1. Set response’s aborted flag.
            response.aborted = true;
            // 2. If stream is readable, then error stream with the result of
            //    deserialize a serialized abort reason given fetchParams’s
            //    controller’s serialized abort reason and an
            //    implementation-defined realm.
            if ($49e34ecf086aca0e$require$isReadable(stream)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
        } else // 3. Otherwise, if stream is readable, error stream with a TypeError.
        if ($49e34ecf086aca0e$require$isReadable(stream)) fetchParams.controller.controller.error(new TypeError("terminated", {
            cause: $49e34ecf086aca0e$require$isErrorLike(reason) ? reason : undefined
        }));
        // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
        // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
        fetchParams.controller.connection.destroy();
    }
    // 20. Return response.
    return response;
    async function dispatch({ body: body }) {
        const url = $49e34ecf086aca0e$require$requestCurrentURL(request);
        /** @type {import('../..').Agent} */ const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve, reject)=>agent.dispatch({
                path: url.pathname + url.search,
                origin: url.origin,
                method: request.method,
                body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
                headers: request.headersList.entries,
                maxRedirections: 0,
                upgrade: request.mode === "websocket" ? "websocket" : undefined
            }, {
                body: null,
                abort: null,
                onConnect (abort) {
                    // TODO (fix): Do we need connection here?
                    const { connection: connection } = fetchParams.controller;
                    if (connection.destroyed) abort(new $49e34ecf086aca0e$require$DOMException("The operation was aborted.", "AbortError"));
                    else {
                        fetchParams.controller.on("terminated", abort);
                        this.abort = connection.abort = abort;
                    }
                },
                onHeaders (status, headersList, resume, statusText) {
                    if (status < 200) return;
                    let codings = [];
                    let location = "";
                    const headers = new $49e34ecf086aca0e$require$Headers();
                    // For H2, the headers are a plain JS object
                    // We distinguish between them and iterate accordingly
                    if (Array.isArray(headersList)) for(let n = 0; n < headersList.length; n += 2){
                        const key = headersList[n + 0].toString("latin1");
                        const val = headersList[n + 1].toString("latin1");
                        if (key.toLowerCase() === "content-encoding") // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                        // "All content-coding values are case-insensitive..."
                        codings = val.toLowerCase().split(",").map((x)=>x.trim());
                        else if (key.toLowerCase() === "location") location = val;
                        headers[$49e34ecf086aca0e$require$kHeadersList].append(key, val);
                    }
                    else {
                        const keys = Object.keys(headersList);
                        for (const key of keys){
                            const val = headersList[key];
                            if (key.toLowerCase() === "content-encoding") // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                            // "All content-coding values are case-insensitive..."
                            codings = val.toLowerCase().split(",").map((x)=>x.trim()).reverse();
                            else if (key.toLowerCase() === "location") location = val;
                            headers[$49e34ecf086aca0e$require$kHeadersList].append(key, val);
                        }
                    }
                    this.body = new $49e34ecf086aca0e$require$Readable({
                        read: resume
                    });
                    const decoders = [];
                    const willFollow = request.redirect === "follow" && location && $49e34ecf086aca0e$require$redirectStatusSet.has(status);
                    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
                    if (request.method !== "HEAD" && request.method !== "CONNECT" && !$49e34ecf086aca0e$require$nullBodyStatus.includes(status) && !willFollow) for (const coding of codings){
                        // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
                        if (coding === "x-gzip" || coding === "gzip") decoders.push($3B1P3$zlib.createGunzip({
                            // Be less strict when decoding compressed responses, since sometimes
                            // servers send slightly invalid responses that are still accepted
                            // by common browsers.
                            // Always using Z_SYNC_FLUSH is what cURL does.
                            flush: $3B1P3$zlib.constants.Z_SYNC_FLUSH,
                            finishFlush: $3B1P3$zlib.constants.Z_SYNC_FLUSH
                        }));
                        else if (coding === "deflate") decoders.push($3B1P3$zlib.createInflate());
                        else if (coding === "br") decoders.push($3B1P3$zlib.createBrotliDecompress());
                        else {
                            decoders.length = 0;
                            break;
                        }
                    }
                    resolve({
                        status: status,
                        statusText: statusText,
                        headersList: headers[$49e34ecf086aca0e$require$kHeadersList],
                        body: decoders.length ? $49e34ecf086aca0e$require$pipeline(this.body, ...decoders, ()=>{}) : this.body.on("error", ()=>{})
                    });
                    return true;
                },
                onData (chunk) {
                    if (fetchParams.controller.dump) return;
                    // 1. If one or more bytes have been transmitted from response’s
                    // message body, then:
                    //  1. Let bytes be the transmitted bytes.
                    const bytes = chunk;
                    //  2. Let codings be the result of extracting header list values
                    //  given `Content-Encoding` and response’s header list.
                    //  See pullAlgorithm.
                    //  3. Increase timingInfo’s encoded body size by bytes’s length.
                    timingInfo.encodedBodySize += bytes.byteLength;
                    //  4. See pullAlgorithm...
                    return this.body.push(bytes);
                },
                onComplete () {
                    if (this.abort) fetchParams.controller.off("terminated", this.abort);
                    fetchParams.controller.ended = true;
                    this.body.push(null);
                },
                onError (error) {
                    var _this_body;
                    if (this.abort) fetchParams.controller.off("terminated", this.abort);
                    (_this_body = this.body) === null || _this_body === void 0 ? void 0 : _this_body.destroy(error);
                    fetchParams.controller.terminate(error);
                    reject(error);
                },
                onUpgrade (status, headersList, socket) {
                    if (status !== 101) return;
                    const headers = new $49e34ecf086aca0e$require$Headers();
                    for(let n = 0; n < headersList.length; n += 2){
                        const key = headersList[n + 0].toString("latin1");
                        const val = headersList[n + 1].toString("latin1");
                        headers[$49e34ecf086aca0e$require$kHeadersList].append(key, val);
                    }
                    resolve({
                        status: status,
                        statusText: $49e34ecf086aca0e$require$STATUS_CODES[status],
                        headersList: headers[$49e34ecf086aca0e$require$kHeadersList],
                        socket: socket
                    });
                    return true;
                }
            }));
    }
}
module.exports = {
    fetch: $49e34ecf086aca0e$var$fetch,
    Fetch: $49e34ecf086aca0e$var$Fetch,
    fetching: $49e34ecf086aca0e$var$fetching,
    finalizeAndReportTiming: $49e34ecf086aca0e$var$finalizeAndReportTiming
};

});
parcelRegister("fhz2k", function(module, exports) {
"use strict";

var $2qoFF = parcelRequire("2qoFF");
var $b2039f0ed50a8dcd$require$Headers = $2qoFF.Headers;
var $b2039f0ed50a8dcd$require$HeadersList = $2qoFF.HeadersList;
var $b2039f0ed50a8dcd$require$fill = $2qoFF.fill;

var $8J9Tb = parcelRequire("8J9Tb");
var $b2039f0ed50a8dcd$require$extractBody = $8J9Tb.extractBody;
var $b2039f0ed50a8dcd$require$cloneBody = $8J9Tb.cloneBody;
var $b2039f0ed50a8dcd$require$mixinBody = $8J9Tb.mixinBody;

var $3zyxC = parcelRequire("3zyxC");
const { kEnumerableProperty: $b2039f0ed50a8dcd$var$kEnumerableProperty } = $3zyxC;

var $f1lDT = parcelRequire("f1lDT");
var $b2039f0ed50a8dcd$require$isValidReasonPhrase = $f1lDT.isValidReasonPhrase;
var $b2039f0ed50a8dcd$require$isCancelled = $f1lDT.isCancelled;
var $b2039f0ed50a8dcd$require$isAborted = $f1lDT.isAborted;
var $b2039f0ed50a8dcd$require$isBlobLike = $f1lDT.isBlobLike;
var $b2039f0ed50a8dcd$require$serializeJavascriptValueToJSONString = $f1lDT.serializeJavascriptValueToJSONString;
var $b2039f0ed50a8dcd$require$isErrorLike = $f1lDT.isErrorLike;
var $b2039f0ed50a8dcd$require$isomorphicEncode = $f1lDT.isomorphicEncode;

var $leEOP = parcelRequire("leEOP");
var $b2039f0ed50a8dcd$require$redirectStatusSet = $leEOP.redirectStatusSet;
var $b2039f0ed50a8dcd$require$nullBodyStatus = $leEOP.nullBodyStatus;
var $b2039f0ed50a8dcd$require$DOMException = $leEOP.DOMException;

var $hxvf1 = parcelRequire("hxvf1");
var $b2039f0ed50a8dcd$require$kState = $hxvf1.kState;
var $b2039f0ed50a8dcd$require$kHeaders = $hxvf1.kHeaders;
var $b2039f0ed50a8dcd$require$kGuard = $hxvf1.kGuard;
var $b2039f0ed50a8dcd$require$kRealm = $hxvf1.kRealm;

var $2BhCx = parcelRequire("2BhCx");
var $b2039f0ed50a8dcd$require$webidl = $2BhCx.webidl;

var $e2Ka3 = parcelRequire("e2Ka3");
var $b2039f0ed50a8dcd$require$FormData = $e2Ka3.FormData;

var $kQbLp = parcelRequire("kQbLp");
var $b2039f0ed50a8dcd$require$getGlobalOrigin = $kQbLp.getGlobalOrigin;

var $dGZhg = parcelRequire("dGZhg");
var $b2039f0ed50a8dcd$require$URLSerializer = $dGZhg.URLSerializer;

var $lbv7W = parcelRequire("lbv7W");
var $b2039f0ed50a8dcd$require$kHeadersList = $lbv7W.kHeadersList;
var $b2039f0ed50a8dcd$require$kConstruct = $lbv7W.kConstruct;


var $b2039f0ed50a8dcd$require$types = $3B1P3$util.types;

const $b2039f0ed50a8dcd$var$ReadableStream = globalThis.ReadableStream || $3B1P3$streamweb.ReadableStream;
const $b2039f0ed50a8dcd$var$textEncoder = new TextEncoder("utf-8");
// https://fetch.spec.whatwg.org/#response-class
class $b2039f0ed50a8dcd$var$Response {
    // Creates network error Response.
    static error() {
        // TODO
        const relevantRealm = {
            settingsObject: {}
        };
        // The static error() method steps are to return the result of creating a
        // Response object, given a new network error, "immutable", and this’s
        // relevant Realm.
        const responseObject = new $b2039f0ed50a8dcd$var$Response();
        responseObject[$b2039f0ed50a8dcd$require$kState] = $b2039f0ed50a8dcd$var$makeNetworkError();
        responseObject[$b2039f0ed50a8dcd$require$kRealm] = relevantRealm;
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kHeadersList] = responseObject[$b2039f0ed50a8dcd$require$kState].headersList;
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kGuard] = "immutable";
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kRealm] = relevantRealm;
        return responseObject;
    }
    // https://fetch.spec.whatwg.org/#dom-response-json
    static json(data, init = {}) {
        $b2039f0ed50a8dcd$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Response.json"
        });
        if (init !== null) init = $b2039f0ed50a8dcd$require$webidl.converters.ResponseInit(init);
        // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
        const bytes = $b2039f0ed50a8dcd$var$textEncoder.encode($b2039f0ed50a8dcd$require$serializeJavascriptValueToJSONString(data));
        // 2. Let body be the result of extracting bytes.
        const body = $b2039f0ed50a8dcd$require$extractBody(bytes);
        // 3. Let responseObject be the result of creating a Response object, given a new response,
        //    "response", and this’s relevant Realm.
        const relevantRealm = {
            settingsObject: {}
        };
        const responseObject = new $b2039f0ed50a8dcd$var$Response();
        responseObject[$b2039f0ed50a8dcd$require$kRealm] = relevantRealm;
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kGuard] = "response";
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kRealm] = relevantRealm;
        // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
        $b2039f0ed50a8dcd$var$initializeResponse(responseObject, init, {
            body: body[0],
            type: "application/json"
        });
        // 5. Return responseObject.
        return responseObject;
    }
    // Creates a redirect Response that redirects to url with status status.
    static redirect(url, status = 302) {
        const relevantRealm = {
            settingsObject: {}
        };
        $b2039f0ed50a8dcd$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Response.redirect"
        });
        url = $b2039f0ed50a8dcd$require$webidl.converters.USVString(url);
        status = $b2039f0ed50a8dcd$require$webidl.converters["unsigned short"](status);
        // 1. Let parsedURL be the result of parsing url with current settings
        // object’s API base URL.
        // 2. If parsedURL is failure, then throw a TypeError.
        // TODO: base-URL?
        let parsedURL;
        try {
            parsedURL = new URL(url, $b2039f0ed50a8dcd$require$getGlobalOrigin());
        } catch (err) {
            throw Object.assign(new TypeError("Failed to parse URL from " + url), {
                cause: err
            });
        }
        // 3. If status is not a redirect status, then throw a RangeError.
        if (!$b2039f0ed50a8dcd$require$redirectStatusSet.has(status)) throw new RangeError("Invalid status code " + status);
        // 4. Let responseObject be the result of creating a Response object,
        // given a new response, "immutable", and this’s relevant Realm.
        const responseObject = new $b2039f0ed50a8dcd$var$Response();
        responseObject[$b2039f0ed50a8dcd$require$kRealm] = relevantRealm;
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kGuard] = "immutable";
        responseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kRealm] = relevantRealm;
        // 5. Set responseObject’s response’s status to status.
        responseObject[$b2039f0ed50a8dcd$require$kState].status = status;
        // 6. Let value be parsedURL, serialized and isomorphic encoded.
        const value = $b2039f0ed50a8dcd$require$isomorphicEncode($b2039f0ed50a8dcd$require$URLSerializer(parsedURL));
        // 7. Append `Location`/value to responseObject’s response’s header list.
        responseObject[$b2039f0ed50a8dcd$require$kState].headersList.append("location", value);
        // 8. Return responseObject.
        return responseObject;
    }
    // https://fetch.spec.whatwg.org/#dom-response
    constructor(body = null, init = {}){
        if (body !== null) body = $b2039f0ed50a8dcd$require$webidl.converters.BodyInit(body);
        init = $b2039f0ed50a8dcd$require$webidl.converters.ResponseInit(init);
        // TODO
        this[$b2039f0ed50a8dcd$require$kRealm] = {
            settingsObject: {}
        };
        // 1. Set this’s response to a new response.
        this[$b2039f0ed50a8dcd$require$kState] = $b2039f0ed50a8dcd$var$makeResponse({});
        // 2. Set this’s headers to a new Headers object with this’s relevant
        // Realm, whose header list is this’s response’s header list and guard
        // is "response".
        this[$b2039f0ed50a8dcd$require$kHeaders] = new $b2039f0ed50a8dcd$require$Headers($b2039f0ed50a8dcd$require$kConstruct);
        this[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kGuard] = "response";
        this[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kHeadersList] = this[$b2039f0ed50a8dcd$require$kState].headersList;
        this[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kRealm] = this[$b2039f0ed50a8dcd$require$kRealm];
        // 3. Let bodyWithType be null.
        let bodyWithType = null;
        // 4. If body is non-null, then set bodyWithType to the result of extracting body.
        if (body != null) {
            const [extractedBody, type] = $b2039f0ed50a8dcd$require$extractBody(body);
            bodyWithType = {
                body: extractedBody,
                type: type
            };
        }
        // 5. Perform initialize a response given this, init, and bodyWithType.
        $b2039f0ed50a8dcd$var$initializeResponse(this, init, bodyWithType);
    }
    // Returns response’s type, e.g., "cors".
    get type() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // The type getter steps are to return this’s response’s type.
        return this[$b2039f0ed50a8dcd$require$kState].type;
    }
    // Returns response’s URL, if it has one; otherwise the empty string.
    get url() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        const urlList = this[$b2039f0ed50a8dcd$require$kState].urlList;
        var _urlList_;
        // The url getter steps are to return the empty string if this’s
        // response’s URL is null; otherwise this’s response’s URL,
        // serialized with exclude fragment set to true.
        const url = (_urlList_ = urlList[urlList.length - 1]) !== null && _urlList_ !== void 0 ? _urlList_ : null;
        if (url === null) return "";
        return $b2039f0ed50a8dcd$require$URLSerializer(url, true);
    }
    // Returns whether response was obtained through a redirect.
    get redirected() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // The redirected getter steps are to return true if this’s response’s URL
        // list has more than one item; otherwise false.
        return this[$b2039f0ed50a8dcd$require$kState].urlList.length > 1;
    }
    // Returns response’s status.
    get status() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // The status getter steps are to return this’s response’s status.
        return this[$b2039f0ed50a8dcd$require$kState].status;
    }
    // Returns whether response’s status is an ok status.
    get ok() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // The ok getter steps are to return true if this’s response’s status is an
        // ok status; otherwise false.
        return this[$b2039f0ed50a8dcd$require$kState].status >= 200 && this[$b2039f0ed50a8dcd$require$kState].status <= 299;
    }
    // Returns response’s status message.
    get statusText() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // The statusText getter steps are to return this’s response’s status
        // message.
        return this[$b2039f0ed50a8dcd$require$kState].statusText;
    }
    // Returns response’s headers as Headers.
    get headers() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // The headers getter steps are to return this’s headers.
        return this[$b2039f0ed50a8dcd$require$kHeaders];
    }
    get body() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        return this[$b2039f0ed50a8dcd$require$kState].body ? this[$b2039f0ed50a8dcd$require$kState].body.stream : null;
    }
    get bodyUsed() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        return !!this[$b2039f0ed50a8dcd$require$kState].body && $3zyxC.isDisturbed(this[$b2039f0ed50a8dcd$require$kState].body.stream);
    }
    // Returns a clone of response.
    clone() {
        $b2039f0ed50a8dcd$require$webidl.brandCheck(this, $b2039f0ed50a8dcd$var$Response);
        // 1. If this is unusable, then throw a TypeError.
        if (this.bodyUsed || this.body && this.body.locked) throw $b2039f0ed50a8dcd$require$webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
        });
        // 2. Let clonedResponse be the result of cloning this’s response.
        const clonedResponse = $b2039f0ed50a8dcd$var$cloneResponse(this[$b2039f0ed50a8dcd$require$kState]);
        // 3. Return the result of creating a Response object, given
        // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
        const clonedResponseObject = new $b2039f0ed50a8dcd$var$Response();
        clonedResponseObject[$b2039f0ed50a8dcd$require$kState] = clonedResponse;
        clonedResponseObject[$b2039f0ed50a8dcd$require$kRealm] = this[$b2039f0ed50a8dcd$require$kRealm];
        clonedResponseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kGuard] = this[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kGuard];
        clonedResponseObject[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kRealm] = this[$b2039f0ed50a8dcd$require$kHeaders][$b2039f0ed50a8dcd$require$kRealm];
        return clonedResponseObject;
    }
}
$b2039f0ed50a8dcd$require$mixinBody($b2039f0ed50a8dcd$var$Response);
Object.defineProperties($b2039f0ed50a8dcd$var$Response.prototype, {
    type: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    url: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    status: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    ok: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    redirected: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    statusText: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    headers: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    clone: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    body: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    bodyUsed: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
    }
});
Object.defineProperties($b2039f0ed50a8dcd$var$Response, {
    json: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    redirect: $b2039f0ed50a8dcd$var$kEnumerableProperty,
    error: $b2039f0ed50a8dcd$var$kEnumerableProperty
});
// https://fetch.spec.whatwg.org/#concept-response-clone
function $b2039f0ed50a8dcd$var$cloneResponse(response) {
    // To clone a response response, run these steps:
    // 1. If response is a filtered response, then return a new identical
    // filtered response whose internal response is a clone of response’s
    // internal response.
    if (response.internalResponse) return $b2039f0ed50a8dcd$var$filterResponse($b2039f0ed50a8dcd$var$cloneResponse(response.internalResponse), response.type);
    // 2. Let newResponse be a copy of response, except for its body.
    const newResponse = $b2039f0ed50a8dcd$var$makeResponse({
        ...response,
        body: null
    });
    // 3. If response’s body is non-null, then set newResponse’s body to the
    // result of cloning response’s body.
    if (response.body != null) newResponse.body = $b2039f0ed50a8dcd$require$cloneBody(response.body);
    // 4. Return newResponse.
    return newResponse;
}
function $b2039f0ed50a8dcd$var$makeResponse(init) {
    return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init,
        headersList: init.headersList ? new $b2039f0ed50a8dcd$require$HeadersList(init.headersList) : new $b2039f0ed50a8dcd$require$HeadersList(),
        urlList: init.urlList ? [
            ...init.urlList
        ] : []
    };
}
function $b2039f0ed50a8dcd$var$makeNetworkError(reason) {
    const isError = $b2039f0ed50a8dcd$require$isErrorLike(reason);
    return $b2039f0ed50a8dcd$var$makeResponse({
        type: "error",
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
    });
}
function $b2039f0ed50a8dcd$var$makeFilteredResponse(response, state) {
    state = {
        internalResponse: response,
        ...state
    };
    return new Proxy(response, {
        get (target, p) {
            return p in state ? state[p] : target[p];
        },
        set (target, p, value) {
            $3B1P3$assert(!(p in state));
            target[p] = value;
            return true;
        }
    });
}
// https://fetch.spec.whatwg.org/#concept-filtered-response
function $b2039f0ed50a8dcd$var$filterResponse(response, type) {
    // Set response to the following filtered response with response as its
    // internal response, depending on request’s response tainting:
    if (type === "basic") // A basic filtered response is a filtered response whose type is "basic"
    // and header list excludes any headers in internal response’s header list
    // whose name is a forbidden response-header name.
    // Note: undici does not implement forbidden response-header names
    return $b2039f0ed50a8dcd$var$makeFilteredResponse(response, {
        type: "basic",
        headersList: response.headersList
    });
    else if (type === "cors") // A CORS filtered response is a filtered response whose type is "cors"
    // and header list excludes any headers in internal response’s header
    // list whose name is not a CORS-safelisted response-header name, given
    // internal response’s CORS-exposed header-name list.
    // Note: undici does not implement CORS-safelisted response-header names
    return $b2039f0ed50a8dcd$var$makeFilteredResponse(response, {
        type: "cors",
        headersList: response.headersList
    });
    else if (type === "opaque") // An opaque filtered response is a filtered response whose type is
    // "opaque", URL list is the empty list, status is 0, status message
    // is the empty byte sequence, header list is empty, and body is null.
    return $b2039f0ed50a8dcd$var$makeFilteredResponse(response, {
        type: "opaque",
        urlList: Object.freeze([]),
        status: 0,
        statusText: "",
        body: null
    });
    else if (type === "opaqueredirect") // An opaque-redirect filtered response is a filtered response whose type
    // is "opaqueredirect", status is 0, status message is the empty byte
    // sequence, header list is empty, and body is null.
    return $b2039f0ed50a8dcd$var$makeFilteredResponse(response, {
        type: "opaqueredirect",
        status: 0,
        statusText: "",
        headersList: [],
        body: null
    });
    else $3B1P3$assert(false);
}
// https://fetch.spec.whatwg.org/#appropriate-network-error
function $b2039f0ed50a8dcd$var$makeAppropriateNetworkError(fetchParams, err = null) {
    // 1. Assert: fetchParams is canceled.
    $3B1P3$assert($b2039f0ed50a8dcd$require$isCancelled(fetchParams));
    // 2. Return an aborted network error if fetchParams is aborted;
    // otherwise return a network error.
    return $b2039f0ed50a8dcd$require$isAborted(fetchParams) ? $b2039f0ed50a8dcd$var$makeNetworkError(Object.assign(new $b2039f0ed50a8dcd$require$DOMException("The operation was aborted.", "AbortError"), {
        cause: err
    })) : $b2039f0ed50a8dcd$var$makeNetworkError(Object.assign(new $b2039f0ed50a8dcd$require$DOMException("Request was cancelled."), {
        cause: err
    }));
}
// https://whatpr.org/fetch/1392.html#initialize-a-response
function $b2039f0ed50a8dcd$var$initializeResponse(response, init, body) {
    // 1. If init["status"] is not in the range 200 to 599, inclusive, then
    //    throw a RangeError.
    if (init.status !== null && (init.status < 200 || init.status > 599)) throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    // 2. If init["statusText"] does not match the reason-phrase token production,
    //    then throw a TypeError.
    if ("statusText" in init && init.statusText != null) {
        // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
        //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
        if (!$b2039f0ed50a8dcd$require$isValidReasonPhrase(String(init.statusText))) throw new TypeError("Invalid statusText");
    }
    // 3. Set response’s response’s status to init["status"].
    if ("status" in init && init.status != null) response[$b2039f0ed50a8dcd$require$kState].status = init.status;
    // 4. Set response’s response’s status message to init["statusText"].
    if ("statusText" in init && init.statusText != null) response[$b2039f0ed50a8dcd$require$kState].statusText = init.statusText;
    // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
    if ("headers" in init && init.headers != null) $b2039f0ed50a8dcd$require$fill(response[$b2039f0ed50a8dcd$require$kHeaders], init.headers);
    // 6. If body was given, then:
    if (body) {
        // 1. If response's status is a null body status, then throw a TypeError.
        if ($b2039f0ed50a8dcd$require$nullBodyStatus.includes(response.status)) throw $b2039f0ed50a8dcd$require$webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
        });
        // 2. Set response's body to body's body.
        response[$b2039f0ed50a8dcd$require$kState].body = body.body;
        // 3. If body's type is non-null and response's header list does not contain
        //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
        if (body.type != null && !response[$b2039f0ed50a8dcd$require$kState].headersList.contains("Content-Type")) response[$b2039f0ed50a8dcd$require$kState].headersList.append("content-type", body.type);
    }
}
$b2039f0ed50a8dcd$require$webidl.converters.ReadableStream = $b2039f0ed50a8dcd$require$webidl.interfaceConverter($b2039f0ed50a8dcd$var$ReadableStream);
$b2039f0ed50a8dcd$require$webidl.converters.FormData = $b2039f0ed50a8dcd$require$webidl.interfaceConverter($b2039f0ed50a8dcd$require$FormData);
$b2039f0ed50a8dcd$require$webidl.converters.URLSearchParams = $b2039f0ed50a8dcd$require$webidl.interfaceConverter(URLSearchParams);
// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
$b2039f0ed50a8dcd$require$webidl.converters.XMLHttpRequestBodyInit = function(V) {
    if (typeof V === "string") return $b2039f0ed50a8dcd$require$webidl.converters.USVString(V);
    if ($b2039f0ed50a8dcd$require$isBlobLike(V)) return $b2039f0ed50a8dcd$require$webidl.converters.Blob(V, {
        strict: false
    });
    if ($b2039f0ed50a8dcd$require$types.isArrayBuffer(V) || $b2039f0ed50a8dcd$require$types.isTypedArray(V) || $b2039f0ed50a8dcd$require$types.isDataView(V)) return $b2039f0ed50a8dcd$require$webidl.converters.BufferSource(V);
    if ($3zyxC.isFormDataLike(V)) return $b2039f0ed50a8dcd$require$webidl.converters.FormData(V, {
        strict: false
    });
    if (V instanceof URLSearchParams) return $b2039f0ed50a8dcd$require$webidl.converters.URLSearchParams(V);
    return $b2039f0ed50a8dcd$require$webidl.converters.DOMString(V);
};
// https://fetch.spec.whatwg.org/#bodyinit
$b2039f0ed50a8dcd$require$webidl.converters.BodyInit = function(V) {
    if (V instanceof $b2039f0ed50a8dcd$var$ReadableStream) return $b2039f0ed50a8dcd$require$webidl.converters.ReadableStream(V);
    // Note: the spec doesn't include async iterables,
    // this is an undici extension.
    if (V === null || V === void 0 ? void 0 : V[Symbol.asyncIterator]) return V;
    return $b2039f0ed50a8dcd$require$webidl.converters.XMLHttpRequestBodyInit(V);
};
$b2039f0ed50a8dcd$require$webidl.converters.ResponseInit = $b2039f0ed50a8dcd$require$webidl.dictionaryConverter([
    {
        key: "status",
        converter: $b2039f0ed50a8dcd$require$webidl.converters["unsigned short"],
        defaultValue: 200
    },
    {
        key: "statusText",
        converter: $b2039f0ed50a8dcd$require$webidl.converters.ByteString,
        defaultValue: ""
    },
    {
        key: "headers",
        converter: $b2039f0ed50a8dcd$require$webidl.converters.HeadersInit
    }
]);
module.exports = {
    makeNetworkError: $b2039f0ed50a8dcd$var$makeNetworkError,
    makeResponse: $b2039f0ed50a8dcd$var$makeResponse,
    makeAppropriateNetworkError: $b2039f0ed50a8dcd$var$makeAppropriateNetworkError,
    filterResponse: $b2039f0ed50a8dcd$var$filterResponse,
    Response: $b2039f0ed50a8dcd$var$Response,
    cloneResponse: $b2039f0ed50a8dcd$var$cloneResponse
};

});
parcelRegister("2qoFF", function(module, exports) {
// https://github.com/Ethan-Arrowood/undici-fetch
"use strict";

var $lbv7W = parcelRequire("lbv7W");
var $1c4125a6441c970c$require$kHeadersList = $lbv7W.kHeadersList;
var $1c4125a6441c970c$require$kConstruct = $lbv7W.kConstruct;

var $hxvf1 = parcelRequire("hxvf1");
var $1c4125a6441c970c$require$kGuard = $hxvf1.kGuard;

var $3zyxC = parcelRequire("3zyxC");
var $1c4125a6441c970c$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;

var $f1lDT = parcelRequire("f1lDT");
var $1c4125a6441c970c$require$makeIterator = $f1lDT.makeIterator;
var $1c4125a6441c970c$require$isValidHeaderName = $f1lDT.isValidHeaderName;
var $1c4125a6441c970c$require$isValidHeaderValue = $f1lDT.isValidHeaderValue;

var $2BhCx = parcelRequire("2BhCx");
var $1c4125a6441c970c$require$webidl = $2BhCx.webidl;

const $1c4125a6441c970c$var$kHeadersMap = Symbol("headers map");
const $1c4125a6441c970c$var$kHeadersSortedMap = Symbol("headers map sorted");
/**
 * @param {number} code
 */ function $1c4125a6441c970c$var$isHTTPWhiteSpaceCharCode(code) {
    return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020;
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
 * @param {string} potentialValue
 */ function $1c4125a6441c970c$var$headerValueNormalize(potentialValue) {
    //  To normalize a byte sequence potentialValue, remove
    //  any leading and trailing HTTP whitespace bytes from
    //  potentialValue.
    let i = 0;
    let j = potentialValue.length;
    while(j > i && $1c4125a6441c970c$var$isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))--j;
    while(j > i && $1c4125a6441c970c$var$isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))++i;
    return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
}
function $1c4125a6441c970c$var$fill(headers, object) {
    // To fill a Headers object headers with a given object object, run these steps:
    // 1. If object is a sequence, then for each header in object:
    // Note: webidl conversion to array has already been done.
    if (Array.isArray(object)) for(let i = 0; i < object.length; ++i){
        const header = object[i];
        // 1. If header does not contain exactly two items, then throw a TypeError.
        if (header.length !== 2) throw $1c4125a6441c970c$require$webidl.errors.exception({
            header: "Headers constructor",
            message: `expected name/value pair to be length 2, found ${header.length}.`
        });
        // 2. Append (header’s first item, header’s second item) to headers.
        $1c4125a6441c970c$var$appendHeader(headers, header[0], header[1]);
    }
    else if (typeof object === "object" && object !== null) {
        // Note: null should throw
        // 2. Otherwise, object is a record, then for each key → value in object,
        //    append (key, value) to headers
        const keys = Object.keys(object);
        for(let i = 0; i < keys.length; ++i)$1c4125a6441c970c$var$appendHeader(headers, keys[i], object[keys[i]]);
    } else throw $1c4125a6441c970c$require$webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: [
            "sequence<sequence<ByteString>>",
            "record<ByteString, ByteString>"
        ]
    });
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-headers-append
 */ function $1c4125a6441c970c$var$appendHeader(headers, name, value) {
    // 1. Normalize value.
    value = $1c4125a6441c970c$var$headerValueNormalize(value);
    // 2. If name is not a header name or value is not a
    //    header value, then throw a TypeError.
    if (!$1c4125a6441c970c$require$isValidHeaderName(name)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value: name,
        type: "header name"
    });
    else if (!$1c4125a6441c970c$require$isValidHeaderValue(value)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value: value,
        type: "header value"
    });
    // 3. If headers’s guard is "immutable", then throw a TypeError.
    // 4. Otherwise, if headers’s guard is "request" and name is a
    //    forbidden header name, return.
    // Note: undici does not implement forbidden header names
    if (headers[$1c4125a6441c970c$require$kGuard] === "immutable") throw new TypeError("immutable");
    else headers[$1c4125a6441c970c$require$kGuard];
    // 6. Otherwise, if headers’s guard is "response" and name is a
    //    forbidden response-header name, return.
    // 7. Append (name, value) to headers’s header list.
    return headers[$1c4125a6441c970c$require$kHeadersList].append(name, value);
// 8. If headers’s guard is "request-no-cors", then remove
//    privileged no-CORS request headers from headers
}
class $1c4125a6441c970c$var$HeadersList {
    /** @type {[string, string][]|null} */ cookies = null;
    constructor(init){
        if (init instanceof $1c4125a6441c970c$var$HeadersList) {
            this[$1c4125a6441c970c$var$kHeadersMap] = new Map(init[$1c4125a6441c970c$var$kHeadersMap]);
            this[$1c4125a6441c970c$var$kHeadersSortedMap] = init[$1c4125a6441c970c$var$kHeadersSortedMap];
            this.cookies = init.cookies === null ? null : [
                ...init.cookies
            ];
        } else {
            this[$1c4125a6441c970c$var$kHeadersMap] = new Map(init);
            this[$1c4125a6441c970c$var$kHeadersSortedMap] = null;
        }
    }
    // https://fetch.spec.whatwg.org/#header-list-contains
    contains(name) {
        // A header list list contains a header name name if list
        // contains a header whose name is a byte-case-insensitive
        // match for name.
        name = name.toLowerCase();
        return this[$1c4125a6441c970c$var$kHeadersMap].has(name);
    }
    clear() {
        this[$1c4125a6441c970c$var$kHeadersMap].clear();
        this[$1c4125a6441c970c$var$kHeadersSortedMap] = null;
        this.cookies = null;
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-append
    append(name, value) {
        this[$1c4125a6441c970c$var$kHeadersSortedMap] = null;
        // 1. If list contains name, then set name to the first such
        //    header’s name.
        const lowercaseName = name.toLowerCase();
        const exists = this[$1c4125a6441c970c$var$kHeadersMap].get(lowercaseName);
        // 2. Append (name, value) to list.
        if (exists) {
            const delimiter = lowercaseName === "cookie" ? "; " : ", ";
            this[$1c4125a6441c970c$var$kHeadersMap].set(lowercaseName, {
                name: exists.name,
                value: `${exists.value}${delimiter}${value}`
            });
        } else this[$1c4125a6441c970c$var$kHeadersMap].set(lowercaseName, {
            name: name,
            value: value
        });
        if (lowercaseName === "set-cookie") {
            var _this_cookies;
            (_this_cookies = this.cookies) !== null && _this_cookies !== void 0 ? _this_cookies : this.cookies = [];
            this.cookies.push(value);
        }
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-set
    set(name, value) {
        this[$1c4125a6441c970c$var$kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        if (lowercaseName === "set-cookie") this.cookies = [
            value
        ];
        // 1. If list contains name, then set the value of
        //    the first such header to value and remove the
        //    others.
        // 2. Otherwise, append header (name, value) to list.
        this[$1c4125a6441c970c$var$kHeadersMap].set(lowercaseName, {
            name: name,
            value: value
        });
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-delete
    delete(name) {
        this[$1c4125a6441c970c$var$kHeadersSortedMap] = null;
        name = name.toLowerCase();
        if (name === "set-cookie") this.cookies = null;
        this[$1c4125a6441c970c$var$kHeadersMap].delete(name);
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-get
    get(name) {
        const value = this[$1c4125a6441c970c$var$kHeadersMap].get(name.toLowerCase());
        // 1. If list does not contain name, then return null.
        // 2. Return the values of all headers in list whose name
        //    is a byte-case-insensitive match for name,
        //    separated from each other by 0x2C 0x20, in order.
        return value === undefined ? null : value.value;
    }
    *[Symbol.iterator]() {
        // use the lowercased name
        for (const [name, { value: value }] of this[$1c4125a6441c970c$var$kHeadersMap])yield [
            name,
            value
        ];
    }
    get entries() {
        const headers = {};
        if (this[$1c4125a6441c970c$var$kHeadersMap].size) for (const { name: name, value: value } of this[$1c4125a6441c970c$var$kHeadersMap].values())headers[name] = value;
        return headers;
    }
}
// https://fetch.spec.whatwg.org/#headers-class
class $1c4125a6441c970c$var$Headers {
    constructor(init){
        if (init === $1c4125a6441c970c$require$kConstruct) return;
        this[$1c4125a6441c970c$require$kHeadersList] = new $1c4125a6441c970c$var$HeadersList();
        // The new Headers(init) constructor steps are:
        // 1. Set this’s guard to "none".
        this[$1c4125a6441c970c$require$kGuard] = "none";
        // 2. If init is given, then fill this with init.
        if (init !== undefined) {
            init = $1c4125a6441c970c$require$webidl.converters.HeadersInit(init);
            $1c4125a6441c970c$var$fill(this, init);
        }
    }
    // https://fetch.spec.whatwg.org/#dom-headers-append
    append(name, value) {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        $1c4125a6441c970c$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "Headers.append"
        });
        name = $1c4125a6441c970c$require$webidl.converters.ByteString(name);
        value = $1c4125a6441c970c$require$webidl.converters.ByteString(value);
        return $1c4125a6441c970c$var$appendHeader(this, name, value);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-delete
    delete(name) {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        $1c4125a6441c970c$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.delete"
        });
        name = $1c4125a6441c970c$require$webidl.converters.ByteString(name);
        // 1. If name is not a header name, then throw a TypeError.
        if (!$1c4125a6441c970c$require$isValidHeaderName(name)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name,
            type: "header name"
        });
        // 2. If this’s guard is "immutable", then throw a TypeError.
        // 3. Otherwise, if this’s guard is "request" and name is a
        //    forbidden header name, return.
        // 4. Otherwise, if this’s guard is "request-no-cors", name
        //    is not a no-CORS-safelisted request-header name, and
        //    name is not a privileged no-CORS request-header name,
        //    return.
        // 5. Otherwise, if this’s guard is "response" and name is
        //    a forbidden response-header name, return.
        // Note: undici does not implement forbidden header names
        if (this[$1c4125a6441c970c$require$kGuard] === "immutable") throw new TypeError("immutable");
        else this[$1c4125a6441c970c$require$kGuard];
        // 6. If this’s header list does not contain name, then
        //    return.
        if (!this[$1c4125a6441c970c$require$kHeadersList].contains(name)) return;
        // 7. Delete name from this’s header list.
        // 8. If this’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from this.
        this[$1c4125a6441c970c$require$kHeadersList].delete(name);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-get
    get(name) {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        $1c4125a6441c970c$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.get"
        });
        name = $1c4125a6441c970c$require$webidl.converters.ByteString(name);
        // 1. If name is not a header name, then throw a TypeError.
        if (!$1c4125a6441c970c$require$isValidHeaderName(name)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name,
            type: "header name"
        });
        // 2. Return the result of getting name from this’s header
        //    list.
        return this[$1c4125a6441c970c$require$kHeadersList].get(name);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-has
    has(name) {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        $1c4125a6441c970c$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.has"
        });
        name = $1c4125a6441c970c$require$webidl.converters.ByteString(name);
        // 1. If name is not a header name, then throw a TypeError.
        if (!$1c4125a6441c970c$require$isValidHeaderName(name)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name,
            type: "header name"
        });
        // 2. Return true if this’s header list contains name;
        //    otherwise false.
        return this[$1c4125a6441c970c$require$kHeadersList].contains(name);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-set
    set(name, value) {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        $1c4125a6441c970c$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "Headers.set"
        });
        name = $1c4125a6441c970c$require$webidl.converters.ByteString(name);
        value = $1c4125a6441c970c$require$webidl.converters.ByteString(value);
        // 1. Normalize value.
        value = $1c4125a6441c970c$var$headerValueNormalize(value);
        // 2. If name is not a header name or value is not a
        //    header value, then throw a TypeError.
        if (!$1c4125a6441c970c$require$isValidHeaderName(name)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name,
            type: "header name"
        });
        else if (!$1c4125a6441c970c$require$isValidHeaderValue(value)) throw $1c4125a6441c970c$require$webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: value,
            type: "header value"
        });
        // 3. If this’s guard is "immutable", then throw a TypeError.
        // 4. Otherwise, if this’s guard is "request" and name is a
        //    forbidden header name, return.
        // 5. Otherwise, if this’s guard is "request-no-cors" and
        //    name/value is not a no-CORS-safelisted request-header,
        //    return.
        // 6. Otherwise, if this’s guard is "response" and name is a
        //    forbidden response-header name, return.
        // Note: undici does not implement forbidden header names
        if (this[$1c4125a6441c970c$require$kGuard] === "immutable") throw new TypeError("immutable");
        else this[$1c4125a6441c970c$require$kGuard];
        // 7. Set (name, value) in this’s header list.
        // 8. If this’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from this
        this[$1c4125a6441c970c$require$kHeadersList].set(name, value);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
    getSetCookie() {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
        // 2. Return the values of all headers in this’s header list whose name is
        //    a byte-case-insensitive match for `Set-Cookie`, in order.
        const list = this[$1c4125a6441c970c$require$kHeadersList].cookies;
        if (list) return [
            ...list
        ];
        return [];
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
    get [$1c4125a6441c970c$var$kHeadersSortedMap]() {
        if (this[$1c4125a6441c970c$require$kHeadersList][$1c4125a6441c970c$var$kHeadersSortedMap]) return this[$1c4125a6441c970c$require$kHeadersList][$1c4125a6441c970c$var$kHeadersSortedMap];
        // 1. Let headers be an empty list of headers with the key being the name
        //    and value the value.
        const headers = [];
        // 2. Let names be the result of convert header names to a sorted-lowercase
        //    set with all the names of the headers in list.
        const names = [
            ...this[$1c4125a6441c970c$require$kHeadersList]
        ].sort((a, b)=>a[0] < b[0] ? -1 : 1);
        const cookies = this[$1c4125a6441c970c$require$kHeadersList].cookies;
        // 3. For each name of names:
        for(let i = 0; i < names.length; ++i){
            const [name, value] = names[i];
            // 1. If name is `set-cookie`, then:
            if (name === "set-cookie") // 1. Let values be a list of all values of headers in list whose name
            //    is a byte-case-insensitive match for name, in order.
            // 2. For each value of values:
            // 1. Append (name, value) to headers.
            for(let j = 0; j < cookies.length; ++j)headers.push([
                name,
                cookies[j]
            ]);
            else {
                // 2. Otherwise:
                // 1. Let value be the result of getting name from list.
                // 2. Assert: value is non-null.
                $3B1P3$assert(value !== null);
                // 3. Append (name, value) to headers.
                headers.push([
                    name,
                    value
                ]);
            }
        }
        this[$1c4125a6441c970c$require$kHeadersList][$1c4125a6441c970c$var$kHeadersSortedMap] = headers;
        // 4. Return headers.
        return headers;
    }
    keys() {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        if (this[$1c4125a6441c970c$require$kGuard] === "immutable") {
            const value = this[$1c4125a6441c970c$var$kHeadersSortedMap];
            return $1c4125a6441c970c$require$makeIterator(()=>value, "Headers", "key");
        }
        return $1c4125a6441c970c$require$makeIterator(()=>[
                ...this[$1c4125a6441c970c$var$kHeadersSortedMap].values()
            ], "Headers", "key");
    }
    values() {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        if (this[$1c4125a6441c970c$require$kGuard] === "immutable") {
            const value = this[$1c4125a6441c970c$var$kHeadersSortedMap];
            return $1c4125a6441c970c$require$makeIterator(()=>value, "Headers", "value");
        }
        return $1c4125a6441c970c$require$makeIterator(()=>[
                ...this[$1c4125a6441c970c$var$kHeadersSortedMap].values()
            ], "Headers", "value");
    }
    entries() {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        if (this[$1c4125a6441c970c$require$kGuard] === "immutable") {
            const value = this[$1c4125a6441c970c$var$kHeadersSortedMap];
            return $1c4125a6441c970c$require$makeIterator(()=>value, "Headers", "key+value");
        }
        return $1c4125a6441c970c$require$makeIterator(()=>[
                ...this[$1c4125a6441c970c$var$kHeadersSortedMap].values()
            ], "Headers", "key+value");
    }
    /**
   * @param {(value: string, key: string, self: Headers) => void} callbackFn
   * @param {unknown} thisArg
   */ forEach(callbackFn, thisArg = globalThis) {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        $1c4125a6441c970c$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.forEach"
        });
        if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
        for (const [key, value] of this)callbackFn.apply(thisArg, [
            value,
            key,
            this
        ]);
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        $1c4125a6441c970c$require$webidl.brandCheck(this, $1c4125a6441c970c$var$Headers);
        return this[$1c4125a6441c970c$require$kHeadersList];
    }
}
$1c4125a6441c970c$var$Headers.prototype[Symbol.iterator] = $1c4125a6441c970c$var$Headers.prototype.entries;
Object.defineProperties($1c4125a6441c970c$var$Headers.prototype, {
    append: $1c4125a6441c970c$require$kEnumerableProperty,
    delete: $1c4125a6441c970c$require$kEnumerableProperty,
    get: $1c4125a6441c970c$require$kEnumerableProperty,
    has: $1c4125a6441c970c$require$kEnumerableProperty,
    set: $1c4125a6441c970c$require$kEnumerableProperty,
    getSetCookie: $1c4125a6441c970c$require$kEnumerableProperty,
    keys: $1c4125a6441c970c$require$kEnumerableProperty,
    values: $1c4125a6441c970c$require$kEnumerableProperty,
    entries: $1c4125a6441c970c$require$kEnumerableProperty,
    forEach: $1c4125a6441c970c$require$kEnumerableProperty,
    [Symbol.iterator]: {
        enumerable: false
    },
    [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
    }
});
$1c4125a6441c970c$require$webidl.converters.HeadersInit = function(V) {
    if ($1c4125a6441c970c$require$webidl.util.Type(V) === "Object") {
        if (V[Symbol.iterator]) return $1c4125a6441c970c$require$webidl.converters["sequence<sequence<ByteString>>"](V);
        return $1c4125a6441c970c$require$webidl.converters["record<ByteString, ByteString>"](V);
    }
    throw $1c4125a6441c970c$require$webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: [
            "sequence<sequence<ByteString>>",
            "record<ByteString, ByteString>"
        ]
    });
};
module.exports = {
    fill: $1c4125a6441c970c$var$fill,
    Headers: $1c4125a6441c970c$var$Headers,
    HeadersList: $1c4125a6441c970c$var$HeadersList
};

});


parcelRegister("7TBdE", function(module, exports) {
/* globals AbortController */ "use strict";

var $8J9Tb = parcelRequire("8J9Tb");
var $5bfa8a692dcfee60$require$extractBody = $8J9Tb.extractBody;
var $5bfa8a692dcfee60$require$mixinBody = $8J9Tb.mixinBody;
var $5bfa8a692dcfee60$require$cloneBody = $8J9Tb.cloneBody;

var $2qoFF = parcelRequire("2qoFF");
var $5bfa8a692dcfee60$require$Headers = $2qoFF.Headers;
var $5bfa8a692dcfee60$require$fillHeaders = $2qoFF.fill;
var $5bfa8a692dcfee60$require$HeadersList = $2qoFF.HeadersList;

const { FinalizationRegistry: $5bfa8a692dcfee60$var$FinalizationRegistry } = (parcelRequire("j66Rt"))();

var $3zyxC = parcelRequire("3zyxC");

var $f1lDT = parcelRequire("f1lDT");
var $5bfa8a692dcfee60$require$isValidHTTPToken = $f1lDT.isValidHTTPToken;
var $5bfa8a692dcfee60$require$sameOrigin = $f1lDT.sameOrigin;
var $5bfa8a692dcfee60$require$normalizeMethod = $f1lDT.normalizeMethod;
var $5bfa8a692dcfee60$require$makePolicyContainer = $f1lDT.makePolicyContainer;
var $5bfa8a692dcfee60$require$normalizeMethodRecord = $f1lDT.normalizeMethodRecord;

var $leEOP = parcelRequire("leEOP");
var $5bfa8a692dcfee60$require$forbiddenMethodsSet = $leEOP.forbiddenMethodsSet;
var $5bfa8a692dcfee60$require$corsSafeListedMethodsSet = $leEOP.corsSafeListedMethodsSet;
var $5bfa8a692dcfee60$require$referrerPolicy = $leEOP.referrerPolicy;
var $5bfa8a692dcfee60$require$requestRedirect = $leEOP.requestRedirect;
var $5bfa8a692dcfee60$require$requestMode = $leEOP.requestMode;
var $5bfa8a692dcfee60$require$requestCredentials = $leEOP.requestCredentials;
var $5bfa8a692dcfee60$require$requestCache = $leEOP.requestCache;
var $5bfa8a692dcfee60$require$requestDuplex = $leEOP.requestDuplex;
const { kEnumerableProperty: $5bfa8a692dcfee60$var$kEnumerableProperty } = $3zyxC;

var $hxvf1 = parcelRequire("hxvf1");
var $5bfa8a692dcfee60$require$kHeaders = $hxvf1.kHeaders;
var $5bfa8a692dcfee60$require$kSignal = $hxvf1.kSignal;
var $5bfa8a692dcfee60$require$kState = $hxvf1.kState;
var $5bfa8a692dcfee60$require$kGuard = $hxvf1.kGuard;
var $5bfa8a692dcfee60$require$kRealm = $hxvf1.kRealm;

var $2BhCx = parcelRequire("2BhCx");
var $5bfa8a692dcfee60$require$webidl = $2BhCx.webidl;

var $kQbLp = parcelRequire("kQbLp");
var $5bfa8a692dcfee60$require$getGlobalOrigin = $kQbLp.getGlobalOrigin;

var $dGZhg = parcelRequire("dGZhg");
var $5bfa8a692dcfee60$require$URLSerializer = $dGZhg.URLSerializer;

var $lbv7W = parcelRequire("lbv7W");
var $5bfa8a692dcfee60$require$kHeadersList = $lbv7W.kHeadersList;
var $5bfa8a692dcfee60$require$kConstruct = $lbv7W.kConstruct;


var $5bfa8a692dcfee60$require$getMaxListeners = $3B1P3$events.getMaxListeners;
var $5bfa8a692dcfee60$require$setMaxListeners = $3B1P3$events.setMaxListeners;
var $5bfa8a692dcfee60$require$getEventListeners = $3B1P3$events.getEventListeners;
var $5bfa8a692dcfee60$require$defaultMaxListeners = $3B1P3$events.defaultMaxListeners;
let $5bfa8a692dcfee60$var$TransformStream = globalThis.TransformStream;
const $5bfa8a692dcfee60$var$kAbortController = Symbol("abortController");
const $5bfa8a692dcfee60$var$requestFinalizer = new $5bfa8a692dcfee60$var$FinalizationRegistry(({ signal: signal, abort: abort })=>{
    signal.removeEventListener("abort", abort);
});

// https://fetch.spec.whatwg.org/#request-class
class $5bfa8a692dcfee60$var$Request {
    // https://fetch.spec.whatwg.org/#dom-request
    constructor(input, init = {}){
        var _request_window_constructor, _request_window;
        if (input === $5bfa8a692dcfee60$require$kConstruct) return;
        $5bfa8a692dcfee60$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Request constructor"
        });
        input = $5bfa8a692dcfee60$require$webidl.converters.RequestInfo(input);
        init = $5bfa8a692dcfee60$require$webidl.converters.RequestInit(init);
        // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
        this[$5bfa8a692dcfee60$require$kRealm] = {
            settingsObject: {
                baseUrl: $5bfa8a692dcfee60$require$getGlobalOrigin(),
                get origin () {
                    var _this_baseUrl;
                    return (_this_baseUrl = this.baseUrl) === null || _this_baseUrl === void 0 ? void 0 : _this_baseUrl.origin;
                },
                policyContainer: $5bfa8a692dcfee60$require$makePolicyContainer()
            }
        };
        // 1. Let request be null.
        let request = null;
        // 2. Let fallbackMode be null.
        let fallbackMode = null;
        // 3. Let baseURL be this’s relevant settings object’s API base URL.
        const baseUrl = this[$5bfa8a692dcfee60$require$kRealm].settingsObject.baseUrl;
        // 4. Let signal be null.
        let signal = null;
        // 5. If input is a string, then:
        if (typeof input === "string") {
            // 1. Let parsedURL be the result of parsing input with baseURL.
            // 2. If parsedURL is failure, then throw a TypeError.
            let parsedURL;
            try {
                parsedURL = new URL(input, baseUrl);
            } catch (err) {
                throw new TypeError("Failed to parse URL from " + input, {
                    cause: err
                });
            }
            // 3. If parsedURL includes credentials, then throw a TypeError.
            if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
            // 4. Set request to a new request whose URL is parsedURL.
            request = $5bfa8a692dcfee60$var$makeRequest({
                urlList: [
                    parsedURL
                ]
            });
            // 5. Set fallbackMode to "cors".
            fallbackMode = "cors";
        } else {
            // 6. Otherwise:
            // 7. Assert: input is a Request object.
            $3B1P3$assert(input instanceof $5bfa8a692dcfee60$var$Request);
            // 8. Set request to input’s request.
            request = input[$5bfa8a692dcfee60$require$kState];
            // 9. Set signal to input’s signal.
            signal = input[$5bfa8a692dcfee60$require$kSignal];
        }
        // 7. Let origin be this’s relevant settings object’s origin.
        const origin = this[$5bfa8a692dcfee60$require$kRealm].settingsObject.origin;
        // 8. Let window be "client".
        let window = "client";
        // 9. If request’s window is an environment settings object and its origin
        // is same origin with origin, then set window to request’s window.
        if (((_request_window = request.window) === null || _request_window === void 0 ? void 0 : (_request_window_constructor = _request_window.constructor) === null || _request_window_constructor === void 0 ? void 0 : _request_window_constructor.name) === "EnvironmentSettingsObject" && $5bfa8a692dcfee60$require$sameOrigin(request.window, origin)) window = request.window;
        // 10. If init["window"] exists and is non-null, then throw a TypeError.
        if (init.window != null) throw new TypeError(`'window' option '${window}' must be null`);
        // 11. If init["window"] exists, then set window to "no-window".
        if ("window" in init) window = "no-window";
        // 12. Set request to a new request with the following properties:
        request = $5bfa8a692dcfee60$var$makeRequest({
            // URL request’s URL.
            // undici implementation note: this is set as the first item in request's urlList in makeRequest
            // method request’s method.
            method: request.method,
            // header list A copy of request’s header list.
            // undici implementation note: headersList is cloned in makeRequest
            headersList: request.headersList,
            // unsafe-request flag Set.
            unsafeRequest: request.unsafeRequest,
            // client This’s relevant settings object.
            client: this[$5bfa8a692dcfee60$require$kRealm].settingsObject,
            window: // window window.
            window,
            // priority request’s priority.
            priority: request.priority,
            // origin request’s origin. The propagation of the origin is only significant for navigation requests
            // being handled by a service worker. In this scenario a request can have an origin that is different
            // from the current client.
            origin: request.origin,
            // referrer request’s referrer.
            referrer: request.referrer,
            // referrer policy request’s referrer policy.
            referrerPolicy: request.referrerPolicy,
            // mode request’s mode.
            mode: request.mode,
            // credentials mode request’s credentials mode.
            credentials: request.credentials,
            // cache mode request’s cache mode.
            cache: request.cache,
            // redirect mode request’s redirect mode.
            redirect: request.redirect,
            // integrity metadata request’s integrity metadata.
            integrity: request.integrity,
            // keepalive request’s keepalive.
            keepalive: request.keepalive,
            // reload-navigation flag request’s reload-navigation flag.
            reloadNavigation: request.reloadNavigation,
            // history-navigation flag request’s history-navigation flag.
            historyNavigation: request.historyNavigation,
            // URL list A clone of request’s URL list.
            urlList: [
                ...request.urlList
            ]
        });
        const initHasKey = Object.keys(init).length !== 0;
        // 13. If init is not empty, then:
        if (initHasKey) {
            // 1. If request’s mode is "navigate", then set it to "same-origin".
            if (request.mode === "navigate") request.mode = "same-origin";
            // 2. Unset request’s reload-navigation flag.
            request.reloadNavigation = false;
            // 3. Unset request’s history-navigation flag.
            request.historyNavigation = false;
            // 4. Set request’s origin to "client".
            request.origin = "client";
            // 5. Set request’s referrer to "client"
            request.referrer = "client";
            // 6. Set request’s referrer policy to the empty string.
            request.referrerPolicy = "";
            // 7. Set request’s URL to request’s current URL.
            request.url = request.urlList[request.urlList.length - 1];
            // 8. Set request’s URL list to « request’s URL ».
            request.urlList = [
                request.url
            ];
        }
        // 14. If init["referrer"] exists, then:
        if (init.referrer !== undefined) {
            // 1. Let referrer be init["referrer"].
            const referrer = init.referrer;
            // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
            if (referrer === "") request.referrer = "no-referrer";
            else {
                // 1. Let parsedReferrer be the result of parsing referrer with
                // baseURL.
                // 2. If parsedReferrer is failure, then throw a TypeError.
                let parsedReferrer;
                try {
                    parsedReferrer = new URL(referrer, baseUrl);
                } catch (err) {
                    throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, {
                        cause: err
                    });
                }
                // 3. If one of the following is true
                // - parsedReferrer’s scheme is "about" and path is the string "client"
                // - parsedReferrer’s origin is not same origin with origin
                // then set request’s referrer to "client".
                if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !$5bfa8a692dcfee60$require$sameOrigin(parsedReferrer, this[$5bfa8a692dcfee60$require$kRealm].settingsObject.baseUrl)) request.referrer = "client";
                else // 4. Otherwise, set request’s referrer to parsedReferrer.
                request.referrer = parsedReferrer;
            }
        }
        // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
        // to it.
        if (init.referrerPolicy !== undefined) request.referrerPolicy = init.referrerPolicy;
        // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
        let mode;
        if (init.mode !== undefined) mode = init.mode;
        else mode = fallbackMode;
        // 17. If mode is "navigate", then throw a TypeError.
        if (mode === "navigate") throw $5bfa8a692dcfee60$require$webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
        });
        // 18. If mode is non-null, set request’s mode to mode.
        if (mode != null) request.mode = mode;
        // 19. If init["credentials"] exists, then set request’s credentials mode
        // to it.
        if (init.credentials !== undefined) request.credentials = init.credentials;
        // 18. If init["cache"] exists, then set request’s cache mode to it.
        if (init.cache !== undefined) request.cache = init.cache;
        // 21. If request’s cache mode is "only-if-cached" and request’s mode is
        // not "same-origin", then throw a TypeError.
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
        // 22. If init["redirect"] exists, then set request’s redirect mode to it.
        if (init.redirect !== undefined) request.redirect = init.redirect;
        // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
        if (init.integrity != null) request.integrity = String(init.integrity);
        // 24. If init["keepalive"] exists, then set request’s keepalive to it.
        if (init.keepalive !== undefined) request.keepalive = Boolean(init.keepalive);
        // 25. If init["method"] exists, then:
        if (init.method !== undefined) {
            // 1. Let method be init["method"].
            let method = init.method;
            // 2. If method is not a method or method is a forbidden method, then
            // throw a TypeError.
            if (!$5bfa8a692dcfee60$require$isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
            if ($5bfa8a692dcfee60$require$forbiddenMethodsSet.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);
            var _normalizeMethodRecord_method;
            // 3. Normalize method.
            method = (_normalizeMethodRecord_method = $5bfa8a692dcfee60$require$normalizeMethodRecord[method]) !== null && _normalizeMethodRecord_method !== void 0 ? _normalizeMethodRecord_method : $5bfa8a692dcfee60$require$normalizeMethod(method);
            // 4. Set request’s method to method.
            request.method = method;
        }
        // 26. If init["signal"] exists, then set signal to it.
        if (init.signal !== undefined) signal = init.signal;
        // 27. Set this’s request to request.
        this[$5bfa8a692dcfee60$require$kState] = request;
        // 28. Set this’s signal to a new AbortSignal object with this’s relevant
        // Realm.
        // TODO: could this be simplified with AbortSignal.any
        // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
        const ac = new AbortController();
        this[$5bfa8a692dcfee60$require$kSignal] = ac.signal;
        this[$5bfa8a692dcfee60$require$kSignal][$5bfa8a692dcfee60$require$kRealm] = this[$5bfa8a692dcfee60$require$kRealm];
        // 29. If signal is not null, then make this’s signal follow signal.
        if (signal != null) {
            if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
            if (signal.aborted) ac.abort(signal.reason);
            else {
                // Keep a strong ref to ac while request object
                // is alive. This is needed to prevent AbortController
                // from being prematurely garbage collected.
                // See, https://github.com/nodejs/undici/issues/1926.
                this[$5bfa8a692dcfee60$var$kAbortController] = ac;
                const acRef = new WeakRef(ac);
                const abort = function() {
                    const ac = acRef.deref();
                    if (ac !== undefined) ac.abort(this.reason);
                };
                // Third-party AbortControllers may not work with these.
                // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
                try {
                    // If the max amount of listeners is equal to the default, increase it
                    // This is only available in node >= v19.9.0
                    if (typeof $5bfa8a692dcfee60$require$getMaxListeners === "function" && $5bfa8a692dcfee60$require$getMaxListeners(signal) === $5bfa8a692dcfee60$require$defaultMaxListeners) $5bfa8a692dcfee60$require$setMaxListeners(100, signal);
                    else if ($5bfa8a692dcfee60$require$getEventListeners(signal, "abort").length >= $5bfa8a692dcfee60$require$defaultMaxListeners) $5bfa8a692dcfee60$require$setMaxListeners(100, signal);
                } catch  {}
                $3zyxC.addAbortListener(signal, abort);
                $5bfa8a692dcfee60$var$requestFinalizer.register(ac, {
                    signal: signal,
                    abort: abort
                });
            }
        }
        // 30. Set this’s headers to a new Headers object with this’s relevant
        // Realm, whose header list is request’s header list and guard is
        // "request".
        this[$5bfa8a692dcfee60$require$kHeaders] = new $5bfa8a692dcfee60$require$Headers($5bfa8a692dcfee60$require$kConstruct);
        this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kHeadersList] = request.headersList;
        this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kGuard] = "request";
        this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kRealm] = this[$5bfa8a692dcfee60$require$kRealm];
        // 31. If this’s request’s mode is "no-cors", then:
        if (mode === "no-cors") {
            // 1. If this’s request’s method is not a CORS-safelisted method,
            // then throw a TypeError.
            if (!$5bfa8a692dcfee60$require$corsSafeListedMethodsSet.has(request.method)) throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
            // 2. Set this’s headers’s guard to "request-no-cors".
            this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kGuard] = "request-no-cors";
        }
        // 32. If init is not empty, then:
        if (initHasKey) {
            /** @type {HeadersList} */ const headersList = this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kHeadersList];
            // 1. Let headers be a copy of this’s headers and its associated header
            // list.
            // 2. If init["headers"] exists, then set headers to init["headers"].
            const headers = init.headers !== undefined ? init.headers : new $5bfa8a692dcfee60$require$HeadersList(headersList);
            // 3. Empty this’s headers’s header list.
            headersList.clear();
            // 4. If headers is a Headers object, then for each header in its header
            // list, append header’s name/header’s value to this’s headers.
            if (headers instanceof $5bfa8a692dcfee60$require$HeadersList) {
                for (const [key, val] of headers)headersList.append(key, val);
                // Note: Copy the `set-cookie` meta-data.
                headersList.cookies = headers.cookies;
            } else // 5. Otherwise, fill this’s headers with headers.
            $5bfa8a692dcfee60$require$fillHeaders(this[$5bfa8a692dcfee60$require$kHeaders], headers);
        }
        // 33. Let inputBody be input’s request’s body if input is a Request
        // object; otherwise null.
        const inputBody = input instanceof $5bfa8a692dcfee60$var$Request ? input[$5bfa8a692dcfee60$require$kState].body : null;
        // 34. If either init["body"] exists and is non-null or inputBody is
        // non-null, and request’s method is `GET` or `HEAD`, then throw a
        // TypeError.
        if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
        // 35. Let initBody be null.
        let initBody = null;
        // 36. If init["body"] exists and is non-null, then:
        if (init.body != null) {
            // 1. Let Content-Type be null.
            // 2. Set initBody and Content-Type to the result of extracting
            // init["body"], with keepalive set to request’s keepalive.
            const [extractedBody, contentType] = $5bfa8a692dcfee60$require$extractBody(init.body, request.keepalive);
            initBody = extractedBody;
            // 3, If Content-Type is non-null and this’s headers’s header list does
            // not contain `Content-Type`, then append `Content-Type`/Content-Type to
            // this’s headers.
            if (contentType && !this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kHeadersList].contains("content-type")) this[$5bfa8a692dcfee60$require$kHeaders].append("content-type", contentType);
        }
        // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
        // inputBody.
        const inputOrInitBody = initBody !== null && initBody !== void 0 ? initBody : inputBody;
        // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
        // null, then:
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
            // 1. If initBody is non-null and init["duplex"] does not exist,
            //    then throw a TypeError.
            if (initBody != null && init.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
            // 2. If this’s request’s mode is neither "same-origin" nor "cors",
            // then throw a TypeError.
            if (request.mode !== "same-origin" && request.mode !== "cors") throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
            // 3. Set this’s request’s use-CORS-preflight flag.
            request.useCORSPreflightFlag = true;
        }
        // 39. Let finalBody be inputOrInitBody.
        let finalBody = inputOrInitBody;
        // 40. If initBody is null and inputBody is non-null, then:
        if (initBody == null && inputBody != null) {
            // 1. If input is unusable, then throw a TypeError.
            if ($3zyxC.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
            // 2. Set finalBody to the result of creating a proxy for inputBody.
            if (!$5bfa8a692dcfee60$var$TransformStream) $5bfa8a692dcfee60$var$TransformStream = $3B1P3$streamweb.TransformStream;
            // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
            const identityTransform = new $5bfa8a692dcfee60$var$TransformStream();
            inputBody.stream.pipeThrough(identityTransform);
            finalBody = {
                source: inputBody.source,
                length: inputBody.length,
                stream: identityTransform.readable
            };
        }
        // 41. Set this’s request’s body to finalBody.
        this[$5bfa8a692dcfee60$require$kState].body = finalBody;
    }
    // Returns request’s HTTP method, which is "GET" by default.
    get method() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The method getter steps are to return this’s request’s method.
        return this[$5bfa8a692dcfee60$require$kState].method;
    }
    // Returns the URL of request as a string.
    get url() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The url getter steps are to return this’s request’s URL, serialized.
        return $5bfa8a692dcfee60$require$URLSerializer(this[$5bfa8a692dcfee60$require$kState].url);
    }
    // Returns a Headers object consisting of the headers associated with request.
    // Note that headers added in the network layer by the user agent will not
    // be accounted for in this object, e.g., the "Host" header.
    get headers() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The headers getter steps are to return this’s headers.
        return this[$5bfa8a692dcfee60$require$kHeaders];
    }
    // Returns the kind of resource requested by request, e.g., "document"
    // or "script".
    get destination() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The destination getter are to return this’s request’s destination.
        return this[$5bfa8a692dcfee60$require$kState].destination;
    }
    // Returns the referrer of request. Its value can be a same-origin URL if
    // explicitly set in init, the empty string to indicate no referrer, and
    // "about:client" when defaulting to the global’s default. This is used
    // during fetching to determine the value of the `Referer` header of the
    // request being made.
    get referrer() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // 1. If this’s request’s referrer is "no-referrer", then return the
        // empty string.
        if (this[$5bfa8a692dcfee60$require$kState].referrer === "no-referrer") return "";
        // 2. If this’s request’s referrer is "client", then return
        // "about:client".
        if (this[$5bfa8a692dcfee60$require$kState].referrer === "client") return "about:client";
        // Return this’s request’s referrer, serialized.
        return this[$5bfa8a692dcfee60$require$kState].referrer.toString();
    }
    // Returns the referrer policy associated with request.
    // This is used during fetching to compute the value of the request’s
    // referrer.
    get referrerPolicy() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The referrerPolicy getter steps are to return this’s request’s referrer policy.
        return this[$5bfa8a692dcfee60$require$kState].referrerPolicy;
    }
    // Returns the mode associated with request, which is a string indicating
    // whether the request will use CORS, or will be restricted to same-origin
    // URLs.
    get mode() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The mode getter steps are to return this’s request’s mode.
        return this[$5bfa8a692dcfee60$require$kState].mode;
    }
    // Returns the credentials mode associated with request,
    // which is a string indicating whether credentials will be sent with the
    // request always, never, or only when sent to a same-origin URL.
    get credentials() {
        // The credentials getter steps are to return this’s request’s credentials mode.
        return this[$5bfa8a692dcfee60$require$kState].credentials;
    }
    // Returns the cache mode associated with request,
    // which is a string indicating how the request will
    // interact with the browser’s cache when fetching.
    get cache() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The cache getter steps are to return this’s request’s cache mode.
        return this[$5bfa8a692dcfee60$require$kState].cache;
    }
    // Returns the redirect mode associated with request,
    // which is a string indicating how redirects for the
    // request will be handled during fetching. A request
    // will follow redirects by default.
    get redirect() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The redirect getter steps are to return this’s request’s redirect mode.
        return this[$5bfa8a692dcfee60$require$kState].redirect;
    }
    // Returns request’s subresource integrity metadata, which is a
    // cryptographic hash of the resource being fetched. Its value
    // consists of multiple hashes separated by whitespace. [SRI]
    get integrity() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The integrity getter steps are to return this’s request’s integrity
        // metadata.
        return this[$5bfa8a692dcfee60$require$kState].integrity;
    }
    // Returns a boolean indicating whether or not request can outlive the
    // global in which it was created.
    get keepalive() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The keepalive getter steps are to return this’s request’s keepalive.
        return this[$5bfa8a692dcfee60$require$kState].keepalive;
    }
    // Returns a boolean indicating whether or not request is for a reload
    // navigation.
    get isReloadNavigation() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The isReloadNavigation getter steps are to return true if this’s
        // request’s reload-navigation flag is set; otherwise false.
        return this[$5bfa8a692dcfee60$require$kState].reloadNavigation;
    }
    // Returns a boolean indicating whether or not request is for a history
    // navigation (a.k.a. back-foward navigation).
    get isHistoryNavigation() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The isHistoryNavigation getter steps are to return true if this’s request’s
        // history-navigation flag is set; otherwise false.
        return this[$5bfa8a692dcfee60$require$kState].historyNavigation;
    }
    // Returns the signal associated with request, which is an AbortSignal
    // object indicating whether or not request has been aborted, and its
    // abort event handler.
    get signal() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // The signal getter steps are to return this’s signal.
        return this[$5bfa8a692dcfee60$require$kSignal];
    }
    get body() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        return this[$5bfa8a692dcfee60$require$kState].body ? this[$5bfa8a692dcfee60$require$kState].body.stream : null;
    }
    get bodyUsed() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        return !!this[$5bfa8a692dcfee60$require$kState].body && $3zyxC.isDisturbed(this[$5bfa8a692dcfee60$require$kState].body.stream);
    }
    get duplex() {
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        return "half";
    }
    // Returns a clone of request.
    clone() {
        var _this_body;
        $5bfa8a692dcfee60$require$webidl.brandCheck(this, $5bfa8a692dcfee60$var$Request);
        // 1. If this is unusable, then throw a TypeError.
        if (this.bodyUsed || ((_this_body = this.body) === null || _this_body === void 0 ? void 0 : _this_body.locked)) throw new TypeError("unusable");
        // 2. Let clonedRequest be the result of cloning this’s request.
        const clonedRequest = $5bfa8a692dcfee60$var$cloneRequest(this[$5bfa8a692dcfee60$require$kState]);
        // 3. Let clonedRequestObject be the result of creating a Request object,
        // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
        const clonedRequestObject = new $5bfa8a692dcfee60$var$Request($5bfa8a692dcfee60$require$kConstruct);
        clonedRequestObject[$5bfa8a692dcfee60$require$kState] = clonedRequest;
        clonedRequestObject[$5bfa8a692dcfee60$require$kRealm] = this[$5bfa8a692dcfee60$require$kRealm];
        clonedRequestObject[$5bfa8a692dcfee60$require$kHeaders] = new $5bfa8a692dcfee60$require$Headers($5bfa8a692dcfee60$require$kConstruct);
        clonedRequestObject[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kGuard] = this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kGuard];
        clonedRequestObject[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kRealm] = this[$5bfa8a692dcfee60$require$kHeaders][$5bfa8a692dcfee60$require$kRealm];
        // 4. Make clonedRequestObject’s signal follow this’s signal.
        const ac = new AbortController();
        if (this.signal.aborted) ac.abort(this.signal.reason);
        else $3zyxC.addAbortListener(this.signal, ()=>{
            ac.abort(this.signal.reason);
        });
        clonedRequestObject[$5bfa8a692dcfee60$require$kSignal] = ac.signal;
        // 4. Return clonedRequestObject.
        return clonedRequestObject;
    }
}
$5bfa8a692dcfee60$require$mixinBody($5bfa8a692dcfee60$var$Request);
function $5bfa8a692dcfee60$var$makeRequest(init) {
    // https://fetch.spec.whatwg.org/#requests
    const request = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init,
        headersList: init.headersList ? new $5bfa8a692dcfee60$require$HeadersList(init.headersList) : new $5bfa8a692dcfee60$require$HeadersList()
    };
    request.url = request.urlList[0];
    return request;
}
// https://fetch.spec.whatwg.org/#concept-request-clone
function $5bfa8a692dcfee60$var$cloneRequest(request) {
    // To clone a request request, run these steps:
    // 1. Let newRequest be a copy of request, except for its body.
    const newRequest = $5bfa8a692dcfee60$var$makeRequest({
        ...request,
        body: null
    });
    // 2. If request’s body is non-null, set newRequest’s body to the
    // result of cloning request’s body.
    if (request.body != null) newRequest.body = $5bfa8a692dcfee60$require$cloneBody(request.body);
    // 3. Return newRequest.
    return newRequest;
}
Object.defineProperties($5bfa8a692dcfee60$var$Request.prototype, {
    method: $5bfa8a692dcfee60$var$kEnumerableProperty,
    url: $5bfa8a692dcfee60$var$kEnumerableProperty,
    headers: $5bfa8a692dcfee60$var$kEnumerableProperty,
    redirect: $5bfa8a692dcfee60$var$kEnumerableProperty,
    clone: $5bfa8a692dcfee60$var$kEnumerableProperty,
    signal: $5bfa8a692dcfee60$var$kEnumerableProperty,
    duplex: $5bfa8a692dcfee60$var$kEnumerableProperty,
    destination: $5bfa8a692dcfee60$var$kEnumerableProperty,
    body: $5bfa8a692dcfee60$var$kEnumerableProperty,
    bodyUsed: $5bfa8a692dcfee60$var$kEnumerableProperty,
    isHistoryNavigation: $5bfa8a692dcfee60$var$kEnumerableProperty,
    isReloadNavigation: $5bfa8a692dcfee60$var$kEnumerableProperty,
    keepalive: $5bfa8a692dcfee60$var$kEnumerableProperty,
    integrity: $5bfa8a692dcfee60$var$kEnumerableProperty,
    cache: $5bfa8a692dcfee60$var$kEnumerableProperty,
    credentials: $5bfa8a692dcfee60$var$kEnumerableProperty,
    attribute: $5bfa8a692dcfee60$var$kEnumerableProperty,
    referrerPolicy: $5bfa8a692dcfee60$var$kEnumerableProperty,
    referrer: $5bfa8a692dcfee60$var$kEnumerableProperty,
    mode: $5bfa8a692dcfee60$var$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
    }
});
$5bfa8a692dcfee60$require$webidl.converters.Request = $5bfa8a692dcfee60$require$webidl.interfaceConverter($5bfa8a692dcfee60$var$Request);
// https://fetch.spec.whatwg.org/#requestinfo
$5bfa8a692dcfee60$require$webidl.converters.RequestInfo = function(V) {
    if (typeof V === "string") return $5bfa8a692dcfee60$require$webidl.converters.USVString(V);
    if (V instanceof $5bfa8a692dcfee60$var$Request) return $5bfa8a692dcfee60$require$webidl.converters.Request(V);
    return $5bfa8a692dcfee60$require$webidl.converters.USVString(V);
};
$5bfa8a692dcfee60$require$webidl.converters.AbortSignal = $5bfa8a692dcfee60$require$webidl.interfaceConverter(AbortSignal);
// https://fetch.spec.whatwg.org/#requestinit
$5bfa8a692dcfee60$require$webidl.converters.RequestInit = $5bfa8a692dcfee60$require$webidl.dictionaryConverter([
    {
        key: "method",
        converter: $5bfa8a692dcfee60$require$webidl.converters.ByteString
    },
    {
        key: "headers",
        converter: $5bfa8a692dcfee60$require$webidl.converters.HeadersInit
    },
    {
        key: "body",
        converter: $5bfa8a692dcfee60$require$webidl.nullableConverter($5bfa8a692dcfee60$require$webidl.converters.BodyInit)
    },
    {
        key: "referrer",
        converter: $5bfa8a692dcfee60$require$webidl.converters.USVString
    },
    {
        key: "referrerPolicy",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: $5bfa8a692dcfee60$require$referrerPolicy
    },
    {
        key: "mode",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: $5bfa8a692dcfee60$require$requestMode
    },
    {
        key: "credentials",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: $5bfa8a692dcfee60$require$requestCredentials
    },
    {
        key: "cache",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: $5bfa8a692dcfee60$require$requestCache
    },
    {
        key: "redirect",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: $5bfa8a692dcfee60$require$requestRedirect
    },
    {
        key: "integrity",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString
    },
    {
        key: "keepalive",
        converter: $5bfa8a692dcfee60$require$webidl.converters.boolean
    },
    {
        key: "signal",
        converter: $5bfa8a692dcfee60$require$webidl.nullableConverter((signal)=>$5bfa8a692dcfee60$require$webidl.converters.AbortSignal(signal, {
                strict: false
            }))
    },
    {
        key: "window",
        converter: $5bfa8a692dcfee60$require$webidl.converters.any
    },
    {
        key: "duplex",
        converter: $5bfa8a692dcfee60$require$webidl.converters.DOMString,
        allowedValues: $5bfa8a692dcfee60$require$requestDuplex
    }
]);
module.exports = {
    Request: $5bfa8a692dcfee60$var$Request,
    makeRequest: $5bfa8a692dcfee60$var$makeRequest
};

});


parcelRegister("hJgHT", function(module, exports) {
"use strict";

var $kzGF2 = parcelRequire("kzGF2");
var $ce83994b45faefc0$require$staticPropertyDescriptors = $kzGF2.staticPropertyDescriptors;
var $ce83994b45faefc0$require$readOperation = $kzGF2.readOperation;
var $ce83994b45faefc0$require$fireAProgressEvent = $kzGF2.fireAProgressEvent;

var $iMYzv = parcelRequire("iMYzv");
var $ce83994b45faefc0$require$kState = $iMYzv.kState;
var $ce83994b45faefc0$require$kError = $iMYzv.kError;
var $ce83994b45faefc0$require$kResult = $iMYzv.kResult;
var $ce83994b45faefc0$require$kEvents = $iMYzv.kEvents;
var $ce83994b45faefc0$require$kAborted = $iMYzv.kAborted;

var $2BhCx = parcelRequire("2BhCx");
var $ce83994b45faefc0$require$webidl = $2BhCx.webidl;

var $3zyxC = parcelRequire("3zyxC");
var $ce83994b45faefc0$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;
class $ce83994b45faefc0$var$FileReader extends EventTarget {
    constructor(){
        super();
        this[$ce83994b45faefc0$require$kState] = "empty";
        this[$ce83994b45faefc0$require$kResult] = null;
        this[$ce83994b45faefc0$require$kError] = null;
        this[$ce83994b45faefc0$require$kEvents] = {
            loadend: null,
            error: null,
            abort: null,
            load: null,
            progress: null,
            loadstart: null
        };
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
   * @param {import('buffer').Blob} blob
   */ readAsArrayBuffer(blob) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        $ce83994b45faefc0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsArrayBuffer"
        });
        blob = $ce83994b45faefc0$require$webidl.converters.Blob(blob, {
            strict: false
        });
        // The readAsArrayBuffer(blob) method, when invoked,
        // must initiate a read operation for blob with ArrayBuffer.
        $ce83994b45faefc0$require$readOperation(this, blob, "ArrayBuffer");
    }
    /**
   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
   * @param {import('buffer').Blob} blob
   */ readAsBinaryString(blob) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        $ce83994b45faefc0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsBinaryString"
        });
        blob = $ce83994b45faefc0$require$webidl.converters.Blob(blob, {
            strict: false
        });
        // The readAsBinaryString(blob) method, when invoked,
        // must initiate a read operation for blob with BinaryString.
        $ce83994b45faefc0$require$readOperation(this, blob, "BinaryString");
    }
    /**
   * @see https://w3c.github.io/FileAPI/#readAsDataText
   * @param {import('buffer').Blob} blob
   * @param {string?} encoding
   */ readAsText(blob, encoding) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        $ce83994b45faefc0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsText"
        });
        blob = $ce83994b45faefc0$require$webidl.converters.Blob(blob, {
            strict: false
        });
        if (encoding !== undefined) encoding = $ce83994b45faefc0$require$webidl.converters.DOMString(encoding);
        // The readAsText(blob, encoding) method, when invoked,
        // must initiate a read operation for blob with Text and encoding.
        $ce83994b45faefc0$require$readOperation(this, blob, "Text", encoding);
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
   * @param {import('buffer').Blob} blob
   */ readAsDataURL(blob) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        $ce83994b45faefc0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsDataURL"
        });
        blob = $ce83994b45faefc0$require$webidl.converters.Blob(blob, {
            strict: false
        });
        // The readAsDataURL(blob) method, when invoked, must
        // initiate a read operation for blob with DataURL.
        $ce83994b45faefc0$require$readOperation(this, blob, "DataURL");
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dfn-abort
   */ abort() {
        // 1. If this's state is "empty" or if this's state is
        //    "done" set this's result to null and terminate
        //    this algorithm.
        if (this[$ce83994b45faefc0$require$kState] === "empty" || this[$ce83994b45faefc0$require$kState] === "done") {
            this[$ce83994b45faefc0$require$kResult] = null;
            return;
        }
        // 2. If this's state is "loading" set this's state to
        //    "done" and set this's result to null.
        if (this[$ce83994b45faefc0$require$kState] === "loading") {
            this[$ce83994b45faefc0$require$kState] = "done";
            this[$ce83994b45faefc0$require$kResult] = null;
        }
        // 3. If there are any tasks from this on the file reading
        //    task source in an affiliated task queue, then remove
        //    those tasks from that task queue.
        this[$ce83994b45faefc0$require$kAborted] = true;
        // 4. Terminate the algorithm for the read method being processed.
        // TODO
        // 5. Fire a progress event called abort at this.
        $ce83994b45faefc0$require$fireAProgressEvent("abort", this);
        // 6. If this's state is not "loading", fire a progress
        //    event called loadend at this.
        if (this[$ce83994b45faefc0$require$kState] !== "loading") $ce83994b45faefc0$require$fireAProgressEvent("loadend", this);
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
   */ get readyState() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        switch(this[$ce83994b45faefc0$require$kState]){
            case "empty":
                return this.EMPTY;
            case "loading":
                return this.LOADING;
            case "done":
                return this.DONE;
        }
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
   */ get result() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        // The result attribute’s getter, when invoked, must return
        // this's result.
        return this[$ce83994b45faefc0$require$kResult];
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
   */ get error() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        // The error attribute’s getter, when invoked, must return
        // this's error.
        return this[$ce83994b45faefc0$require$kError];
    }
    get onloadend() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        return this[$ce83994b45faefc0$require$kEvents].loadend;
    }
    set onloadend(fn) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        if (this[$ce83994b45faefc0$require$kEvents].loadend) this.removeEventListener("loadend", this[$ce83994b45faefc0$require$kEvents].loadend);
        if (typeof fn === "function") {
            this[$ce83994b45faefc0$require$kEvents].loadend = fn;
            this.addEventListener("loadend", fn);
        } else this[$ce83994b45faefc0$require$kEvents].loadend = null;
    }
    get onerror() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        return this[$ce83994b45faefc0$require$kEvents].error;
    }
    set onerror(fn) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        if (this[$ce83994b45faefc0$require$kEvents].error) this.removeEventListener("error", this[$ce83994b45faefc0$require$kEvents].error);
        if (typeof fn === "function") {
            this[$ce83994b45faefc0$require$kEvents].error = fn;
            this.addEventListener("error", fn);
        } else this[$ce83994b45faefc0$require$kEvents].error = null;
    }
    get onloadstart() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        return this[$ce83994b45faefc0$require$kEvents].loadstart;
    }
    set onloadstart(fn) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        if (this[$ce83994b45faefc0$require$kEvents].loadstart) this.removeEventListener("loadstart", this[$ce83994b45faefc0$require$kEvents].loadstart);
        if (typeof fn === "function") {
            this[$ce83994b45faefc0$require$kEvents].loadstart = fn;
            this.addEventListener("loadstart", fn);
        } else this[$ce83994b45faefc0$require$kEvents].loadstart = null;
    }
    get onprogress() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        return this[$ce83994b45faefc0$require$kEvents].progress;
    }
    set onprogress(fn) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        if (this[$ce83994b45faefc0$require$kEvents].progress) this.removeEventListener("progress", this[$ce83994b45faefc0$require$kEvents].progress);
        if (typeof fn === "function") {
            this[$ce83994b45faefc0$require$kEvents].progress = fn;
            this.addEventListener("progress", fn);
        } else this[$ce83994b45faefc0$require$kEvents].progress = null;
    }
    get onload() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        return this[$ce83994b45faefc0$require$kEvents].load;
    }
    set onload(fn) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        if (this[$ce83994b45faefc0$require$kEvents].load) this.removeEventListener("load", this[$ce83994b45faefc0$require$kEvents].load);
        if (typeof fn === "function") {
            this[$ce83994b45faefc0$require$kEvents].load = fn;
            this.addEventListener("load", fn);
        } else this[$ce83994b45faefc0$require$kEvents].load = null;
    }
    get onabort() {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        return this[$ce83994b45faefc0$require$kEvents].abort;
    }
    set onabort(fn) {
        $ce83994b45faefc0$require$webidl.brandCheck(this, $ce83994b45faefc0$var$FileReader);
        if (this[$ce83994b45faefc0$require$kEvents].abort) this.removeEventListener("abort", this[$ce83994b45faefc0$require$kEvents].abort);
        if (typeof fn === "function") {
            this[$ce83994b45faefc0$require$kEvents].abort = fn;
            this.addEventListener("abort", fn);
        } else this[$ce83994b45faefc0$require$kEvents].abort = null;
    }
}
// https://w3c.github.io/FileAPI/#dom-filereader-empty
$ce83994b45faefc0$var$FileReader.EMPTY = $ce83994b45faefc0$var$FileReader.prototype.EMPTY = 0;
// https://w3c.github.io/FileAPI/#dom-filereader-loading
$ce83994b45faefc0$var$FileReader.LOADING = $ce83994b45faefc0$var$FileReader.prototype.LOADING = 1;
// https://w3c.github.io/FileAPI/#dom-filereader-done
$ce83994b45faefc0$var$FileReader.DONE = $ce83994b45faefc0$var$FileReader.prototype.DONE = 2;
Object.defineProperties($ce83994b45faefc0$var$FileReader.prototype, {
    EMPTY: $ce83994b45faefc0$require$staticPropertyDescriptors,
    LOADING: $ce83994b45faefc0$require$staticPropertyDescriptors,
    DONE: $ce83994b45faefc0$require$staticPropertyDescriptors,
    readAsArrayBuffer: $ce83994b45faefc0$require$kEnumerableProperty,
    readAsBinaryString: $ce83994b45faefc0$require$kEnumerableProperty,
    readAsText: $ce83994b45faefc0$require$kEnumerableProperty,
    readAsDataURL: $ce83994b45faefc0$require$kEnumerableProperty,
    abort: $ce83994b45faefc0$require$kEnumerableProperty,
    readyState: $ce83994b45faefc0$require$kEnumerableProperty,
    result: $ce83994b45faefc0$require$kEnumerableProperty,
    error: $ce83994b45faefc0$require$kEnumerableProperty,
    onloadstart: $ce83994b45faefc0$require$kEnumerableProperty,
    onprogress: $ce83994b45faefc0$require$kEnumerableProperty,
    onload: $ce83994b45faefc0$require$kEnumerableProperty,
    onabort: $ce83994b45faefc0$require$kEnumerableProperty,
    onerror: $ce83994b45faefc0$require$kEnumerableProperty,
    onloadend: $ce83994b45faefc0$require$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
    }
});
Object.defineProperties($ce83994b45faefc0$var$FileReader, {
    EMPTY: $ce83994b45faefc0$require$staticPropertyDescriptors,
    LOADING: $ce83994b45faefc0$require$staticPropertyDescriptors,
    DONE: $ce83994b45faefc0$require$staticPropertyDescriptors
});
module.exports = {
    FileReader: $ce83994b45faefc0$var$FileReader
};

});
parcelRegister("kzGF2", function(module, exports) {
"use strict";

var $iMYzv = parcelRequire("iMYzv");
var $efa82b1585c1cc96$require$kState = $iMYzv.kState;
var $efa82b1585c1cc96$require$kError = $iMYzv.kError;
var $efa82b1585c1cc96$require$kResult = $iMYzv.kResult;
var $efa82b1585c1cc96$require$kAborted = $iMYzv.kAborted;
var $efa82b1585c1cc96$require$kLastProgressEventFired = $iMYzv.kLastProgressEventFired;

var $3Mu30 = parcelRequire("3Mu30");
var $efa82b1585c1cc96$require$ProgressEvent = $3Mu30.ProgressEvent;

var $gGDPS = parcelRequire("gGDPS");
var $efa82b1585c1cc96$require$getEncoding = $gGDPS.getEncoding;

var $leEOP = parcelRequire("leEOP");
var $efa82b1585c1cc96$require$DOMException = $leEOP.DOMException;

var $dGZhg = parcelRequire("dGZhg");
var $efa82b1585c1cc96$require$serializeAMimeType = $dGZhg.serializeAMimeType;
var $efa82b1585c1cc96$require$parseMIMEType = $dGZhg.parseMIMEType;

var $efa82b1585c1cc96$require$types = $3B1P3$util.types;

var $efa82b1585c1cc96$require$StringDecoder = $3B1P3$string_decoder.StringDecoder;

var $efa82b1585c1cc96$require$btoa = $3B1P3$buffer.btoa;
/** @type {PropertyDescriptor} */ const $efa82b1585c1cc96$var$staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
};
/**
 * @see https://w3c.github.io/FileAPI/#readOperation
 * @param {import('./filereader').FileReader} fr
 * @param {import('buffer').Blob} blob
 * @param {string} type
 * @param {string?} encodingName
 */ function $efa82b1585c1cc96$var$readOperation(fr, blob, type, encodingName) {
    // 1. If fr’s state is "loading", throw an InvalidStateError
    //    DOMException.
    if (fr[$efa82b1585c1cc96$require$kState] === "loading") throw new $efa82b1585c1cc96$require$DOMException("Invalid state", "InvalidStateError");
    // 2. Set fr’s state to "loading".
    fr[$efa82b1585c1cc96$require$kState] = "loading";
    // 3. Set fr’s result to null.
    fr[$efa82b1585c1cc96$require$kResult] = null;
    // 4. Set fr’s error to null.
    fr[$efa82b1585c1cc96$require$kError] = null;
    // 5. Let stream be the result of calling get stream on blob.
    /** @type {import('stream/web').ReadableStream} */ const stream = blob.stream();
    // 6. Let reader be the result of getting a reader from stream.
    const reader = stream.getReader();
    // 7. Let bytes be an empty byte sequence.
    /** @type {Uint8Array[]} */ const bytes = [];
    // 8. Let chunkPromise be the result of reading a chunk from
    //    stream with reader.
    let chunkPromise = reader.read();
    // 9. Let isFirstChunk be true.
    let isFirstChunk = true;
    (async ()=>{
        while(!fr[$efa82b1585c1cc96$require$kAborted])// 1. Wait for chunkPromise to be fulfilled or rejected.
        try {
            const { done: done, value: value } = await chunkPromise;
            // 2. If chunkPromise is fulfilled, and isFirstChunk is
            //    true, queue a task to fire a progress event called
            //    loadstart at fr.
            if (isFirstChunk && !fr[$efa82b1585c1cc96$require$kAborted]) queueMicrotask(()=>{
                $efa82b1585c1cc96$var$fireAProgressEvent("loadstart", fr);
            });
            // 3. Set isFirstChunk to false.
            isFirstChunk = false;
            // 4. If chunkPromise is fulfilled with an object whose
            //    done property is false and whose value property is
            //    a Uint8Array object, run these steps:
            if (!done && $efa82b1585c1cc96$require$types.isUint8Array(value)) {
                // 1. Let bs be the byte sequence represented by the
                //    Uint8Array object.
                // 2. Append bs to bytes.
                bytes.push(value);
                // 3. If roughly 50ms have passed since these steps
                //    were last invoked, queue a task to fire a
                //    progress event called progress at fr.
                if ((fr[$efa82b1585c1cc96$require$kLastProgressEventFired] === undefined || Date.now() - fr[$efa82b1585c1cc96$require$kLastProgressEventFired] >= 50) && !fr[$efa82b1585c1cc96$require$kAborted]) {
                    fr[$efa82b1585c1cc96$require$kLastProgressEventFired] = Date.now();
                    queueMicrotask(()=>{
                        $efa82b1585c1cc96$var$fireAProgressEvent("progress", fr);
                    });
                }
                // 4. Set chunkPromise to the result of reading a
                //    chunk from stream with reader.
                chunkPromise = reader.read();
            } else if (done) {
                // 5. Otherwise, if chunkPromise is fulfilled with an
                //    object whose done property is true, queue a task
                //    to run the following steps and abort this algorithm:
                queueMicrotask(()=>{
                    // 1. Set fr’s state to "done".
                    fr[$efa82b1585c1cc96$require$kState] = "done";
                    // 2. Let result be the result of package data given
                    //    bytes, type, blob’s type, and encodingName.
                    try {
                        const result = $efa82b1585c1cc96$var$packageData(bytes, type, blob.type, encodingName);
                        // 4. Else:
                        if (fr[$efa82b1585c1cc96$require$kAborted]) return;
                        // 1. Set fr’s result to result.
                        fr[$efa82b1585c1cc96$require$kResult] = result;
                        // 2. Fire a progress event called load at the fr.
                        $efa82b1585c1cc96$var$fireAProgressEvent("load", fr);
                    } catch (error) {
                        // 3. If package data threw an exception error:
                        // 1. Set fr’s error to error.
                        fr[$efa82b1585c1cc96$require$kError] = error;
                        // 2. Fire a progress event called error at fr.
                        $efa82b1585c1cc96$var$fireAProgressEvent("error", fr);
                    }
                    // 5. If fr’s state is not "loading", fire a progress
                    //    event called loadend at the fr.
                    if (fr[$efa82b1585c1cc96$require$kState] !== "loading") $efa82b1585c1cc96$var$fireAProgressEvent("loadend", fr);
                });
                break;
            }
        } catch (error) {
            if (fr[$efa82b1585c1cc96$require$kAborted]) return;
            // 6. Otherwise, if chunkPromise is rejected with an
            //    error error, queue a task to run the following
            //    steps and abort this algorithm:
            queueMicrotask(()=>{
                // 1. Set fr’s state to "done".
                fr[$efa82b1585c1cc96$require$kState] = "done";
                // 2. Set fr’s error to error.
                fr[$efa82b1585c1cc96$require$kError] = error;
                // 3. Fire a progress event called error at fr.
                $efa82b1585c1cc96$var$fireAProgressEvent("error", fr);
                // 4. If fr’s state is not "loading", fire a progress
                //    event called loadend at fr.
                if (fr[$efa82b1585c1cc96$require$kState] !== "loading") $efa82b1585c1cc96$var$fireAProgressEvent("loadend", fr);
            });
            break;
        }
    })();
}
/**
 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e The name of the event
 * @param {import('./filereader').FileReader} reader
 */ function $efa82b1585c1cc96$var$fireAProgressEvent(e, reader) {
    // The progress event e does not bubble. e.bubbles must be false
    // The progress event e is NOT cancelable. e.cancelable must be false
    const event = new $efa82b1585c1cc96$require$ProgressEvent(e, {
        bubbles: false,
        cancelable: false
    });
    reader.dispatchEvent(event);
}
/**
 * @see https://w3c.github.io/FileAPI/#blob-package-data
 * @param {Uint8Array[]} bytes
 * @param {string} type
 * @param {string?} mimeType
 * @param {string?} encodingName
 */ function $efa82b1585c1cc96$var$packageData(bytes, type, mimeType, encodingName) {
    // 1. A Blob has an associated package data algorithm, given
    //    bytes, a type, a optional mimeType, and a optional
    //    encodingName, which switches on type and runs the
    //    associated steps:
    switch(type){
        case "DataURL":
            {
                // 1. Return bytes as a DataURL [RFC2397] subject to
                //    the considerations below:
                //  * Use mimeType as part of the Data URL if it is
                //    available in keeping with the Data URL
                //    specification [RFC2397].
                //  * If mimeType is not available return a Data URL
                //    without a media-type. [RFC2397].
                // https://datatracker.ietf.org/doc/html/rfc2397#section-3
                // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
                // mediatype  := [ type "/" subtype ] *( ";" parameter )
                // data       := *urlchar
                // parameter  := attribute "=" value
                let dataURL = "data:";
                const parsed = $efa82b1585c1cc96$require$parseMIMEType(mimeType || "application/octet-stream");
                if (parsed !== "failure") dataURL += $efa82b1585c1cc96$require$serializeAMimeType(parsed);
                dataURL += ";base64,";
                const decoder = new $efa82b1585c1cc96$require$StringDecoder("latin1");
                for (const chunk of bytes)dataURL += $efa82b1585c1cc96$require$btoa(decoder.write(chunk));
                dataURL += $efa82b1585c1cc96$require$btoa(decoder.end());
                return dataURL;
            }
        case "Text":
            {
                // 1. Let encoding be failure
                let encoding = "failure";
                // 2. If the encodingName is present, set encoding to the
                //    result of getting an encoding from encodingName.
                if (encodingName) encoding = $efa82b1585c1cc96$require$getEncoding(encodingName);
                // 3. If encoding is failure, and mimeType is present:
                if (encoding === "failure" && mimeType) {
                    // 1. Let type be the result of parse a MIME type
                    //    given mimeType.
                    const type = $efa82b1585c1cc96$require$parseMIMEType(mimeType);
                    // 2. If type is not failure, set encoding to the result
                    //    of getting an encoding from type’s parameters["charset"].
                    if (type !== "failure") encoding = $efa82b1585c1cc96$require$getEncoding(type.parameters.get("charset"));
                }
                // 4. If encoding is failure, then set encoding to UTF-8.
                if (encoding === "failure") encoding = "UTF-8";
                // 5. Decode bytes using fallback encoding encoding, and
                //    return the result.
                return $efa82b1585c1cc96$var$decode(bytes, encoding);
            }
        case "ArrayBuffer":
            {
                // Return a new ArrayBuffer whose contents are bytes.
                const sequence = $efa82b1585c1cc96$var$combineByteSequences(bytes);
                return sequence.buffer;
            }
        case "BinaryString":
            {
                // Return bytes as a binary string, in which every byte
                //  is represented by a code unit of equal value [0..255].
                let binaryString = "";
                const decoder = new $efa82b1585c1cc96$require$StringDecoder("latin1");
                for (const chunk of bytes)binaryString += decoder.write(chunk);
                binaryString += decoder.end();
                return binaryString;
            }
    }
}
/**
 * @see https://encoding.spec.whatwg.org/#decode
 * @param {Uint8Array[]} ioQueue
 * @param {string} encoding
 */ function $efa82b1585c1cc96$var$decode(ioQueue, encoding) {
    const bytes = $efa82b1585c1cc96$var$combineByteSequences(ioQueue);
    // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
    const BOMEncoding = $efa82b1585c1cc96$var$BOMSniffing(bytes);
    let slice = 0;
    // 2. If BOMEncoding is non-null:
    if (BOMEncoding !== null) {
        // 1. Set encoding to BOMEncoding.
        encoding = BOMEncoding;
        // 2. Read three bytes from ioQueue, if BOMEncoding is
        //    UTF-8; otherwise read two bytes.
        //    (Do nothing with those bytes.)
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
    }
    // 3. Process a queue with an instance of encoding’s
    //    decoder, ioQueue, output, and "replacement".
    // 4. Return output.
    const sliced = bytes.slice(slice);
    return new TextDecoder(encoding).decode(sliced);
}
/**
 * @see https://encoding.spec.whatwg.org/#bom-sniff
 * @param {Uint8Array} ioQueue
 */ function $efa82b1585c1cc96$var$BOMSniffing(ioQueue) {
    // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
    //    converted to a byte sequence.
    const [a, b, c] = ioQueue;
    // 2. For each of the rows in the table below, starting with
    //    the first one and going down, if BOM starts with the
    //    bytes given in the first column, then return the
    //    encoding given in the cell in the second column of that
    //    row. Otherwise, return null.
    if (a === 0xEF && b === 0xBB && c === 0xBF) return "UTF-8";
    else if (a === 0xFE && b === 0xFF) return "UTF-16BE";
    else if (a === 0xFF && b === 0xFE) return "UTF-16LE";
    return null;
}
/**
 * @param {Uint8Array[]} sequences
 */ function $efa82b1585c1cc96$var$combineByteSequences(sequences) {
    const size = sequences.reduce((a, b)=>{
        return a + b.byteLength;
    }, 0);
    let offset = 0;
    return sequences.reduce((a, b)=>{
        a.set(b, offset);
        offset += b.byteLength;
        return a;
    }, new Uint8Array(size));
}
module.exports = {
    staticPropertyDescriptors: $efa82b1585c1cc96$var$staticPropertyDescriptors,
    readOperation: $efa82b1585c1cc96$var$readOperation,
    fireAProgressEvent: $efa82b1585c1cc96$var$fireAProgressEvent
};

});
parcelRegister("iMYzv", function(module, exports) {
"use strict";
module.exports = {
    kState: Symbol("FileReader state"),
    kResult: Symbol("FileReader result"),
    kError: Symbol("FileReader error"),
    kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
    kEvents: Symbol("FileReader events"),
    kAborted: Symbol("FileReader aborted")
};

});

parcelRegister("3Mu30", function(module, exports) {
"use strict";

var $2BhCx = parcelRequire("2BhCx");
var $2c0d299ec405b1a8$require$webidl = $2BhCx.webidl;
const $2c0d299ec405b1a8$var$kState = Symbol("ProgressEvent state");
/**
 * @see https://xhr.spec.whatwg.org/#progressevent
 */ class $2c0d299ec405b1a8$var$ProgressEvent extends Event {
    constructor(type, eventInitDict = {}){
        type = $2c0d299ec405b1a8$require$webidl.converters.DOMString(type);
        eventInitDict = $2c0d299ec405b1a8$require$webidl.converters.ProgressEventInit(eventInitDict !== null && eventInitDict !== void 0 ? eventInitDict : {});
        super(type, eventInitDict);
        this[$2c0d299ec405b1a8$var$kState] = {
            lengthComputable: eventInitDict.lengthComputable,
            loaded: eventInitDict.loaded,
            total: eventInitDict.total
        };
    }
    get lengthComputable() {
        $2c0d299ec405b1a8$require$webidl.brandCheck(this, $2c0d299ec405b1a8$var$ProgressEvent);
        return this[$2c0d299ec405b1a8$var$kState].lengthComputable;
    }
    get loaded() {
        $2c0d299ec405b1a8$require$webidl.brandCheck(this, $2c0d299ec405b1a8$var$ProgressEvent);
        return this[$2c0d299ec405b1a8$var$kState].loaded;
    }
    get total() {
        $2c0d299ec405b1a8$require$webidl.brandCheck(this, $2c0d299ec405b1a8$var$ProgressEvent);
        return this[$2c0d299ec405b1a8$var$kState].total;
    }
}
$2c0d299ec405b1a8$require$webidl.converters.ProgressEventInit = $2c0d299ec405b1a8$require$webidl.dictionaryConverter([
    {
        key: "lengthComputable",
        converter: $2c0d299ec405b1a8$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "loaded",
        converter: $2c0d299ec405b1a8$require$webidl.converters["unsigned long long"],
        defaultValue: 0
    },
    {
        key: "total",
        converter: $2c0d299ec405b1a8$require$webidl.converters["unsigned long long"],
        defaultValue: 0
    },
    {
        key: "bubbles",
        converter: $2c0d299ec405b1a8$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "cancelable",
        converter: $2c0d299ec405b1a8$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "composed",
        converter: $2c0d299ec405b1a8$require$webidl.converters.boolean,
        defaultValue: false
    }
]);
module.exports = {
    ProgressEvent: $2c0d299ec405b1a8$var$ProgressEvent
};

});

parcelRegister("gGDPS", function(module, exports) {
"use strict";
/**
 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
 * @param {string|undefined} label
 */ function $c25f7824b22cbaac$var$getEncoding(label) {
    if (!label) return "failure";
    // 1. Remove any leading and trailing ASCII whitespace from label.
    // 2. If label is an ASCII case-insensitive match for any of the
    //    labels listed in the table below, then return the
    //    corresponding encoding; otherwise return failure.
    switch(label.trim().toLowerCase()){
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
            return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
            return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
            return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
            return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
            return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
            return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
            return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
            return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
            return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
            return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
            return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
            return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
            return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
            return "ISO-8859-15";
        case "iso-8859-16":
            return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
            return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
            return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
            return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
            return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
            return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
            return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
            return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
            return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
            return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
            return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
            return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
            return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
            return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
            return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
            return "GBK";
        case "gb18030":
            return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
            return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
            return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
            return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
            return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
            return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
            return "replacement";
        case "unicodefffe":
        case "utf-16be":
            return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
            return "UTF-16LE";
        case "x-user-defined":
            return "x-user-defined";
        default:
            return "failure";
    }
}
module.exports = {
    getEncoding: $c25f7824b22cbaac$var$getEncoding
};

});



parcelRegister("hcZFM", function(module, exports) {
"use strict";

var $lIr97 = parcelRequire("lIr97");
var $c8736597c01ae362$require$kConstruct = $lIr97.kConstruct;

var $A5cuK = parcelRequire("A5cuK");
var $c8736597c01ae362$require$Cache = $A5cuK.Cache;

var $2BhCx = parcelRequire("2BhCx");
var $c8736597c01ae362$require$webidl = $2BhCx.webidl;

var $3zyxC = parcelRequire("3zyxC");
var $c8736597c01ae362$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;
class $c8736597c01ae362$var$CacheStorage {
    /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
   * @type {Map<string, import('./cache').requestResponseList}
   */ #caches = new Map();
    constructor(){
        if (arguments[0] !== $c8736597c01ae362$require$kConstruct) $c8736597c01ae362$require$webidl.illegalConstructor();
    }
    async match(request, options = {}) {
        $c8736597c01ae362$require$webidl.brandCheck(this, $c8736597c01ae362$var$CacheStorage);
        $c8736597c01ae362$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.match"
        });
        request = $c8736597c01ae362$require$webidl.converters.RequestInfo(request);
        options = $c8736597c01ae362$require$webidl.converters.MultiCacheQueryOptions(options);
        // 1.
        if (options.cacheName != null) // 1.1.1.1
        {
            if (this.#caches.has(options.cacheName)) {
                // 1.1.1.1.1
                const cacheList = this.#caches.get(options.cacheName);
                const cache = new $c8736597c01ae362$require$Cache($c8736597c01ae362$require$kConstruct, cacheList);
                return await cache.match(request, options);
            }
        } else // 2.2
        for (const cacheList of this.#caches.values()){
            const cache = new $c8736597c01ae362$require$Cache($c8736597c01ae362$require$kConstruct, cacheList);
            // 2.2.1.2
            const response = await cache.match(request, options);
            if (response !== undefined) return response;
        }
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */ async has(cacheName) {
        $c8736597c01ae362$require$webidl.brandCheck(this, $c8736597c01ae362$var$CacheStorage);
        $c8736597c01ae362$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.has"
        });
        cacheName = $c8736597c01ae362$require$webidl.converters.DOMString(cacheName);
        // 2.1.1
        // 2.2
        return this.#caches.has(cacheName);
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
   * @param {string} cacheName
   * @returns {Promise<Cache>}
   */ async open(cacheName) {
        $c8736597c01ae362$require$webidl.brandCheck(this, $c8736597c01ae362$var$CacheStorage);
        $c8736597c01ae362$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.open"
        });
        cacheName = $c8736597c01ae362$require$webidl.converters.DOMString(cacheName);
        // 2.1
        if (this.#caches.has(cacheName)) {
            // await caches.open('v1') !== await caches.open('v1')
            // 2.1.1
            const cache = this.#caches.get(cacheName);
            // 2.1.1.1
            return new $c8736597c01ae362$require$Cache($c8736597c01ae362$require$kConstruct, cache);
        }
        // 2.2
        const cache = [];
        // 2.3
        this.#caches.set(cacheName, cache);
        // 2.4
        return new $c8736597c01ae362$require$Cache($c8736597c01ae362$require$kConstruct, cache);
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */ async delete(cacheName) {
        $c8736597c01ae362$require$webidl.brandCheck(this, $c8736597c01ae362$var$CacheStorage);
        $c8736597c01ae362$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.delete"
        });
        cacheName = $c8736597c01ae362$require$webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
   * @returns {string[]}
   */ async keys() {
        $c8736597c01ae362$require$webidl.brandCheck(this, $c8736597c01ae362$var$CacheStorage);
        // 2.1
        const keys = this.#caches.keys();
        // 2.2
        return [
            ...keys
        ];
    }
}
Object.defineProperties($c8736597c01ae362$var$CacheStorage.prototype, {
    [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
    },
    match: $c8736597c01ae362$require$kEnumerableProperty,
    has: $c8736597c01ae362$require$kEnumerableProperty,
    open: $c8736597c01ae362$require$kEnumerableProperty,
    delete: $c8736597c01ae362$require$kEnumerableProperty,
    keys: $c8736597c01ae362$require$kEnumerableProperty
});
module.exports = {
    CacheStorage: $c8736597c01ae362$var$CacheStorage
};

});
parcelRegister("lIr97", function(module, exports) {
"use strict";

module.exports = {
    kConstruct: (parcelRequire("lbv7W")).kConstruct
};

});

parcelRegister("A5cuK", function(module, exports) {
"use strict";

var $lIr97 = parcelRequire("lIr97");
var $06c7659fdfa31154$require$kConstruct = $lIr97.kConstruct;

var $4IF6n = parcelRequire("4IF6n");
var $06c7659fdfa31154$require$urlEquals = $4IF6n.urlEquals;
var $06c7659fdfa31154$require$getFieldValues = $4IF6n.fieldValues;

var $3zyxC = parcelRequire("3zyxC");
var $06c7659fdfa31154$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;
var $06c7659fdfa31154$require$isDisturbed = $3zyxC.isDisturbed;

var $lbv7W = parcelRequire("lbv7W");
var $06c7659fdfa31154$require$kHeadersList = $lbv7W.kHeadersList;

var $2BhCx = parcelRequire("2BhCx");
var $06c7659fdfa31154$require$webidl = $2BhCx.webidl;

var $fhz2k = parcelRequire("fhz2k");
var $06c7659fdfa31154$require$Response = $fhz2k.Response;
var $06c7659fdfa31154$require$cloneResponse = $fhz2k.cloneResponse;

var $7TBdE = parcelRequire("7TBdE");
var $06c7659fdfa31154$require$Request = $7TBdE.Request;

var $hxvf1 = parcelRequire("hxvf1");
var $06c7659fdfa31154$require$kState = $hxvf1.kState;
var $06c7659fdfa31154$require$kHeaders = $hxvf1.kHeaders;
var $06c7659fdfa31154$require$kGuard = $hxvf1.kGuard;
var $06c7659fdfa31154$require$kRealm = $hxvf1.kRealm;

var $6liPj = parcelRequire("6liPj");
var $06c7659fdfa31154$require$fetching = $6liPj.fetching;

var $f1lDT = parcelRequire("f1lDT");
var $06c7659fdfa31154$require$urlIsHttpHttpsScheme = $f1lDT.urlIsHttpHttpsScheme;
var $06c7659fdfa31154$require$createDeferredPromise = $f1lDT.createDeferredPromise;
var $06c7659fdfa31154$require$readAllBytes = $f1lDT.readAllBytes;


var $iOd5O = parcelRequire("iOd5O");
var $06c7659fdfa31154$require$getGlobalDispatcher = $iOd5O.getGlobalDispatcher;
/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
 * @typedef {Object} CacheBatchOperation
 * @property {'delete' | 'put'} type
 * @property {any} request
 * @property {any} response
 * @property {import('../../types/cache').CacheQueryOptions} options
 */ /**
 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
 * @typedef {[any, any][]} requestResponseList
 */ class $06c7659fdfa31154$var$Cache {
    /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
   * @type {requestResponseList}
   */ #relevantRequestResponseList;
    constructor(){
        if (arguments[0] !== $06c7659fdfa31154$require$kConstruct) $06c7659fdfa31154$require$webidl.illegalConstructor();
        this.#relevantRequestResponseList = arguments[1];
    }
    async match(request, options = {}) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        $06c7659fdfa31154$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.match"
        });
        request = $06c7659fdfa31154$require$webidl.converters.RequestInfo(request);
        options = $06c7659fdfa31154$require$webidl.converters.CacheQueryOptions(options);
        const p = await this.matchAll(request, options);
        if (p.length === 0) return;
        return p[0];
    }
    async matchAll(request, options = {}) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        if (request !== undefined) request = $06c7659fdfa31154$require$webidl.converters.RequestInfo(request);
        options = $06c7659fdfa31154$require$webidl.converters.CacheQueryOptions(options);
        // 1.
        let r = null;
        // 2.
        if (request !== undefined) {
            if (request instanceof $06c7659fdfa31154$require$Request) {
                // 2.1.1
                r = request[$06c7659fdfa31154$require$kState];
                // 2.1.2
                if (r.method !== "GET" && !options.ignoreMethod) return [];
            } else if (typeof request === "string") // 2.2.1
            r = new $06c7659fdfa31154$require$Request(request)[$06c7659fdfa31154$require$kState];
        }
        // 5.
        // 5.1
        const responses = [];
        // 5.2
        if (request === undefined) // 5.2.1
        for (const requestResponse of this.#relevantRequestResponseList)responses.push(requestResponse[1]);
        else {
            // 5.3.1
            const requestResponses = this.#queryCache(r, options);
            // 5.3.2
            for (const requestResponse of requestResponses)responses.push(requestResponse[1]);
        }
        // 5.4
        // We don't implement CORs so we don't need to loop over the responses, yay!
        // 5.5.1
        const responseList = [];
        // 5.5.2
        for (const response of responses){
            var _response_body;
            var _response_body_source;
            // 5.5.2.1
            const responseObject = new $06c7659fdfa31154$require$Response((_response_body_source = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.source) !== null && _response_body_source !== void 0 ? _response_body_source : null);
            const body = responseObject[$06c7659fdfa31154$require$kState].body;
            responseObject[$06c7659fdfa31154$require$kState] = response;
            responseObject[$06c7659fdfa31154$require$kState].body = body;
            responseObject[$06c7659fdfa31154$require$kHeaders][$06c7659fdfa31154$require$kHeadersList] = response.headersList;
            responseObject[$06c7659fdfa31154$require$kHeaders][$06c7659fdfa31154$require$kGuard] = "immutable";
            responseList.push(responseObject);
        }
        // 6.
        return Object.freeze(responseList);
    }
    async add(request) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        $06c7659fdfa31154$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.add"
        });
        request = $06c7659fdfa31154$require$webidl.converters.RequestInfo(request);
        // 1.
        const requests = [
            request
        ];
        // 2.
        const responseArrayPromise = this.addAll(requests);
        // 3.
        return await responseArrayPromise;
    }
    async addAll(requests) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        $06c7659fdfa31154$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.addAll"
        });
        requests = $06c7659fdfa31154$require$webidl.converters["sequence<RequestInfo>"](requests);
        // 1.
        const responsePromises = [];
        // 2.
        const requestList = [];
        // 3.
        for (const request of requests){
            if (typeof request === "string") continue;
            // 3.1
            const r = request[$06c7659fdfa31154$require$kState];
            // 3.2
            if (!$06c7659fdfa31154$require$urlIsHttpHttpsScheme(r.url) || r.method !== "GET") throw $06c7659fdfa31154$require$webidl.errors.exception({
                header: "Cache.addAll",
                message: "Expected http/s scheme when method is not GET."
            });
        }
        // 4.
        /** @type {ReturnType<typeof fetching>[]} */ const fetchControllers = [];
        // 5.
        for (const request of requests){
            // 5.1
            const r = new $06c7659fdfa31154$require$Request(request)[$06c7659fdfa31154$require$kState];
            // 5.2
            if (!$06c7659fdfa31154$require$urlIsHttpHttpsScheme(r.url)) throw $06c7659fdfa31154$require$webidl.errors.exception({
                header: "Cache.addAll",
                message: "Expected http/s scheme."
            });
            // 5.4
            r.initiator = "fetch";
            r.destination = "subresource";
            // 5.5
            requestList.push(r);
            // 5.6
            const responsePromise = $06c7659fdfa31154$require$createDeferredPromise();
            // 5.7
            fetchControllers.push($06c7659fdfa31154$require$fetching({
                request: r,
                dispatcher: $06c7659fdfa31154$require$getGlobalDispatcher(),
                processResponse (response) {
                    // 1.
                    if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject($06c7659fdfa31154$require$webidl.errors.exception({
                        header: "Cache.addAll",
                        message: "Received an invalid status code or the request failed."
                    }));
                    else if (response.headersList.contains("vary")) {
                        // 2.1
                        const fieldValues = $06c7659fdfa31154$require$getFieldValues(response.headersList.get("vary"));
                        // 2.2
                        for (const fieldValue of fieldValues)// 2.2.1
                        if (fieldValue === "*") {
                            responsePromise.reject($06c7659fdfa31154$require$webidl.errors.exception({
                                header: "Cache.addAll",
                                message: "invalid vary field value"
                            }));
                            for (const controller of fetchControllers)controller.abort();
                            return;
                        }
                    }
                },
                processResponseEndOfBody (response) {
                    // 1.
                    if (response.aborted) {
                        responsePromise.reject(new DOMException("aborted", "AbortError"));
                        return;
                    }
                    // 2.
                    responsePromise.resolve(response);
                }
            }));
            // 5.8
            responsePromises.push(responsePromise.promise);
        }
        // 6.
        const p = Promise.all(responsePromises);
        // 7.
        const responses = await p;
        // 7.1
        const operations = [];
        // 7.2
        let index = 0;
        // 7.3
        for (const response of responses){
            // 7.3.1
            /** @type {CacheBatchOperation} */ const operation = {
                type: "put",
                request: requestList[index],
                response: response // 7.3.4
            };
            operations.push(operation) // 7.3.5
            ;
            index++ // 7.3.6
            ;
        }
        // 7.5
        const cacheJobPromise = $06c7659fdfa31154$require$createDeferredPromise();
        // 7.6.1
        let errorData = null;
        // 7.6.2
        try {
            this.#batchCacheOperations(operations);
        } catch (e) {
            errorData = e;
        }
        // 7.6.3
        queueMicrotask(()=>{
            // 7.6.3.1
            if (errorData === null) cacheJobPromise.resolve(undefined);
            else // 7.6.3.2
            cacheJobPromise.reject(errorData);
        });
        // 7.7
        return cacheJobPromise.promise;
    }
    async put(request, response) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        $06c7659fdfa31154$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "Cache.put"
        });
        request = $06c7659fdfa31154$require$webidl.converters.RequestInfo(request);
        response = $06c7659fdfa31154$require$webidl.converters.Response(response);
        // 1.
        let innerRequest = null;
        // 2.
        if (request instanceof $06c7659fdfa31154$require$Request) innerRequest = request[$06c7659fdfa31154$require$kState];
        else innerRequest = new $06c7659fdfa31154$require$Request(request)[$06c7659fdfa31154$require$kState];
        // 4.
        if (!$06c7659fdfa31154$require$urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") throw $06c7659fdfa31154$require$webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
        });
        // 5.
        const innerResponse = response[$06c7659fdfa31154$require$kState];
        // 6.
        if (innerResponse.status === 206) throw $06c7659fdfa31154$require$webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
        });
        // 7.
        if (innerResponse.headersList.contains("vary")) {
            // 7.1.
            const fieldValues = $06c7659fdfa31154$require$getFieldValues(innerResponse.headersList.get("vary"));
            // 7.2.
            for (const fieldValue of fieldValues){
                // 7.2.1
                if (fieldValue === "*") throw $06c7659fdfa31154$require$webidl.errors.exception({
                    header: "Cache.put",
                    message: "Got * vary field value"
                });
            }
        }
        // 8.
        if (innerResponse.body && ($06c7659fdfa31154$require$isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw $06c7659fdfa31154$require$webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
        });
        // 9.
        const clonedResponse = $06c7659fdfa31154$require$cloneResponse(innerResponse);
        // 10.
        const bodyReadPromise = $06c7659fdfa31154$require$createDeferredPromise();
        // 11.
        if (innerResponse.body != null) {
            // 11.1
            const stream = innerResponse.body.stream;
            // 11.2
            const reader = stream.getReader();
            // 11.3
            $06c7659fdfa31154$require$readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else bodyReadPromise.resolve(undefined);
        // 12.
        /** @type {CacheBatchOperation[]} */ const operations = [];
        // 13.
        /** @type {CacheBatchOperation} */ const operation = {
            type: "put",
            request: innerRequest,
            response: clonedResponse // 16.
        };
        // 17.
        operations.push(operation);
        // 19.
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) clonedResponse.body.source = bytes;
        // 19.1
        const cacheJobPromise = $06c7659fdfa31154$require$createDeferredPromise();
        // 19.2.1
        let errorData = null;
        // 19.2.2
        try {
            this.#batchCacheOperations(operations);
        } catch (e) {
            errorData = e;
        }
        // 19.2.3
        queueMicrotask(()=>{
            // 19.2.3.1
            if (errorData === null) cacheJobPromise.resolve();
            else cacheJobPromise.reject(errorData);
        });
        return cacheJobPromise.promise;
    }
    async delete(request, options = {}) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        $06c7659fdfa31154$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.delete"
        });
        request = $06c7659fdfa31154$require$webidl.converters.RequestInfo(request);
        options = $06c7659fdfa31154$require$webidl.converters.CacheQueryOptions(options);
        /**
     * @type {Request}
     */ let r = null;
        if (request instanceof $06c7659fdfa31154$require$Request) {
            r = request[$06c7659fdfa31154$require$kState];
            if (r.method !== "GET" && !options.ignoreMethod) return false;
        } else {
            $3B1P3$assert(typeof request === "string");
            r = new $06c7659fdfa31154$require$Request(request)[$06c7659fdfa31154$require$kState];
        }
        /** @type {CacheBatchOperation[]} */ const operations = [];
        /** @type {CacheBatchOperation} */ const operation = {
            type: "delete",
            request: r,
            options: options
        };
        operations.push(operation);
        const cacheJobPromise = $06c7659fdfa31154$require$createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
            requestResponses = this.#batchCacheOperations(operations);
        } catch (e) {
            errorData = e;
        }
        queueMicrotask(()=>{
            if (errorData === null) cacheJobPromise.resolve(!!(requestResponses === null || requestResponses === void 0 ? void 0 : requestResponses.length));
            else cacheJobPromise.reject(errorData);
        });
        return cacheJobPromise.promise;
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
   * @param {any} request
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @returns {readonly Request[]}
   */ async keys(request, options = {}) {
        $06c7659fdfa31154$require$webidl.brandCheck(this, $06c7659fdfa31154$var$Cache);
        if (request !== undefined) request = $06c7659fdfa31154$require$webidl.converters.RequestInfo(request);
        options = $06c7659fdfa31154$require$webidl.converters.CacheQueryOptions(options);
        // 1.
        let r = null;
        // 2.
        if (request !== undefined) {
            // 2.1
            if (request instanceof $06c7659fdfa31154$require$Request) {
                // 2.1.1
                r = request[$06c7659fdfa31154$require$kState];
                // 2.1.2
                if (r.method !== "GET" && !options.ignoreMethod) return [];
            } else if (typeof request === "string") r = new $06c7659fdfa31154$require$Request(request)[$06c7659fdfa31154$require$kState];
        }
        // 4.
        const promise = $06c7659fdfa31154$require$createDeferredPromise();
        // 5.
        // 5.1
        const requests = [];
        // 5.2
        if (request === undefined) // 5.2.1
        for (const requestResponse of this.#relevantRequestResponseList)// 5.2.1.1
        requests.push(requestResponse[0]);
        else {
            // 5.3.1
            const requestResponses = this.#queryCache(r, options);
            // 5.3.2
            for (const requestResponse of requestResponses)// 5.3.2.1
            requests.push(requestResponse[0]);
        }
        // 5.4
        queueMicrotask(()=>{
            // 5.4.1
            const requestList = [];
            // 5.4.2
            for (const request of requests){
                const requestObject = new $06c7659fdfa31154$require$Request("https://a");
                requestObject[$06c7659fdfa31154$require$kState] = request;
                requestObject[$06c7659fdfa31154$require$kHeaders][$06c7659fdfa31154$require$kHeadersList] = request.headersList;
                requestObject[$06c7659fdfa31154$require$kHeaders][$06c7659fdfa31154$require$kGuard] = "immutable";
                requestObject[$06c7659fdfa31154$require$kRealm] = request.client;
                // 5.4.2.1
                requestList.push(requestObject);
            }
            // 5.4.3
            promise.resolve(Object.freeze(requestList));
        });
        return promise.promise;
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
   * @param {CacheBatchOperation[]} operations
   * @returns {requestResponseList}
   */ #batchCacheOperations(operations) {
        // 1.
        const cache = this.#relevantRequestResponseList;
        // 2.
        const backupCache = [
            ...cache
        ];
        // 3.
        const addedItems = [];
        // 4.1
        const resultList = [];
        try {
            // 4.2
            for (const operation of operations){
                // 4.2.1
                if (operation.type !== "delete" && operation.type !== "put") throw $06c7659fdfa31154$require$webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: 'operation type does not match "delete" or "put"'
                });
                // 4.2.2
                if (operation.type === "delete" && operation.response != null) throw $06c7659fdfa31154$require$webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: "delete operation should not have an associated response"
                });
                // 4.2.3
                if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
                // 4.2.4
                let requestResponses;
                // 4.2.5
                if (operation.type === "delete") {
                    // 4.2.5.1
                    requestResponses = this.#queryCache(operation.request, operation.options);
                    // TODO: the spec is wrong, this is needed to pass WPTs
                    if (requestResponses.length === 0) return [];
                    // 4.2.5.2
                    for (const requestResponse of requestResponses){
                        const idx = cache.indexOf(requestResponse);
                        $3B1P3$assert(idx !== -1);
                        // 4.2.5.2.1
                        cache.splice(idx, 1);
                    }
                } else if (operation.type === "put") {
                    // 4.2.6.1
                    if (operation.response == null) throw $06c7659fdfa31154$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "put operation should have an associated response"
                    });
                    // 4.2.6.2
                    const r = operation.request;
                    // 4.2.6.3
                    if (!$06c7659fdfa31154$require$urlIsHttpHttpsScheme(r.url)) throw $06c7659fdfa31154$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "expected http or https scheme"
                    });
                    // 4.2.6.4
                    if (r.method !== "GET") throw $06c7659fdfa31154$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "not get method"
                    });
                    // 4.2.6.5
                    if (operation.options != null) throw $06c7659fdfa31154$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "options must not be defined"
                    });
                    // 4.2.6.6
                    requestResponses = this.#queryCache(operation.request);
                    // 4.2.6.7
                    for (const requestResponse of requestResponses){
                        const idx = cache.indexOf(requestResponse);
                        $3B1P3$assert(idx !== -1);
                        // 4.2.6.7.1
                        cache.splice(idx, 1);
                    }
                    // 4.2.6.8
                    cache.push([
                        operation.request,
                        operation.response
                    ]);
                    // 4.2.6.10
                    addedItems.push([
                        operation.request,
                        operation.response
                    ]);
                }
                // 4.2.7
                resultList.push([
                    operation.request,
                    operation.response
                ]);
            }
            // 4.3
            return resultList;
        } catch (e) {
            // 5.1
            this.#relevantRequestResponseList.length = 0;
            // 5.2
            this.#relevantRequestResponseList = backupCache;
            // 5.3
            throw e;
        }
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#query-cache
   * @param {any} requestQuery
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @param {requestResponseList} targetStorage
   * @returns {requestResponseList}
   */ #queryCache(requestQuery, options, targetStorage) {
        /** @type {requestResponseList} */ const resultList = [];
        const storage = targetStorage !== null && targetStorage !== void 0 ? targetStorage : this.#relevantRequestResponseList;
        for (const requestResponse of storage){
            const [cachedRequest, cachedResponse] = requestResponse;
            if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
        }
        return resultList;
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
   * @param {any} requestQuery
   * @param {any} request
   * @param {any | null} response
   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
   * @returns {boolean}
   */ #requestMatchesCachedItem(requestQuery, request, response = null, options) {
        // if (options?.ignoreMethod === false && request.method === 'GET') {
        //   return false
        // }
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request.url);
        if (options === null || options === void 0 ? void 0 : options.ignoreSearch) {
            cachedURL.search = "";
            queryURL.search = "";
        }
        if (!$06c7659fdfa31154$require$urlEquals(queryURL, cachedURL, true)) return false;
        if (response == null || (options === null || options === void 0 ? void 0 : options.ignoreVary) || !response.headersList.contains("vary")) return true;
        const fieldValues = $06c7659fdfa31154$require$getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues){
            if (fieldValue === "*") return false;
            const requestValue = request.headersList.get(fieldValue);
            const queryValue = requestQuery.headersList.get(fieldValue);
            // If one has the header and the other doesn't, or one has
            // a different value than the other, return false
            if (requestValue !== queryValue) return false;
        }
        return true;
    }
}
Object.defineProperties($06c7659fdfa31154$var$Cache.prototype, {
    [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
    },
    match: $06c7659fdfa31154$require$kEnumerableProperty,
    matchAll: $06c7659fdfa31154$require$kEnumerableProperty,
    add: $06c7659fdfa31154$require$kEnumerableProperty,
    addAll: $06c7659fdfa31154$require$kEnumerableProperty,
    put: $06c7659fdfa31154$require$kEnumerableProperty,
    delete: $06c7659fdfa31154$require$kEnumerableProperty,
    keys: $06c7659fdfa31154$require$kEnumerableProperty
});
const $06c7659fdfa31154$var$cacheQueryOptionConverters = [
    {
        key: "ignoreSearch",
        converter: $06c7659fdfa31154$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "ignoreMethod",
        converter: $06c7659fdfa31154$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "ignoreVary",
        converter: $06c7659fdfa31154$require$webidl.converters.boolean,
        defaultValue: false
    }
];
$06c7659fdfa31154$require$webidl.converters.CacheQueryOptions = $06c7659fdfa31154$require$webidl.dictionaryConverter($06c7659fdfa31154$var$cacheQueryOptionConverters);
$06c7659fdfa31154$require$webidl.converters.MultiCacheQueryOptions = $06c7659fdfa31154$require$webidl.dictionaryConverter([
    ...$06c7659fdfa31154$var$cacheQueryOptionConverters,
    {
        key: "cacheName",
        converter: $06c7659fdfa31154$require$webidl.converters.DOMString
    }
]);
$06c7659fdfa31154$require$webidl.converters.Response = $06c7659fdfa31154$require$webidl.interfaceConverter($06c7659fdfa31154$require$Response);
$06c7659fdfa31154$require$webidl.converters["sequence<RequestInfo>"] = $06c7659fdfa31154$require$webidl.sequenceConverter($06c7659fdfa31154$require$webidl.converters.RequestInfo);
module.exports = {
    Cache: $06c7659fdfa31154$var$Cache
};

});
parcelRegister("4IF6n", function(module, exports) {
"use strict";


var $dGZhg = parcelRequire("dGZhg");
var $36fb2778df9c6ca0$require$URLSerializer = $dGZhg.URLSerializer;

var $f1lDT = parcelRequire("f1lDT");
var $36fb2778df9c6ca0$require$isValidHeaderName = $f1lDT.isValidHeaderName;
/**
 * @see https://url.spec.whatwg.org/#concept-url-equals
 * @param {URL} A
 * @param {URL} B
 * @param {boolean | undefined} excludeFragment
 * @returns {boolean}
 */ function $36fb2778df9c6ca0$var$urlEquals(A, B, excludeFragment = false) {
    const serializedA = $36fb2778df9c6ca0$require$URLSerializer(A, excludeFragment);
    const serializedB = $36fb2778df9c6ca0$require$URLSerializer(B, excludeFragment);
    return serializedA === serializedB;
}
/**
 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
 * @param {string} header
 */ function $36fb2778df9c6ca0$var$fieldValues(header) {
    $3B1P3$assert(header !== null);
    const values = [];
    for (let value of header.split(",")){
        value = value.trim();
        if (!value.length) continue;
        else if (!$36fb2778df9c6ca0$require$isValidHeaderName(value)) continue;
        values.push(value);
    }
    return values;
}
module.exports = {
    urlEquals: $36fb2778df9c6ca0$var$urlEquals,
    fieldValues: $36fb2778df9c6ca0$var$fieldValues
};

});



parcelRegister("67n0z", function(module, exports) {
"use strict";

var $hngkE = parcelRequire("hngkE");
var $47453e7c30013a95$require$parseSetCookie = $hngkE.parseSetCookie;

var $lTvYM = parcelRequire("lTvYM");
var $47453e7c30013a95$require$stringify = $lTvYM.stringify;
var $47453e7c30013a95$require$getHeadersList = $lTvYM.getHeadersList;

var $2BhCx = parcelRequire("2BhCx");
var $47453e7c30013a95$require$webidl = $2BhCx.webidl;

var $2qoFF = parcelRequire("2qoFF");
var $47453e7c30013a95$require$Headers = $2qoFF.Headers;
/**
 * @typedef {Object} Cookie
 * @property {string} name
 * @property {string} value
 * @property {Date|number|undefined} expires
 * @property {number|undefined} maxAge
 * @property {string|undefined} domain
 * @property {string|undefined} path
 * @property {boolean|undefined} secure
 * @property {boolean|undefined} httpOnly
 * @property {'Strict'|'Lax'|'None'} sameSite
 * @property {string[]} unparsed
 */ /**
 * @param {Headers} headers
 * @returns {Record<string, string>}
 */ function $47453e7c30013a95$var$getCookies(headers) {
    $47453e7c30013a95$require$webidl.argumentLengthCheck(arguments, 1, {
        header: "getCookies"
    });
    $47453e7c30013a95$require$webidl.brandCheck(headers, $47453e7c30013a95$require$Headers, {
        strict: false
    });
    const cookie = headers.get("cookie");
    const out = {};
    if (!cookie) return out;
    for (const piece of cookie.split(";")){
        const [name, ...value] = piece.split("=");
        out[name.trim()] = value.join("=");
    }
    return out;
}
/**
 * @param {Headers} headers
 * @param {string} name
 * @param {{ path?: string, domain?: string }|undefined} attributes
 * @returns {void}
 */ function $47453e7c30013a95$var$deleteCookie(headers, name, attributes) {
    $47453e7c30013a95$require$webidl.argumentLengthCheck(arguments, 2, {
        header: "deleteCookie"
    });
    $47453e7c30013a95$require$webidl.brandCheck(headers, $47453e7c30013a95$require$Headers, {
        strict: false
    });
    name = $47453e7c30013a95$require$webidl.converters.DOMString(name);
    attributes = $47453e7c30013a95$require$webidl.converters.DeleteCookieAttributes(attributes);
    // Matches behavior of
    // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
    $47453e7c30013a95$var$setCookie(headers, {
        name: name,
        value: "",
        expires: new Date(0),
        ...attributes
    });
}
/**
 * @param {Headers} headers
 * @returns {Cookie[]}
 */ function $47453e7c30013a95$var$getSetCookies(headers) {
    $47453e7c30013a95$require$webidl.argumentLengthCheck(arguments, 1, {
        header: "getSetCookies"
    });
    $47453e7c30013a95$require$webidl.brandCheck(headers, $47453e7c30013a95$require$Headers, {
        strict: false
    });
    const cookies = $47453e7c30013a95$require$getHeadersList(headers).cookies;
    if (!cookies) return [];
    // In older versions of undici, cookies is a list of name:value.
    return cookies.map((pair)=>$47453e7c30013a95$require$parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
}
/**
 * @param {Headers} headers
 * @param {Cookie} cookie
 * @returns {void}
 */ function $47453e7c30013a95$var$setCookie(headers, cookie) {
    $47453e7c30013a95$require$webidl.argumentLengthCheck(arguments, 2, {
        header: "setCookie"
    });
    $47453e7c30013a95$require$webidl.brandCheck(headers, $47453e7c30013a95$require$Headers, {
        strict: false
    });
    cookie = $47453e7c30013a95$require$webidl.converters.Cookie(cookie);
    const str = $47453e7c30013a95$require$stringify(cookie);
    if (str) headers.append("Set-Cookie", $47453e7c30013a95$require$stringify(cookie));
}
$47453e7c30013a95$require$webidl.converters.DeleteCookieAttributes = $47453e7c30013a95$require$webidl.dictionaryConverter([
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters.DOMString),
        key: "path",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
    }
]);
$47453e7c30013a95$require$webidl.converters.Cookie = $47453e7c30013a95$require$webidl.dictionaryConverter([
    {
        converter: $47453e7c30013a95$require$webidl.converters.DOMString,
        key: "name"
    },
    {
        converter: $47453e7c30013a95$require$webidl.converters.DOMString,
        key: "value"
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter((value)=>{
            if (typeof value === "number") return $47453e7c30013a95$require$webidl.converters["unsigned long long"](value);
            return new Date(value);
        }),
        key: "expires",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters.DOMString),
        key: "path",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters.boolean),
        key: "secure",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.nullableConverter($47453e7c30013a95$require$webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
    },
    {
        converter: $47453e7c30013a95$require$webidl.converters.USVString,
        key: "sameSite",
        allowedValues: [
            "Strict",
            "Lax",
            "None"
        ]
    },
    {
        converter: $47453e7c30013a95$require$webidl.sequenceConverter($47453e7c30013a95$require$webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
    }
]);
module.exports = {
    getCookies: $47453e7c30013a95$var$getCookies,
    deleteCookie: $47453e7c30013a95$var$deleteCookie,
    getSetCookies: $47453e7c30013a95$var$getSetCookies,
    setCookie: $47453e7c30013a95$var$setCookie
};

});
parcelRegister("hngkE", function(module, exports) {
"use strict";

var $6Vx6q = parcelRequire("6Vx6q");
var $ca6140e00aa91845$require$maxNameValuePairSize = $6Vx6q.maxNameValuePairSize;
var $ca6140e00aa91845$require$maxAttributeValueSize = $6Vx6q.maxAttributeValueSize;

var $lTvYM = parcelRequire("lTvYM");
var $ca6140e00aa91845$require$isCTLExcludingHtab = $lTvYM.isCTLExcludingHtab;

var $dGZhg = parcelRequire("dGZhg");
var $ca6140e00aa91845$require$collectASequenceOfCodePointsFast = $dGZhg.collectASequenceOfCodePointsFast;

/**
 * @description Parses the field-value attributes of a set-cookie header string.
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} header
 * @returns if the header is invalid, null will be returned
 */ function $ca6140e00aa91845$var$parseSetCookie(header) {
    // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
    //    character (CTL characters excluding HTAB): Abort these steps and
    //    ignore the set-cookie-string entirely.
    if ($ca6140e00aa91845$require$isCTLExcludingHtab(header)) return null;
    let nameValuePair = "";
    let unparsedAttributes = "";
    let name = "";
    let value = "";
    // 2. If the set-cookie-string contains a %x3B (";") character:
    if (header.includes(";")) {
        // 1. The name-value-pair string consists of the characters up to,
        //    but not including, the first %x3B (";"), and the unparsed-
        //    attributes consist of the remainder of the set-cookie-string
        //    (including the %x3B (";") in question).
        const position = {
            position: 0
        };
        nameValuePair = $ca6140e00aa91845$require$collectASequenceOfCodePointsFast(";", header, position);
        unparsedAttributes = header.slice(position.position);
    } else // Otherwise:
    // 1. The name-value-pair string consists of all the characters
    //    contained in the set-cookie-string, and the unparsed-
    //    attributes is the empty string.
    nameValuePair = header;
    // 3. If the name-value-pair string lacks a %x3D ("=") character, then
    //    the name string is empty, and the value string is the value of
    //    name-value-pair.
    if (!nameValuePair.includes("=")) value = nameValuePair;
    else {
        //    Otherwise, the name string consists of the characters up to, but
        //    not including, the first %x3D ("=") character, and the (possibly
        //    empty) value string consists of the characters after the first
        //    %x3D ("=") character.
        const position = {
            position: 0
        };
        name = $ca6140e00aa91845$require$collectASequenceOfCodePointsFast("=", nameValuePair, position);
        value = nameValuePair.slice(position.position + 1);
    }
    // 4. Remove any leading or trailing WSP characters from the name
    //    string and the value string.
    name = name.trim();
    value = value.trim();
    // 5. If the sum of the lengths of the name string and the value string
    //    is more than 4096 octets, abort these steps and ignore the set-
    //    cookie-string entirely.
    if (name.length + value.length > $ca6140e00aa91845$require$maxNameValuePairSize) return null;
    // 6. The cookie-name is the name string, and the cookie-value is the
    //    value string.
    return {
        name: name,
        value: value,
        ...$ca6140e00aa91845$var$parseUnparsedAttributes(unparsedAttributes)
    };
}
/**
 * Parses the remaining attributes of a set-cookie header
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} unparsedAttributes
 * @param {[Object.<string, unknown>]={}} cookieAttributeList
 */ function $ca6140e00aa91845$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
    // 1. If the unparsed-attributes string is empty, skip the rest of
    //    these steps.
    if (unparsedAttributes.length === 0) return cookieAttributeList;
    // 2. Discard the first character of the unparsed-attributes (which
    //    will be a %x3B (";") character).
    $3B1P3$assert(unparsedAttributes[0] === ";");
    unparsedAttributes = unparsedAttributes.slice(1);
    let cookieAv = "";
    // 3. If the remaining unparsed-attributes contains a %x3B (";")
    //    character:
    if (unparsedAttributes.includes(";")) {
        // 1. Consume the characters of the unparsed-attributes up to, but
        //    not including, the first %x3B (";") character.
        cookieAv = $ca6140e00aa91845$require$collectASequenceOfCodePointsFast(";", unparsedAttributes, {
            position: 0
        });
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
    } else {
        // Otherwise:
        // 1. Consume the remainder of the unparsed-attributes.
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
    }
    // Let the cookie-av string be the characters consumed in this step.
    let attributeName = "";
    let attributeValue = "";
    // 4. If the cookie-av string contains a %x3D ("=") character:
    if (cookieAv.includes("=")) {
        // 1. The (possibly empty) attribute-name string consists of the
        //    characters up to, but not including, the first %x3D ("=")
        //    character, and the (possibly empty) attribute-value string
        //    consists of the characters after the first %x3D ("=")
        //    character.
        const position = {
            position: 0
        };
        attributeName = $ca6140e00aa91845$require$collectASequenceOfCodePointsFast("=", cookieAv, position);
        attributeValue = cookieAv.slice(position.position + 1);
    } else // Otherwise:
    // 1. The attribute-name string consists of the entire cookie-av
    //    string, and the attribute-value string is empty.
    attributeName = cookieAv;
    // 5. Remove any leading or trailing WSP characters from the attribute-
    //    name string and the attribute-value string.
    attributeName = attributeName.trim();
    attributeValue = attributeValue.trim();
    // 6. If the attribute-value is longer than 1024 octets, ignore the
    //    cookie-av string and return to Step 1 of this algorithm.
    if (attributeValue.length > $ca6140e00aa91845$require$maxAttributeValueSize) return $ca6140e00aa91845$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    // 7. Process the attribute-name and attribute-value according to the
    //    requirements in the following subsections.  (Notice that
    //    attributes with unrecognized attribute-names are ignored.)
    const attributeNameLowercase = attributeName.toLowerCase();
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
    // If the attribute-name case-insensitively matches the string
    // "Expires", the user agent MUST process the cookie-av as follows.
    if (attributeNameLowercase === "expires") {
        // 1. Let the expiry-time be the result of parsing the attribute-value
        //    as cookie-date (see Section 5.1.1).
        const expiryTime = new Date(attributeValue);
        // 2. If the attribute-value failed to parse as a cookie date, ignore
        //    the cookie-av.
        cookieAttributeList.expires = expiryTime;
    } else if (attributeNameLowercase === "max-age") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
        // If the attribute-name case-insensitively matches the string "Max-
        // Age", the user agent MUST process the cookie-av as follows.
        // 1. If the first character of the attribute-value is not a DIGIT or a
        //    "-" character, ignore the cookie-av.
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return $ca6140e00aa91845$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        // 2. If the remainder of attribute-value contains a non-DIGIT
        //    character, ignore the cookie-av.
        if (!/^\d+$/.test(attributeValue)) return $ca6140e00aa91845$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        // 3. Let delta-seconds be the attribute-value converted to an integer.
        const deltaSeconds = Number(attributeValue);
        // 4. Let cookie-age-limit be the maximum age of the cookie (which
        //    SHOULD be 400 days or less, see Section 4.1.2.2).
        // 5. Set delta-seconds to the smaller of its present value and cookie-
        //    age-limit.
        // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)
        // 6. If delta-seconds is less than or equal to zero (0), let expiry-
        //    time be the earliest representable date and time.  Otherwise, let
        //    the expiry-time be the current date and time plus delta-seconds
        //    seconds.
        // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds
        // 7. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Max-Age and an attribute-value of expiry-time.
        cookieAttributeList.maxAge = deltaSeconds;
    } else if (attributeNameLowercase === "domain") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
        // If the attribute-name case-insensitively matches the string "Domain",
        // the user agent MUST process the cookie-av as follows.
        // 1. Let cookie-domain be the attribute-value.
        let cookieDomain = attributeValue;
        // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
        //    cookie-domain without its leading %x2E (".").
        if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
        // 3. Convert the cookie-domain to lower case.
        cookieDomain = cookieDomain.toLowerCase();
        // 4. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Domain and an attribute-value of cookie-domain.
        cookieAttributeList.domain = cookieDomain;
    } else if (attributeNameLowercase === "path") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
        // If the attribute-name case-insensitively matches the string "Path",
        // the user agent MUST process the cookie-av as follows.
        // 1. If the attribute-value is empty or if the first character of the
        //    attribute-value is not %x2F ("/"):
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") // 1. Let cookie-path be the default-path.
        cookiePath = "/";
        else // Otherwise:
        // 1. Let cookie-path be the attribute-value.
        cookiePath = attributeValue;
        // 2. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Path and an attribute-value of cookie-path.
        cookieAttributeList.path = cookiePath;
    } else if (attributeNameLowercase === "secure") // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
    // If the attribute-name case-insensitively matches the string "Secure",
    // the user agent MUST append an attribute to the cookie-attribute-list
    // with an attribute-name of Secure and an empty attribute-value.
    cookieAttributeList.secure = true;
    else if (attributeNameLowercase === "httponly") // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
    // If the attribute-name case-insensitively matches the string
    // "HttpOnly", the user agent MUST append an attribute to the cookie-
    // attribute-list with an attribute-name of HttpOnly and an empty
    // attribute-value.
    cookieAttributeList.httpOnly = true;
    else if (attributeNameLowercase === "samesite") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
        // If the attribute-name case-insensitively matches the string
        // "SameSite", the user agent MUST process the cookie-av as follows:
        // 1. Let enforcement be "Default".
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        // 2. If cookie-av's attribute-value is a case-insensitive match for
        //    "None", set enforcement to "None".
        if (attributeValueLowercase.includes("none")) enforcement = "None";
        // 3. If cookie-av's attribute-value is a case-insensitive match for
        //    "Strict", set enforcement to "Strict".
        if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
        // 4. If cookie-av's attribute-value is a case-insensitive match for
        //    "Lax", set enforcement to "Lax".
        if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
        // 5. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of "SameSite" and an attribute-value of
        //    enforcement.
        cookieAttributeList.sameSite = enforcement;
    } else {
        var _cookieAttributeList;
        var _unparsed;
        (_unparsed = (_cookieAttributeList = cookieAttributeList).unparsed) !== null && _unparsed !== void 0 ? _unparsed : _cookieAttributeList.unparsed = [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    }
    // 8. Return to Step 1 of this algorithm.
    return $ca6140e00aa91845$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
}
module.exports = {
    parseSetCookie: $ca6140e00aa91845$var$parseSetCookie,
    parseUnparsedAttributes: $ca6140e00aa91845$var$parseUnparsedAttributes
};

});
parcelRegister("6Vx6q", function(module, exports) {
"use strict";
// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
const $50b1be73c4728208$var$maxAttributeValueSize = 1024;
// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
const $50b1be73c4728208$var$maxNameValuePairSize = 4096;
module.exports = {
    maxAttributeValueSize: $50b1be73c4728208$var$maxAttributeValueSize,
    maxNameValuePairSize: $50b1be73c4728208$var$maxNameValuePairSize
};

});

parcelRegister("lTvYM", function(module, exports) {
"use strict";


var $lbv7W = parcelRequire("lbv7W");
var $ff078a77252000d0$require$kHeadersList = $lbv7W.kHeadersList;
function $ff078a77252000d0$var$isCTLExcludingHtab(value) {
    if (value.length === 0) return false;
    for (const char of value){
        const code = char.charCodeAt(0);
        if (code >= 0x00 || code <= 0x08 || code >= 0x0A || code <= 0x1F || code === 0x7F) return false;
    }
}
/**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */ function $ff078a77252000d0$var$validateCookieName(name) {
    for (const char of name){
        const code = char.charCodeAt(0);
        if (code <= 0x20 || code > 0x7F || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") throw new Error("Invalid cookie name");
    }
}
/**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */ function $ff078a77252000d0$var$validateCookieValue(value) {
    for (const char of value){
        const code = char.charCodeAt(0);
        if (code < 0x21 || // exclude CTLs (0-31)
        code === 0x22 || code === 0x2C || code === 0x3B || code === 0x5C || code > 0x7E // non-ascii
        ) throw new Error("Invalid header value");
    }
}
/**
 * path-value        = <any CHAR except CTLs or ";">
 * @param {string} path
 */ function $ff078a77252000d0$var$validateCookiePath(path) {
    for (const char of path){
        const code = char.charCodeAt(0);
        if (code < 0x21 || char === ";") throw new Error("Invalid cookie path");
    }
}
/**
 * I have no idea why these values aren't allowed to be honest,
 * but Deno tests these. - Khafra
 * @param {string} domain
 */ function $ff078a77252000d0$var$validateCookieDomain(domain) {
    if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
}
/**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */ function $ff078a77252000d0$var$toIMFDate(date) {
    if (typeof date === "number") date = new Date(date);
    const days = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ];
    const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ];
    const dayName = days[date.getUTCDay()];
    const day = date.getUTCDate().toString().padStart(2, "0");
    const month = months[date.getUTCMonth()];
    const year = date.getUTCFullYear();
    const hour = date.getUTCHours().toString().padStart(2, "0");
    const minute = date.getUTCMinutes().toString().padStart(2, "0");
    const second = date.getUTCSeconds().toString().padStart(2, "0");
    return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
}
/**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */ function $ff078a77252000d0$var$validateCookieMaxAge(maxAge) {
    if (maxAge < 0) throw new Error("Invalid cookie max-age");
}
/**
 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
 * @param {import('./index').Cookie} cookie
 */ function $ff078a77252000d0$var$stringify(cookie) {
    if (cookie.name.length === 0) return null;
    $ff078a77252000d0$var$validateCookieName(cookie.name);
    $ff078a77252000d0$var$validateCookieValue(cookie.value);
    const out = [
        `${cookie.name}=${cookie.value}`
    ];
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
    if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
    if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
    }
    if (cookie.secure) out.push("Secure");
    if (cookie.httpOnly) out.push("HttpOnly");
    if (typeof cookie.maxAge === "number") {
        $ff078a77252000d0$var$validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
    }
    if (cookie.domain) {
        $ff078a77252000d0$var$validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
    }
    if (cookie.path) {
        $ff078a77252000d0$var$validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
    }
    if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${$ff078a77252000d0$var$toIMFDate(cookie.expires)}`);
    if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
    for (const part of cookie.unparsed){
        if (!part.includes("=")) throw new Error("Invalid unparsed");
        const [key, ...value] = part.split("=");
        out.push(`${key.trim()}=${value.join("=")}`);
    }
    return out.join("; ");
}
let $ff078a77252000d0$var$kHeadersListNode;
function $ff078a77252000d0$var$getHeadersList(headers) {
    if (headers[$ff078a77252000d0$require$kHeadersList]) return headers[$ff078a77252000d0$require$kHeadersList];
    if (!$ff078a77252000d0$var$kHeadersListNode) {
        $ff078a77252000d0$var$kHeadersListNode = Object.getOwnPropertySymbols(headers).find((symbol)=>symbol.description === "headers list");
        $3B1P3$assert($ff078a77252000d0$var$kHeadersListNode, "Headers cannot be parsed");
    }
    const headersList = headers[$ff078a77252000d0$var$kHeadersListNode];
    $3B1P3$assert(headersList);
    return headersList;
}
module.exports = {
    isCTLExcludingHtab: $ff078a77252000d0$var$isCTLExcludingHtab,
    stringify: $ff078a77252000d0$var$stringify,
    getHeadersList: $ff078a77252000d0$var$getHeadersList
};

});



parcelRegister("itmCD", function(module, exports) {
"use strict";

var $2BhCx = parcelRequire("2BhCx");
var $d72c7bb97ec016e1$require$webidl = $2BhCx.webidl;

var $leEOP = parcelRequire("leEOP");
var $d72c7bb97ec016e1$require$DOMException = $leEOP.DOMException;

var $dGZhg = parcelRequire("dGZhg");
var $d72c7bb97ec016e1$require$URLSerializer = $dGZhg.URLSerializer;

var $kQbLp = parcelRequire("kQbLp");
var $d72c7bb97ec016e1$require$getGlobalOrigin = $kQbLp.getGlobalOrigin;

var $5ER3c = parcelRequire("5ER3c");
var $d72c7bb97ec016e1$require$staticPropertyDescriptors = $5ER3c.staticPropertyDescriptors;
var $d72c7bb97ec016e1$require$states = $5ER3c.states;
var $d72c7bb97ec016e1$require$opcodes = $5ER3c.opcodes;
var $d72c7bb97ec016e1$require$emptyBuffer = $5ER3c.emptyBuffer;

var $dtsni = parcelRequire("dtsni");
var $d72c7bb97ec016e1$require$kWebSocketURL = $dtsni.kWebSocketURL;
var $d72c7bb97ec016e1$require$kReadyState = $dtsni.kReadyState;
var $d72c7bb97ec016e1$require$kController = $dtsni.kController;
var $d72c7bb97ec016e1$require$kBinaryType = $dtsni.kBinaryType;
var $d72c7bb97ec016e1$require$kResponse = $dtsni.kResponse;
var $d72c7bb97ec016e1$require$kSentClose = $dtsni.kSentClose;
var $d72c7bb97ec016e1$require$kByteParser = $dtsni.kByteParser;

var $8xEEY = parcelRequire("8xEEY");
var $d72c7bb97ec016e1$require$isEstablished = $8xEEY.isEstablished;
var $d72c7bb97ec016e1$require$isClosing = $8xEEY.isClosing;
var $d72c7bb97ec016e1$require$isValidSubprotocol = $8xEEY.isValidSubprotocol;
var $d72c7bb97ec016e1$require$failWebsocketConnection = $8xEEY.failWebsocketConnection;
var $d72c7bb97ec016e1$require$fireEvent = $8xEEY.fireEvent;

var $aTS5B = parcelRequire("aTS5B");
var $d72c7bb97ec016e1$require$establishWebSocketConnection = $aTS5B.establishWebSocketConnection;

var $6aj6Z = parcelRequire("6aj6Z");
var $d72c7bb97ec016e1$require$WebsocketFrameSend = $6aj6Z.WebsocketFrameSend;

var $hCUXp = parcelRequire("hCUXp");
var $d72c7bb97ec016e1$require$ByteParser = $hCUXp.ByteParser;

var $3zyxC = parcelRequire("3zyxC");
var $d72c7bb97ec016e1$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;
var $d72c7bb97ec016e1$require$isBlobLike = $3zyxC.isBlobLike;

var $iOd5O = parcelRequire("iOd5O");
var $d72c7bb97ec016e1$require$getGlobalDispatcher = $iOd5O.getGlobalDispatcher;

var $d72c7bb97ec016e1$require$types = $3B1P3$util.types;
let $d72c7bb97ec016e1$var$experimentalWarned = false;
// https://websockets.spec.whatwg.org/#interface-definition
class $d72c7bb97ec016e1$var$WebSocket extends EventTarget {
    #events = {
        open: null,
        error: null,
        close: null,
        message: null
    };
    #bufferedAmount = 0;
    #protocol = "";
    #extensions = "";
    /**
   * @param {string} url
   * @param {string|string[]} protocols
   */ constructor(url, protocols = []){
        super();
        $d72c7bb97ec016e1$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "WebSocket constructor"
        });
        if (!$d72c7bb97ec016e1$var$experimentalWarned) {
            $d72c7bb97ec016e1$var$experimentalWarned = true;
            process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
                code: "UNDICI-WS"
            });
        }
        const options = $d72c7bb97ec016e1$require$webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url = $d72c7bb97ec016e1$require$webidl.converters.USVString(url);
        protocols = options.protocols;
        // 1. Let baseURL be this's relevant settings object's API base URL.
        const baseURL = $d72c7bb97ec016e1$require$getGlobalOrigin();
        // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
        let urlRecord;
        try {
            urlRecord = new URL(url, baseURL);
        } catch (e) {
            // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
            throw new $d72c7bb97ec016e1$require$DOMException(e, "SyntaxError");
        }
        // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
        if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
        else if (urlRecord.protocol === "https:") // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
        urlRecord.protocol = "wss:";
        // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new $d72c7bb97ec016e1$require$DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
        // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
        //    DOMException.
        if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new $d72c7bb97ec016e1$require$DOMException("Got fragment", "SyntaxError");
        // 8. If protocols is a string, set protocols to a sequence consisting
        //    of just that string.
        if (typeof protocols === "string") protocols = [
            protocols
        ];
        // 9. If any of the values in protocols occur more than once or otherwise
        //    fail to match the requirements for elements that comprise the value
        //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
        //    protocol, then throw a "SyntaxError" DOMException.
        if (protocols.length !== new Set(protocols.map((p)=>p.toLowerCase())).size) throw new $d72c7bb97ec016e1$require$DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        if (protocols.length > 0 && !protocols.every((p)=>$d72c7bb97ec016e1$require$isValidSubprotocol(p))) throw new $d72c7bb97ec016e1$require$DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        // 10. Set this's url to urlRecord.
        this[$d72c7bb97ec016e1$require$kWebSocketURL] = new URL(urlRecord.href);
        // 11. Let client be this's relevant settings object.
        // 12. Run this step in parallel:
        //    1. Establish a WebSocket connection given urlRecord, protocols,
        //       and client.
        this[$d72c7bb97ec016e1$require$kController] = $d72c7bb97ec016e1$require$establishWebSocketConnection(urlRecord, protocols, this, (response)=>this.#onConnectionEstablished(response), options);
        // Each WebSocket object has an associated ready state, which is a
        // number representing the state of the connection. Initially it must
        // be CONNECTING (0).
        this[$d72c7bb97ec016e1$require$kReadyState] = $d72c7bb97ec016e1$var$WebSocket.CONNECTING;
        // The extensions attribute must initially return the empty string.
        // The protocol attribute must initially return the empty string.
        // Each WebSocket object has an associated binary type, which is a
        // BinaryType. Initially it must be "blob".
        this[$d72c7bb97ec016e1$require$kBinaryType] = "blob";
    }
    /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
   * @param {number|undefined} code
   * @param {string|undefined} reason
   */ close(code, reason) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        if (code !== undefined) code = $d72c7bb97ec016e1$require$webidl.converters["unsigned short"](code, {
            clamp: true
        });
        if (reason !== undefined) reason = $d72c7bb97ec016e1$require$webidl.converters.USVString(reason);
        // 1. If code is present, but is neither an integer equal to 1000 nor an
        //    integer in the range 3000 to 4999, inclusive, throw an
        //    "InvalidAccessError" DOMException.
        if (code !== undefined) {
            if (code !== 1000 && (code < 3000 || code > 4999)) throw new $d72c7bb97ec016e1$require$DOMException("invalid code", "InvalidAccessError");
        }
        let reasonByteLength = 0;
        // 2. If reason is present, then run these substeps:
        if (reason !== undefined) {
            // 1. Let reasonBytes be the result of encoding reason.
            // 2. If reasonBytes is longer than 123 bytes, then throw a
            //    "SyntaxError" DOMException.
            reasonByteLength = Buffer.byteLength(reason);
            if (reasonByteLength > 123) throw new $d72c7bb97ec016e1$require$DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
        }
        // 3. Run the first matching steps from the following list:
        if (this[$d72c7bb97ec016e1$require$kReadyState] === $d72c7bb97ec016e1$var$WebSocket.CLOSING || this[$d72c7bb97ec016e1$require$kReadyState] === $d72c7bb97ec016e1$var$WebSocket.CLOSED) ;
        else if (!$d72c7bb97ec016e1$require$isEstablished(this)) {
            // If the WebSocket connection is not yet established
            // Fail the WebSocket connection and set this's ready state
            // to CLOSING (2).
            $d72c7bb97ec016e1$require$failWebsocketConnection(this, "Connection was closed before it was established.");
            this[$d72c7bb97ec016e1$require$kReadyState] = $d72c7bb97ec016e1$var$WebSocket.CLOSING;
        } else if (!$d72c7bb97ec016e1$require$isClosing(this)) {
            // If the WebSocket closing handshake has not yet been started
            // Start the WebSocket closing handshake and set this's ready
            // state to CLOSING (2).
            // - If neither code nor reason is present, the WebSocket Close
            //   message must not have a body.
            // - If code is present, then the status code to use in the
            //   WebSocket Close message must be the integer given by code.
            // - If reason is also present, then reasonBytes must be
            //   provided in the Close message after the status code.
            const frame = new $d72c7bb97ec016e1$require$WebsocketFrameSend();
            // If neither code nor reason is present, the WebSocket Close
            // message must not have a body.
            // If code is present, then the status code to use in the
            // WebSocket Close message must be the integer given by code.
            if (code !== undefined && reason === undefined) {
                frame.frameData = Buffer.allocUnsafe(2);
                frame.frameData.writeUInt16BE(code, 0);
            } else if (code !== undefined && reason !== undefined) {
                // If reason is also present, then reasonBytes must be
                // provided in the Close message after the status code.
                frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
                frame.frameData.writeUInt16BE(code, 0);
                // the body MAY contain UTF-8-encoded data with value /reason/
                frame.frameData.write(reason, 2, "utf-8");
            } else frame.frameData = $d72c7bb97ec016e1$require$emptyBuffer;
            /** @type {import('stream').Duplex} */ const socket = this[$d72c7bb97ec016e1$require$kResponse].socket;
            socket.write(frame.createFrame($d72c7bb97ec016e1$require$opcodes.CLOSE), (err)=>{
                if (!err) this[$d72c7bb97ec016e1$require$kSentClose] = true;
            });
            // Upon either sending or receiving a Close control frame, it is said
            // that _The WebSocket Closing Handshake is Started_ and that the
            // WebSocket connection is in the CLOSING state.
            this[$d72c7bb97ec016e1$require$kReadyState] = $d72c7bb97ec016e1$require$states.CLOSING;
        } else // Otherwise
        // Set this's ready state to CLOSING (2).
        this[$d72c7bb97ec016e1$require$kReadyState] = $d72c7bb97ec016e1$var$WebSocket.CLOSING;
    }
    /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
   */ send(data) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        $d72c7bb97ec016e1$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "WebSocket.send"
        });
        data = $d72c7bb97ec016e1$require$webidl.converters.WebSocketSendData(data);
        // 1. If this's ready state is CONNECTING, then throw an
        //    "InvalidStateError" DOMException.
        if (this[$d72c7bb97ec016e1$require$kReadyState] === $d72c7bb97ec016e1$var$WebSocket.CONNECTING) throw new $d72c7bb97ec016e1$require$DOMException("Sent before connected.", "InvalidStateError");
        // 2. Run the appropriate set of steps from the following list:
        // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
        // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2
        if (!$d72c7bb97ec016e1$require$isEstablished(this) || $d72c7bb97ec016e1$require$isClosing(this)) return;
        /** @type {import('stream').Duplex} */ const socket = this[$d72c7bb97ec016e1$require$kResponse].socket;
        // If data is a string
        if (typeof data === "string") {
            // If the WebSocket connection is established and the WebSocket
            // closing handshake has not yet started, then the user agent
            // must send a WebSocket Message comprised of the data argument
            // using a text frame opcode; if the data cannot be sent, e.g.
            // because it would need to be buffered but the buffer is full,
            // the user agent must flag the WebSocket as full and then close
            // the WebSocket connection. Any invocation of this method with a
            // string argument that does not throw an exception must increase
            // the bufferedAmount attribute by the number of bytes needed to
            // express the argument as UTF-8.
            const value = Buffer.from(data);
            const frame = new $d72c7bb97ec016e1$require$WebsocketFrameSend(value);
            const buffer = frame.createFrame($d72c7bb97ec016e1$require$opcodes.TEXT);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, ()=>{
                this.#bufferedAmount -= value.byteLength;
            });
        } else if ($d72c7bb97ec016e1$require$types.isArrayBuffer(data)) {
            // If the WebSocket connection is established, and the WebSocket
            // closing handshake has not yet started, then the user agent must
            // send a WebSocket Message comprised of data using a binary frame
            // opcode; if the data cannot be sent, e.g. because it would need
            // to be buffered but the buffer is full, the user agent must flag
            // the WebSocket as full and then close the WebSocket connection.
            // The data to be sent is the data stored in the buffer described
            // by the ArrayBuffer object. Any invocation of this method with an
            // ArrayBuffer argument that does not throw an exception must
            // increase the bufferedAmount attribute by the length of the
            // ArrayBuffer in bytes.
            const value = Buffer.from(data);
            const frame = new $d72c7bb97ec016e1$require$WebsocketFrameSend(value);
            const buffer = frame.createFrame($d72c7bb97ec016e1$require$opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, ()=>{
                this.#bufferedAmount -= value.byteLength;
            });
        } else if (ArrayBuffer.isView(data)) {
            // If the WebSocket connection is established, and the WebSocket
            // closing handshake has not yet started, then the user agent must
            // send a WebSocket Message comprised of data using a binary frame
            // opcode; if the data cannot be sent, e.g. because it would need to
            // be buffered but the buffer is full, the user agent must flag the
            // WebSocket as full and then close the WebSocket connection. The
            // data to be sent is the data stored in the section of the buffer
            // described by the ArrayBuffer object that data references. Any
            // invocation of this method with this kind of argument that does
            // not throw an exception must increase the bufferedAmount attribute
            // by the length of data’s buffer in bytes.
            const ab = Buffer.from(data, data.byteOffset, data.byteLength);
            const frame = new $d72c7bb97ec016e1$require$WebsocketFrameSend(ab);
            const buffer = frame.createFrame($d72c7bb97ec016e1$require$opcodes.BINARY);
            this.#bufferedAmount += ab.byteLength;
            socket.write(buffer, ()=>{
                this.#bufferedAmount -= ab.byteLength;
            });
        } else if ($d72c7bb97ec016e1$require$isBlobLike(data)) {
            // If the WebSocket connection is established, and the WebSocket
            // closing handshake has not yet started, then the user agent must
            // send a WebSocket Message comprised of data using a binary frame
            // opcode; if the data cannot be sent, e.g. because it would need to
            // be buffered but the buffer is full, the user agent must flag the
            // WebSocket as full and then close the WebSocket connection. The data
            // to be sent is the raw data represented by the Blob object. Any
            // invocation of this method with a Blob argument that does not throw
            // an exception must increase the bufferedAmount attribute by the size
            // of the Blob object’s raw data, in bytes.
            const frame = new $d72c7bb97ec016e1$require$WebsocketFrameSend();
            data.arrayBuffer().then((ab)=>{
                const value = Buffer.from(ab);
                frame.frameData = value;
                const buffer = frame.createFrame($d72c7bb97ec016e1$require$opcodes.BINARY);
                this.#bufferedAmount += value.byteLength;
                socket.write(buffer, ()=>{
                    this.#bufferedAmount -= value.byteLength;
                });
            });
        }
    }
    get readyState() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        // The readyState getter steps are to return this's ready state.
        return this[$d72c7bb97ec016e1$require$kReadyState];
    }
    get bufferedAmount() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#bufferedAmount;
    }
    get url() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        // The url getter steps are to return this's url, serialized.
        return $d72c7bb97ec016e1$require$URLSerializer(this[$d72c7bb97ec016e1$require$kWebSocketURL]);
    }
    get extensions() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#extensions;
    }
    get protocol() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#protocol;
    }
    get onopen() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#events.open;
    }
    set onopen(fn) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        if (this.#events.open) this.removeEventListener("open", this.#events.open);
        if (typeof fn === "function") {
            this.#events.open = fn;
            this.addEventListener("open", fn);
        } else this.#events.open = null;
    }
    get onerror() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#events.error;
    }
    set onerror(fn) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        if (this.#events.error) this.removeEventListener("error", this.#events.error);
        if (typeof fn === "function") {
            this.#events.error = fn;
            this.addEventListener("error", fn);
        } else this.#events.error = null;
    }
    get onclose() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#events.close;
    }
    set onclose(fn) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        if (this.#events.close) this.removeEventListener("close", this.#events.close);
        if (typeof fn === "function") {
            this.#events.close = fn;
            this.addEventListener("close", fn);
        } else this.#events.close = null;
    }
    get onmessage() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this.#events.message;
    }
    set onmessage(fn) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        if (this.#events.message) this.removeEventListener("message", this.#events.message);
        if (typeof fn === "function") {
            this.#events.message = fn;
            this.addEventListener("message", fn);
        } else this.#events.message = null;
    }
    get binaryType() {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        return this[$d72c7bb97ec016e1$require$kBinaryType];
    }
    set binaryType(type) {
        $d72c7bb97ec016e1$require$webidl.brandCheck(this, $d72c7bb97ec016e1$var$WebSocket);
        if (type !== "blob" && type !== "arraybuffer") this[$d72c7bb97ec016e1$require$kBinaryType] = "blob";
        else this[$d72c7bb97ec016e1$require$kBinaryType] = type;
    }
    /**
   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
   */ #onConnectionEstablished(response) {
        // processResponse is called when the "response’s header list has been received and initialized."
        // once this happens, the connection is open
        this[$d72c7bb97ec016e1$require$kResponse] = response;
        const parser = new $d72c7bb97ec016e1$require$ByteParser(this);
        parser.on("drain", function onParserDrain() {
            this.ws[$d72c7bb97ec016e1$require$kResponse].socket.resume();
        });
        response.socket.ws = this;
        this[$d72c7bb97ec016e1$require$kByteParser] = parser;
        // 1. Change the ready state to OPEN (1).
        this[$d72c7bb97ec016e1$require$kReadyState] = $d72c7bb97ec016e1$require$states.OPEN;
        // 2. Change the extensions attribute’s value to the extensions in use, if
        //    it is not the null value.
        // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) this.#extensions = extensions;
        // 3. Change the protocol attribute’s value to the subprotocol in use, if
        //    it is not the null value.
        // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) this.#protocol = protocol;
        // 4. Fire an event named open at the WebSocket object.
        $d72c7bb97ec016e1$require$fireEvent("open", this);
    }
}
// https://websockets.spec.whatwg.org/#dom-websocket-connecting
$d72c7bb97ec016e1$var$WebSocket.CONNECTING = $d72c7bb97ec016e1$var$WebSocket.prototype.CONNECTING = $d72c7bb97ec016e1$require$states.CONNECTING;
// https://websockets.spec.whatwg.org/#dom-websocket-open
$d72c7bb97ec016e1$var$WebSocket.OPEN = $d72c7bb97ec016e1$var$WebSocket.prototype.OPEN = $d72c7bb97ec016e1$require$states.OPEN;
// https://websockets.spec.whatwg.org/#dom-websocket-closing
$d72c7bb97ec016e1$var$WebSocket.CLOSING = $d72c7bb97ec016e1$var$WebSocket.prototype.CLOSING = $d72c7bb97ec016e1$require$states.CLOSING;
// https://websockets.spec.whatwg.org/#dom-websocket-closed
$d72c7bb97ec016e1$var$WebSocket.CLOSED = $d72c7bb97ec016e1$var$WebSocket.prototype.CLOSED = $d72c7bb97ec016e1$require$states.CLOSED;
Object.defineProperties($d72c7bb97ec016e1$var$WebSocket.prototype, {
    CONNECTING: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    OPEN: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    CLOSING: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    CLOSED: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    url: $d72c7bb97ec016e1$require$kEnumerableProperty,
    readyState: $d72c7bb97ec016e1$require$kEnumerableProperty,
    bufferedAmount: $d72c7bb97ec016e1$require$kEnumerableProperty,
    onopen: $d72c7bb97ec016e1$require$kEnumerableProperty,
    onerror: $d72c7bb97ec016e1$require$kEnumerableProperty,
    onclose: $d72c7bb97ec016e1$require$kEnumerableProperty,
    close: $d72c7bb97ec016e1$require$kEnumerableProperty,
    onmessage: $d72c7bb97ec016e1$require$kEnumerableProperty,
    binaryType: $d72c7bb97ec016e1$require$kEnumerableProperty,
    send: $d72c7bb97ec016e1$require$kEnumerableProperty,
    extensions: $d72c7bb97ec016e1$require$kEnumerableProperty,
    protocol: $d72c7bb97ec016e1$require$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
    }
});
Object.defineProperties($d72c7bb97ec016e1$var$WebSocket, {
    CONNECTING: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    OPEN: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    CLOSING: $d72c7bb97ec016e1$require$staticPropertyDescriptors,
    CLOSED: $d72c7bb97ec016e1$require$staticPropertyDescriptors
});
$d72c7bb97ec016e1$require$webidl.converters["sequence<DOMString>"] = $d72c7bb97ec016e1$require$webidl.sequenceConverter($d72c7bb97ec016e1$require$webidl.converters.DOMString);
$d72c7bb97ec016e1$require$webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
    if ($d72c7bb97ec016e1$require$webidl.util.Type(V) === "Object" && Symbol.iterator in V) return $d72c7bb97ec016e1$require$webidl.converters["sequence<DOMString>"](V);
    return $d72c7bb97ec016e1$require$webidl.converters.DOMString(V);
};
// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
$d72c7bb97ec016e1$require$webidl.converters.WebSocketInit = $d72c7bb97ec016e1$require$webidl.dictionaryConverter([
    {
        key: "protocols",
        converter: $d72c7bb97ec016e1$require$webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue () {
            return [];
        }
    },
    {
        key: "dispatcher",
        converter: (V)=>V,
        get defaultValue () {
            return $d72c7bb97ec016e1$require$getGlobalDispatcher();
        }
    },
    {
        key: "headers",
        converter: $d72c7bb97ec016e1$require$webidl.nullableConverter($d72c7bb97ec016e1$require$webidl.converters.HeadersInit)
    }
]);
$d72c7bb97ec016e1$require$webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
    if ($d72c7bb97ec016e1$require$webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) return $d72c7bb97ec016e1$require$webidl.converters.WebSocketInit(V);
    return {
        protocols: $d72c7bb97ec016e1$require$webidl.converters["DOMString or sequence<DOMString>"](V)
    };
};
$d72c7bb97ec016e1$require$webidl.converters.WebSocketSendData = function(V) {
    if ($d72c7bb97ec016e1$require$webidl.util.Type(V) === "Object") {
        if ($d72c7bb97ec016e1$require$isBlobLike(V)) return $d72c7bb97ec016e1$require$webidl.converters.Blob(V, {
            strict: false
        });
        if (ArrayBuffer.isView(V) || $d72c7bb97ec016e1$require$types.isAnyArrayBuffer(V)) return $d72c7bb97ec016e1$require$webidl.converters.BufferSource(V);
    }
    return $d72c7bb97ec016e1$require$webidl.converters.USVString(V);
};
module.exports = {
    WebSocket: $d72c7bb97ec016e1$var$WebSocket
};

});
parcelRegister("5ER3c", function(module, exports) {
"use strict";
// This is a Globally Unique Identifier unique used
// to validate that the endpoint accepts websocket
// connections.
// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
const $41e9d6eb1a61a60c$var$uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
/** @type {PropertyDescriptor} */ const $41e9d6eb1a61a60c$var$staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
};
const $41e9d6eb1a61a60c$var$states = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
};
const $41e9d6eb1a61a60c$var$opcodes = {
    CONTINUATION: 0x0,
    TEXT: 0x1,
    BINARY: 0x2,
    CLOSE: 0x8,
    PING: 0x9,
    PONG: 0xA
};
const $41e9d6eb1a61a60c$var$maxUnsigned16Bit = 2 ** 16 - 1 // 65535
;
const $41e9d6eb1a61a60c$var$parserStates = {
    INFO: 0,
    PAYLOADLENGTH_16: 2,
    PAYLOADLENGTH_64: 3,
    READ_DATA: 4
};
const $41e9d6eb1a61a60c$var$emptyBuffer = Buffer.allocUnsafe(0);
module.exports = {
    uid: $41e9d6eb1a61a60c$var$uid,
    staticPropertyDescriptors: $41e9d6eb1a61a60c$var$staticPropertyDescriptors,
    states: $41e9d6eb1a61a60c$var$states,
    opcodes: $41e9d6eb1a61a60c$var$opcodes,
    maxUnsigned16Bit: $41e9d6eb1a61a60c$var$maxUnsigned16Bit,
    parserStates: $41e9d6eb1a61a60c$var$parserStates,
    emptyBuffer: $41e9d6eb1a61a60c$var$emptyBuffer
};

});

parcelRegister("dtsni", function(module, exports) {
"use strict";
module.exports = {
    kWebSocketURL: Symbol("url"),
    kReadyState: Symbol("ready state"),
    kController: Symbol("controller"),
    kResponse: Symbol("response"),
    kBinaryType: Symbol("binary type"),
    kSentClose: Symbol("sent close"),
    kReceivedClose: Symbol("received close"),
    kByteParser: Symbol("byte parser")
};

});

parcelRegister("8xEEY", function(module, exports) {
"use strict";

var $dtsni = parcelRequire("dtsni");
var $6380f1fe8f9ff7aa$require$kReadyState = $dtsni.kReadyState;
var $6380f1fe8f9ff7aa$require$kController = $dtsni.kController;
var $6380f1fe8f9ff7aa$require$kResponse = $dtsni.kResponse;
var $6380f1fe8f9ff7aa$require$kBinaryType = $dtsni.kBinaryType;
var $6380f1fe8f9ff7aa$require$kWebSocketURL = $dtsni.kWebSocketURL;

var $5ER3c = parcelRequire("5ER3c");
var $6380f1fe8f9ff7aa$require$states = $5ER3c.states;
var $6380f1fe8f9ff7aa$require$opcodes = $5ER3c.opcodes;

var $f7sw2 = parcelRequire("f7sw2");
var $6380f1fe8f9ff7aa$require$MessageEvent = $f7sw2.MessageEvent;
var $6380f1fe8f9ff7aa$require$ErrorEvent = $f7sw2.ErrorEvent;
/* globals Blob */ /**
 * @param {import('./websocket').WebSocket} ws
 */ function $6380f1fe8f9ff7aa$var$isEstablished(ws) {
    // If the server's response is validated as provided for above, it is
    // said that _The WebSocket Connection is Established_ and that the
    // WebSocket Connection is in the OPEN state.
    return ws[$6380f1fe8f9ff7aa$require$kReadyState] === $6380f1fe8f9ff7aa$require$states.OPEN;
}
/**
 * @param {import('./websocket').WebSocket} ws
 */ function $6380f1fe8f9ff7aa$var$isClosing(ws) {
    // Upon either sending or receiving a Close control frame, it is said
    // that _The WebSocket Closing Handshake is Started_ and that the
    // WebSocket connection is in the CLOSING state.
    return ws[$6380f1fe8f9ff7aa$require$kReadyState] === $6380f1fe8f9ff7aa$require$states.CLOSING;
}
/**
 * @param {import('./websocket').WebSocket} ws
 */ function $6380f1fe8f9ff7aa$var$isClosed(ws) {
    return ws[$6380f1fe8f9ff7aa$require$kReadyState] === $6380f1fe8f9ff7aa$require$states.CLOSED;
}
/**
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e
 * @param {EventTarget} target
 * @param {EventInit | undefined} eventInitDict
 */ function $6380f1fe8f9ff7aa$var$fireEvent(e, target, eventConstructor = Event, eventInitDict) {
    // 1. If eventConstructor is not given, then let eventConstructor be Event.
    // 2. Let event be the result of creating an event given eventConstructor,
    //    in the relevant realm of target.
    // 3. Initialize event’s type attribute to e.
    const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap
    ;
    // 4. Initialize any other IDL attributes of event as described in the
    //    invocation of this algorithm.
    // 5. Return the result of dispatching event at target, with legacy target
    //    override flag set if set.
    target.dispatchEvent(event);
}
/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @param {import('./websocket').WebSocket} ws
 * @param {number} type Opcode
 * @param {Buffer} data application data
 */ function $6380f1fe8f9ff7aa$var$websocketMessageReceived(ws, type, data) {
    // 1. If ready state is not OPEN (1), then return.
    if (ws[$6380f1fe8f9ff7aa$require$kReadyState] !== $6380f1fe8f9ff7aa$require$states.OPEN) return;
    // 2. Let dataForEvent be determined by switching on type and binary type:
    let dataForEvent;
    if (type === $6380f1fe8f9ff7aa$require$opcodes.TEXT) // -> type indicates that the data is Text
    //      a new DOMString containing data
    try {
        dataForEvent = new TextDecoder("utf-8", {
            fatal: true
        }).decode(data);
    } catch  {
        $6380f1fe8f9ff7aa$var$failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
        return;
    }
    else if (type === $6380f1fe8f9ff7aa$require$opcodes.BINARY) {
        if (ws[$6380f1fe8f9ff7aa$require$kBinaryType] === "blob") // -> type indicates that the data is Binary and binary type is "blob"
        //      a new Blob object, created in the relevant Realm of the WebSocket
        //      object, that represents data as its raw data
        dataForEvent = new Blob([
            data
        ]);
        else // -> type indicates that the data is Binary and binary type is "arraybuffer"
        //      a new ArrayBuffer object, created in the relevant Realm of the
        //      WebSocket object, whose contents are data
        dataForEvent = new Uint8Array(data).buffer;
    }
    // 3. Fire an event named message at the WebSocket object, using MessageEvent,
    //    with the origin attribute initialized to the serialization of the WebSocket
    //    object’s url's origin, and the data attribute initialized to dataForEvent.
    $6380f1fe8f9ff7aa$var$fireEvent("message", ws, $6380f1fe8f9ff7aa$require$MessageEvent, {
        origin: ws[$6380f1fe8f9ff7aa$require$kWebSocketURL].origin,
        data: dataForEvent
    });
}
/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455
 * @see https://datatracker.ietf.org/doc/html/rfc2616
 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
 * @param {string} protocol
 */ function $6380f1fe8f9ff7aa$var$isValidSubprotocol(protocol) {
    // If present, this value indicates one
    // or more comma-separated subprotocol the client wishes to speak,
    // ordered by preference.  The elements that comprise this value
    // MUST be non-empty strings with characters in the range U+0021 to
    // U+007E not including separator characters as defined in
    // [RFC2616] and MUST all be unique strings.
    if (protocol.length === 0) return false;
    for (const char of protocol){
        const code = char.charCodeAt(0);
        if (code < 0x21 || code > 0x7E || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9 // HT
        ) return false;
    }
    return true;
}
/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
 * @param {number} code
 */ function $6380f1fe8f9ff7aa$var$isValidStatusCode(code) {
    if (code >= 1000 && code < 1015) return code !== 1004 && // reserved
    code !== 1005 && // "MUST NOT be set as a status code"
    code !== 1006 // "MUST NOT be set as a status code"
    ;
    return code >= 3000 && code <= 4999;
}
/**
 * @param {import('./websocket').WebSocket} ws
 * @param {string|undefined} reason
 */ function $6380f1fe8f9ff7aa$var$failWebsocketConnection(ws, reason) {
    const { [$6380f1fe8f9ff7aa$require$kController]: controller, [$6380f1fe8f9ff7aa$require$kResponse]: response } = ws;
    controller.abort();
    if ((response === null || response === void 0 ? void 0 : response.socket) && !response.socket.destroyed) response.socket.destroy();
    if (reason) $6380f1fe8f9ff7aa$var$fireEvent("error", ws, $6380f1fe8f9ff7aa$require$ErrorEvent, {
        error: new Error(reason)
    });
}
module.exports = {
    isEstablished: $6380f1fe8f9ff7aa$var$isEstablished,
    isClosing: $6380f1fe8f9ff7aa$var$isClosing,
    isClosed: $6380f1fe8f9ff7aa$var$isClosed,
    fireEvent: $6380f1fe8f9ff7aa$var$fireEvent,
    isValidSubprotocol: $6380f1fe8f9ff7aa$var$isValidSubprotocol,
    isValidStatusCode: $6380f1fe8f9ff7aa$var$isValidStatusCode,
    failWebsocketConnection: $6380f1fe8f9ff7aa$var$failWebsocketConnection,
    websocketMessageReceived: $6380f1fe8f9ff7aa$var$websocketMessageReceived
};

});
parcelRegister("f7sw2", function(module, exports) {
"use strict";

var $2BhCx = parcelRequire("2BhCx");
var $b01da11a9687b4b1$require$webidl = $2BhCx.webidl;

var $3zyxC = parcelRequire("3zyxC");
var $b01da11a9687b4b1$require$kEnumerableProperty = $3zyxC.kEnumerableProperty;

var $b01da11a9687b4b1$require$MessagePort = $3B1P3$worker_threads.MessagePort;
/**
 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
 */ class $b01da11a9687b4b1$var$MessageEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}){
        $b01da11a9687b4b1$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "MessageEvent constructor"
        });
        type = $b01da11a9687b4b1$require$webidl.converters.DOMString(type);
        eventInitDict = $b01da11a9687b4b1$require$webidl.converters.MessageEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
    }
    get data() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$MessageEvent);
        return this.#eventInit.data;
    }
    get origin() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$MessageEvent);
        return this.#eventInit.origin;
    }
    get lastEventId() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$MessageEvent);
        return this.#eventInit.lastEventId;
    }
    get source() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$MessageEvent);
        return this.#eventInit.source;
    }
    get ports() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
        return this.#eventInit.ports;
    }
    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$MessageEvent);
        $b01da11a9687b4b1$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "MessageEvent.initMessageEvent"
        });
        return new $b01da11a9687b4b1$var$MessageEvent(type, {
            bubbles: bubbles,
            cancelable: cancelable,
            data: data,
            origin: origin,
            lastEventId: lastEventId,
            source: source,
            ports: ports
        });
    }
}
/**
 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
 */ class $b01da11a9687b4b1$var$CloseEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}){
        $b01da11a9687b4b1$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CloseEvent constructor"
        });
        type = $b01da11a9687b4b1$require$webidl.converters.DOMString(type);
        eventInitDict = $b01da11a9687b4b1$require$webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
    }
    get wasClean() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$CloseEvent);
        return this.#eventInit.wasClean;
    }
    get code() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$CloseEvent);
        return this.#eventInit.code;
    }
    get reason() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$CloseEvent);
        return this.#eventInit.reason;
    }
}
// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
class $b01da11a9687b4b1$var$ErrorEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict){
        $b01da11a9687b4b1$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "ErrorEvent constructor"
        });
        super(type, eventInitDict);
        type = $b01da11a9687b4b1$require$webidl.converters.DOMString(type);
        eventInitDict = $b01da11a9687b4b1$require$webidl.converters.ErrorEventInit(eventInitDict !== null && eventInitDict !== void 0 ? eventInitDict : {});
        this.#eventInit = eventInitDict;
    }
    get message() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$ErrorEvent);
        return this.#eventInit.message;
    }
    get filename() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$ErrorEvent);
        return this.#eventInit.filename;
    }
    get lineno() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$ErrorEvent);
        return this.#eventInit.lineno;
    }
    get colno() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$ErrorEvent);
        return this.#eventInit.colno;
    }
    get error() {
        $b01da11a9687b4b1$require$webidl.brandCheck(this, $b01da11a9687b4b1$var$ErrorEvent);
        return this.#eventInit.error;
    }
}
Object.defineProperties($b01da11a9687b4b1$var$MessageEvent.prototype, {
    [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
    },
    data: $b01da11a9687b4b1$require$kEnumerableProperty,
    origin: $b01da11a9687b4b1$require$kEnumerableProperty,
    lastEventId: $b01da11a9687b4b1$require$kEnumerableProperty,
    source: $b01da11a9687b4b1$require$kEnumerableProperty,
    ports: $b01da11a9687b4b1$require$kEnumerableProperty,
    initMessageEvent: $b01da11a9687b4b1$require$kEnumerableProperty
});
Object.defineProperties($b01da11a9687b4b1$var$CloseEvent.prototype, {
    [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
    },
    reason: $b01da11a9687b4b1$require$kEnumerableProperty,
    code: $b01da11a9687b4b1$require$kEnumerableProperty,
    wasClean: $b01da11a9687b4b1$require$kEnumerableProperty
});
Object.defineProperties($b01da11a9687b4b1$var$ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
    },
    message: $b01da11a9687b4b1$require$kEnumerableProperty,
    filename: $b01da11a9687b4b1$require$kEnumerableProperty,
    lineno: $b01da11a9687b4b1$require$kEnumerableProperty,
    colno: $b01da11a9687b4b1$require$kEnumerableProperty,
    error: $b01da11a9687b4b1$require$kEnumerableProperty
});
$b01da11a9687b4b1$require$webidl.converters.MessagePort = $b01da11a9687b4b1$require$webidl.interfaceConverter($b01da11a9687b4b1$require$MessagePort);
$b01da11a9687b4b1$require$webidl.converters["sequence<MessagePort>"] = $b01da11a9687b4b1$require$webidl.sequenceConverter($b01da11a9687b4b1$require$webidl.converters.MessagePort);
const $b01da11a9687b4b1$var$eventInit = [
    {
        key: "bubbles",
        converter: $b01da11a9687b4b1$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "cancelable",
        converter: $b01da11a9687b4b1$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "composed",
        converter: $b01da11a9687b4b1$require$webidl.converters.boolean,
        defaultValue: false
    }
];
$b01da11a9687b4b1$require$webidl.converters.MessageEventInit = $b01da11a9687b4b1$require$webidl.dictionaryConverter([
    ...$b01da11a9687b4b1$var$eventInit,
    {
        key: "data",
        converter: $b01da11a9687b4b1$require$webidl.converters.any,
        defaultValue: null
    },
    {
        key: "origin",
        converter: $b01da11a9687b4b1$require$webidl.converters.USVString,
        defaultValue: ""
    },
    {
        key: "lastEventId",
        converter: $b01da11a9687b4b1$require$webidl.converters.DOMString,
        defaultValue: ""
    },
    {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: $b01da11a9687b4b1$require$webidl.nullableConverter($b01da11a9687b4b1$require$webidl.converters.MessagePort),
        defaultValue: null
    },
    {
        key: "ports",
        converter: $b01da11a9687b4b1$require$webidl.converters["sequence<MessagePort>"],
        get defaultValue () {
            return [];
        }
    }
]);
$b01da11a9687b4b1$require$webidl.converters.CloseEventInit = $b01da11a9687b4b1$require$webidl.dictionaryConverter([
    ...$b01da11a9687b4b1$var$eventInit,
    {
        key: "wasClean",
        converter: $b01da11a9687b4b1$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "code",
        converter: $b01da11a9687b4b1$require$webidl.converters["unsigned short"],
        defaultValue: 0
    },
    {
        key: "reason",
        converter: $b01da11a9687b4b1$require$webidl.converters.USVString,
        defaultValue: ""
    }
]);
$b01da11a9687b4b1$require$webidl.converters.ErrorEventInit = $b01da11a9687b4b1$require$webidl.dictionaryConverter([
    ...$b01da11a9687b4b1$var$eventInit,
    {
        key: "message",
        converter: $b01da11a9687b4b1$require$webidl.converters.DOMString,
        defaultValue: ""
    },
    {
        key: "filename",
        converter: $b01da11a9687b4b1$require$webidl.converters.USVString,
        defaultValue: ""
    },
    {
        key: "lineno",
        converter: $b01da11a9687b4b1$require$webidl.converters["unsigned long"],
        defaultValue: 0
    },
    {
        key: "colno",
        converter: $b01da11a9687b4b1$require$webidl.converters["unsigned long"],
        defaultValue: 0
    },
    {
        key: "error",
        converter: $b01da11a9687b4b1$require$webidl.converters.any
    }
]);
module.exports = {
    MessageEvent: $b01da11a9687b4b1$var$MessageEvent,
    CloseEvent: $b01da11a9687b4b1$var$CloseEvent,
    ErrorEvent: $b01da11a9687b4b1$var$ErrorEvent
};

});


parcelRegister("aTS5B", function(module, exports) {
"use strict";


var $5ER3c = parcelRequire("5ER3c");
var $7ef8ff76a555ff4e$require$uid = $5ER3c.uid;
var $7ef8ff76a555ff4e$require$states = $5ER3c.states;

var $dtsni = parcelRequire("dtsni");
var $7ef8ff76a555ff4e$require$kReadyState = $dtsni.kReadyState;
var $7ef8ff76a555ff4e$require$kSentClose = $dtsni.kSentClose;
var $7ef8ff76a555ff4e$require$kByteParser = $dtsni.kByteParser;
var $7ef8ff76a555ff4e$require$kReceivedClose = $dtsni.kReceivedClose;

var $8xEEY = parcelRequire("8xEEY");
var $7ef8ff76a555ff4e$require$fireEvent = $8xEEY.fireEvent;
var $7ef8ff76a555ff4e$require$failWebsocketConnection = $8xEEY.failWebsocketConnection;

var $f7sw2 = parcelRequire("f7sw2");
var $7ef8ff76a555ff4e$require$CloseEvent = $f7sw2.CloseEvent;

var $7TBdE = parcelRequire("7TBdE");
var $7ef8ff76a555ff4e$require$makeRequest = $7TBdE.makeRequest;

var $6liPj = parcelRequire("6liPj");
var $7ef8ff76a555ff4e$require$fetching = $6liPj.fetching;

var $2qoFF = parcelRequire("2qoFF");
var $7ef8ff76a555ff4e$require$Headers = $2qoFF.Headers;

var $iOd5O = parcelRequire("iOd5O");
var $7ef8ff76a555ff4e$require$getGlobalDispatcher = $iOd5O.getGlobalDispatcher;

var $lbv7W = parcelRequire("lbv7W");
var $7ef8ff76a555ff4e$require$kHeadersList = $lbv7W.kHeadersList;
const $7ef8ff76a555ff4e$var$channels = {};
$7ef8ff76a555ff4e$var$channels.open = $3B1P3$diagnostics_channel.channel("undici:websocket:open");
$7ef8ff76a555ff4e$var$channels.close = $3B1P3$diagnostics_channel.channel("undici:websocket:close");
$7ef8ff76a555ff4e$var$channels.socketError = $3B1P3$diagnostics_channel.channel("undici:websocket:socket_error");
/** @type {import('crypto')} */ let $7ef8ff76a555ff4e$var$crypto;

try {
    $7ef8ff76a555ff4e$var$crypto = $7ef8ff76a555ff4e$import$dcf5ad41f4662e6f;
} catch  {}
/**
 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
 * @param {URL} url
 * @param {string|string[]} protocols
 * @param {import('./websocket').WebSocket} ws
 * @param {(response: any) => void} onEstablish
 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
 */ function $7ef8ff76a555ff4e$var$establishWebSocketConnection(url, protocols, ws, onEstablish, options) {
    // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
    //    scheme is "ws", and to "https" otherwise.
    const requestURL = url;
    requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
    // 2. Let request be a new request, whose URL is requestURL, client is client,
    //    service-workers mode is "none", referrer is "no-referrer", mode is
    //    "websocket", credentials mode is "include", cache mode is "no-store" ,
    //    and redirect mode is "error".
    const request = $7ef8ff76a555ff4e$require$makeRequest({
        urlList: [
            requestURL
        ],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
    });
    // Note: undici extension, allow setting custom headers.
    if (options.headers) {
        const headersList = new $7ef8ff76a555ff4e$require$Headers(options.headers)[$7ef8ff76a555ff4e$require$kHeadersList];
        request.headersList = headersList;
    }
    // 3. Append (`Upgrade`, `websocket`) to request’s header list.
    // 4. Append (`Connection`, `Upgrade`) to request’s header list.
    // Note: both of these are handled by undici currently.
    // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397
    // 5. Let keyValue be a nonce consisting of a randomly selected
    //    16-byte value that has been forgiving-base64-encoded and
    //    isomorphic encoded.
    const keyValue = $7ef8ff76a555ff4e$var$crypto.randomBytes(16).toString("base64");
    // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
    //    header list.
    request.headersList.append("sec-websocket-key", keyValue);
    // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
    //    header list.
    request.headersList.append("sec-websocket-version", "13");
    // 8. For each protocol in protocols, combine
    //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
    //    list.
    for (const protocol of protocols)request.headersList.append("sec-websocket-protocol", protocol);
    // 9. Let permessageDeflate be a user-agent defined
    //    "permessage-deflate" extension header value.
    // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
    // TODO: enable once permessage-deflate is supported
    const permessageDeflate = "" // 'permessage-deflate; 15'
    ;
    var _options_dispatcher;
    // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
    //     request’s header list.
    // request.headersList.append('sec-websocket-extensions', permessageDeflate)
    // 11. Fetch request with useParallelQueue set to true, and
    //     processResponse given response being these steps:
    const controller = $7ef8ff76a555ff4e$require$fetching({
        request: request,
        useParallelQueue: true,
        dispatcher: (_options_dispatcher = options.dispatcher) !== null && _options_dispatcher !== void 0 ? _options_dispatcher : $7ef8ff76a555ff4e$require$getGlobalDispatcher(),
        processResponse (response) {
            var _response_headersList_get, _response_headersList_get1;
            // 1. If response is a network error or its status is not 101,
            //    fail the WebSocket connection.
            if (response.type === "error" || response.status !== 101) {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, "Received network error or non-101 status code.");
                return;
            }
            // 2. If protocols is not the empty list and extracting header
            //    list values given `Sec-WebSocket-Protocol` and response’s
            //    header list results in null, failure, or the empty byte
            //    sequence, then fail the WebSocket connection.
            if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, "Server did not respond with sent protocols.");
                return;
            }
            // 3. Follow the requirements stated step 2 to step 6, inclusive,
            //    of the last set of steps in section 4.1 of The WebSocket
            //    Protocol to validate response. This either results in fail
            //    the WebSocket connection or the WebSocket connection is
            //    established.
            // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
            //    header field contains a value that is not an ASCII case-
            //    insensitive match for the value "websocket", the client MUST
            //    _Fail the WebSocket Connection_.
            if (((_response_headersList_get = response.headersList.get("Upgrade")) === null || _response_headersList_get === void 0 ? void 0 : _response_headersList_get.toLowerCase()) !== "websocket") {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
                return;
            }
            // 3. If the response lacks a |Connection| header field or the
            //    |Connection| header field doesn't contain a token that is an
            //    ASCII case-insensitive match for the value "Upgrade", the client
            //    MUST _Fail the WebSocket Connection_.
            if (((_response_headersList_get1 = response.headersList.get("Connection")) === null || _response_headersList_get1 === void 0 ? void 0 : _response_headersList_get1.toLowerCase()) !== "upgrade") {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
                return;
            }
            // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
            //    the |Sec-WebSocket-Accept| contains a value other than the
            //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
            //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
            //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
            //    trailing whitespace, the client MUST _Fail the WebSocket
            //    Connection_.
            const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
            const digest = $7ef8ff76a555ff4e$var$crypto.createHash("sha1").update(keyValue + $7ef8ff76a555ff4e$require$uid).digest("base64");
            if (secWSAccept !== digest) {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
                return;
            }
            // 5. If the response includes a |Sec-WebSocket-Extensions| header
            //    field and this header field indicates the use of an extension
            //    that was not present in the client's handshake (the server has
            //    indicated an extension not requested by the client), the client
            //    MUST _Fail the WebSocket Connection_.  (The parsing of this
            //    header field to determine which extensions are requested is
            //    discussed in Section 9.1.)
            const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
            if (secExtension !== null && secExtension !== permessageDeflate) {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
                return;
            }
            // 6. If the response includes a |Sec-WebSocket-Protocol| header field
            //    and this header field indicates the use of a subprotocol that was
            //    not present in the client's handshake (the server has indicated a
            //    subprotocol not requested by the client), the client MUST _Fail
            //    the WebSocket Connection_.
            const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
            if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
                $7ef8ff76a555ff4e$require$failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
                return;
            }
            response.socket.on("data", $7ef8ff76a555ff4e$var$onSocketData);
            response.socket.on("close", $7ef8ff76a555ff4e$var$onSocketClose);
            response.socket.on("error", $7ef8ff76a555ff4e$var$onSocketError);
            if ($7ef8ff76a555ff4e$var$channels.open.hasSubscribers) $7ef8ff76a555ff4e$var$channels.open.publish({
                address: response.socket.address(),
                protocol: secProtocol,
                extensions: secExtension
            });
            onEstablish(response);
        }
    });
    return controller;
}
/**
 * @param {Buffer} chunk
 */ function $7ef8ff76a555ff4e$var$onSocketData(chunk) {
    if (!this.ws[$7ef8ff76a555ff4e$require$kByteParser].write(chunk)) this.pause();
}
/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
 */ function $7ef8ff76a555ff4e$var$onSocketClose() {
    const { ws: ws } = this;
    // If the TCP connection was closed after the
    // WebSocket closing handshake was completed, the WebSocket connection
    // is said to have been closed _cleanly_.
    const wasClean = ws[$7ef8ff76a555ff4e$require$kSentClose] && ws[$7ef8ff76a555ff4e$require$kReceivedClose];
    let code = 1005;
    let reason = "";
    const result = ws[$7ef8ff76a555ff4e$require$kByteParser].closingInfo;
    if (result) {
        var _result_code;
        code = (_result_code = result.code) !== null && _result_code !== void 0 ? _result_code : 1005;
        reason = result.reason;
    } else if (!ws[$7ef8ff76a555ff4e$require$kSentClose]) // If _The WebSocket
    // Connection is Closed_ and no Close control frame was received by the
    // endpoint (such as could occur if the underlying transport connection
    // is lost), _The WebSocket Connection Close Code_ is considered to be
    // 1006.
    code = 1006;
    // 1. Change the ready state to CLOSED (3).
    ws[$7ef8ff76a555ff4e$require$kReadyState] = $7ef8ff76a555ff4e$require$states.CLOSED;
    // 2. If the user agent was required to fail the WebSocket
    //    connection, or if the WebSocket connection was closed
    //    after being flagged as full, fire an event named error
    //    at the WebSocket object.
    // TODO
    // 3. Fire an event named close at the WebSocket object,
    //    using CloseEvent, with the wasClean attribute
    //    initialized to true if the connection closed cleanly
    //    and false otherwise, the code attribute initialized to
    //    the WebSocket connection close code, and the reason
    //    attribute initialized to the result of applying UTF-8
    //    decode without BOM to the WebSocket connection close
    //    reason.
    $7ef8ff76a555ff4e$require$fireEvent("close", ws, $7ef8ff76a555ff4e$require$CloseEvent, {
        wasClean: wasClean,
        code: code,
        reason: reason
    });
    if ($7ef8ff76a555ff4e$var$channels.close.hasSubscribers) $7ef8ff76a555ff4e$var$channels.close.publish({
        websocket: ws,
        code: code,
        reason: reason
    });
}
function $7ef8ff76a555ff4e$var$onSocketError(error) {
    const { ws: ws } = this;
    ws[$7ef8ff76a555ff4e$require$kReadyState] = $7ef8ff76a555ff4e$require$states.CLOSING;
    if ($7ef8ff76a555ff4e$var$channels.socketError.hasSubscribers) $7ef8ff76a555ff4e$var$channels.socketError.publish(error);
    this.destroy();
}
module.exports = {
    establishWebSocketConnection: $7ef8ff76a555ff4e$var$establishWebSocketConnection
};

});

parcelRegister("6aj6Z", function(module, exports) {
"use strict";

var $5ER3c = parcelRequire("5ER3c");
var $47d2806e89d43e83$require$maxUnsigned16Bit = $5ER3c.maxUnsigned16Bit;
/** @type {import('crypto')} */ let $47d2806e89d43e83$var$crypto;

try {
    $47d2806e89d43e83$var$crypto = $47d2806e89d43e83$import$804f562e18a94705;
} catch  {}
class $47d2806e89d43e83$var$WebsocketFrameSend {
    /**
   * @param {Buffer|undefined} data
   */ constructor(data){
        this.frameData = data;
        this.maskKey = $47d2806e89d43e83$var$crypto.randomBytes(4);
    }
    createFrame(opcode) {
        var _this_frameData;
        var _this_frameData_byteLength;
        const bodyLength = (_this_frameData_byteLength = (_this_frameData = this.frameData) === null || _this_frameData === void 0 ? void 0 : _this_frameData.byteLength) !== null && _this_frameData_byteLength !== void 0 ? _this_frameData_byteLength : 0;
        /** @type {number} */ let payloadLength = bodyLength // 0-125
        ;
        let offset = 6;
        if (bodyLength > $47d2806e89d43e83$require$maxUnsigned16Bit) {
            offset += 8 // payload length is next 8 bytes
            ;
            payloadLength = 127;
        } else if (bodyLength > 125) {
            offset += 2 // payload length is next 2 bytes
            ;
            payloadLength = 126;
        }
        const buffer = Buffer.allocUnsafe(bodyLength + offset);
        // Clear first 2 bytes, everything else is overwritten
        buffer[0] = buffer[1] = 0;
        buffer[0] |= 0x80 // FIN
        ;
        buffer[0] = (buffer[0] & 0xF0) + opcode // opcode
        ;
        /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */ buffer[offset - 4] = this.maskKey[0];
        buffer[offset - 3] = this.maskKey[1];
        buffer[offset - 2] = this.maskKey[2];
        buffer[offset - 1] = this.maskKey[3];
        buffer[1] = payloadLength;
        if (payloadLength === 126) buffer.writeUInt16BE(bodyLength, 2);
        else if (payloadLength === 127) {
            // Clear extended payload length
            buffer[2] = buffer[3] = 0;
            buffer.writeUIntBE(bodyLength, 4, 6);
        }
        buffer[1] |= 0x80 // MASK
        ;
        // mask body
        for(let i = 0; i < bodyLength; i++)buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
        return buffer;
    }
}
module.exports = {
    WebsocketFrameSend: $47d2806e89d43e83$var$WebsocketFrameSend
};

});

parcelRegister("hCUXp", function(module, exports) {
"use strict";

var $cd522ac88cdb5705$require$Writable = $3B1P3$stream.Writable;


var $5ER3c = parcelRequire("5ER3c");
var $cd522ac88cdb5705$require$parserStates = $5ER3c.parserStates;
var $cd522ac88cdb5705$require$opcodes = $5ER3c.opcodes;
var $cd522ac88cdb5705$require$states = $5ER3c.states;
var $cd522ac88cdb5705$require$emptyBuffer = $5ER3c.emptyBuffer;

var $dtsni = parcelRequire("dtsni");
var $cd522ac88cdb5705$require$kReadyState = $dtsni.kReadyState;
var $cd522ac88cdb5705$require$kSentClose = $dtsni.kSentClose;
var $cd522ac88cdb5705$require$kResponse = $dtsni.kResponse;
var $cd522ac88cdb5705$require$kReceivedClose = $dtsni.kReceivedClose;

var $8xEEY = parcelRequire("8xEEY");
var $cd522ac88cdb5705$require$isValidStatusCode = $8xEEY.isValidStatusCode;
var $cd522ac88cdb5705$require$failWebsocketConnection = $8xEEY.failWebsocketConnection;
var $cd522ac88cdb5705$require$websocketMessageReceived = $8xEEY.websocketMessageReceived;

var $6aj6Z = parcelRequire("6aj6Z");
var $cd522ac88cdb5705$require$WebsocketFrameSend = $6aj6Z.WebsocketFrameSend;
// This code was influenced by ws released under the MIT license.
// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
// Copyright (c) 2013 Arnout Kazemier and contributors
// Copyright (c) 2016 Luigi Pinca and contributors
const $cd522ac88cdb5705$var$channels = {};
$cd522ac88cdb5705$var$channels.ping = $3B1P3$diagnostics_channel.channel("undici:websocket:ping");
$cd522ac88cdb5705$var$channels.pong = $3B1P3$diagnostics_channel.channel("undici:websocket:pong");
class $cd522ac88cdb5705$var$ByteParser extends $cd522ac88cdb5705$require$Writable {
    #buffers = [];
    #byteOffset = 0;
    #state = $cd522ac88cdb5705$require$parserStates.INFO;
    #info = {};
    #fragments = [];
    constructor(ws){
        super();
        this.ws = ws;
    }
    /**
   * @param {Buffer} chunk
   * @param {() => void} callback
   */ _write(chunk, _, callback) {
        this.#buffers.push(chunk);
        this.#byteOffset += chunk.length;
        this.run(callback);
    }
    /**
   * Runs whenever a new chunk is received.
   * Callback is called whenever there are no more chunks buffering,
   * or not enough bytes are buffered to parse.
   */ run(callback) {
        while(true){
            if (this.#state === $cd522ac88cdb5705$require$parserStates.INFO) {
                var // If we receive a fragmented message, we use the type of the first
                // frame to parse the full message as binary/text, when it's terminated
                _ref;
                // If there aren't enough bytes to parse the payload length, etc.
                if (this.#byteOffset < 2) return callback();
                const buffer = this.consume(2);
                this.#info.fin = (buffer[0] & 0x80) !== 0;
                this.#info.opcode = buffer[0] & 0x0F;
                var _originalOpcode;
                (_originalOpcode = (_ref = this.#info).originalOpcode) !== null && _originalOpcode !== void 0 ? _originalOpcode : _ref.originalOpcode = this.#info.opcode;
                this.#info.fragmented = !this.#info.fin && this.#info.opcode !== $cd522ac88cdb5705$require$opcodes.CONTINUATION;
                if (this.#info.fragmented && this.#info.opcode !== $cd522ac88cdb5705$require$opcodes.BINARY && this.#info.opcode !== $cd522ac88cdb5705$require$opcodes.TEXT) {
                    // Only text and binary frames can be fragmented
                    $cd522ac88cdb5705$require$failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
                    return;
                }
                const payloadLength = buffer[1] & 0x7F;
                if (payloadLength <= 125) {
                    this.#info.payloadLength = payloadLength;
                    this.#state = $cd522ac88cdb5705$require$parserStates.READ_DATA;
                } else if (payloadLength === 126) this.#state = $cd522ac88cdb5705$require$parserStates.PAYLOADLENGTH_16;
                else if (payloadLength === 127) this.#state = $cd522ac88cdb5705$require$parserStates.PAYLOADLENGTH_64;
                if (this.#info.fragmented && payloadLength > 125) {
                    // A fragmented frame can't be fragmented itself
                    $cd522ac88cdb5705$require$failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
                    return;
                } else if ((this.#info.opcode === $cd522ac88cdb5705$require$opcodes.PING || this.#info.opcode === $cd522ac88cdb5705$require$opcodes.PONG || this.#info.opcode === $cd522ac88cdb5705$require$opcodes.CLOSE) && payloadLength > 125) {
                    // Control frames can have a payload length of 125 bytes MAX
                    $cd522ac88cdb5705$require$failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
                    return;
                } else if (this.#info.opcode === $cd522ac88cdb5705$require$opcodes.CLOSE) {
                    if (payloadLength === 1) {
                        $cd522ac88cdb5705$require$failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                        return;
                    }
                    const body = this.consume(payloadLength);
                    this.#info.closeInfo = this.parseCloseBody(false, body);
                    if (!this.ws[$cd522ac88cdb5705$require$kSentClose]) {
                        // If an endpoint receives a Close frame and did not previously send a
                        // Close frame, the endpoint MUST send a Close frame in response.  (When
                        // sending a Close frame in response, the endpoint typically echos the
                        // status code it received.)
                        const body = Buffer.allocUnsafe(2);
                        body.writeUInt16BE(this.#info.closeInfo.code, 0);
                        const closeFrame = new $cd522ac88cdb5705$require$WebsocketFrameSend(body);
                        this.ws[$cd522ac88cdb5705$require$kResponse].socket.write(closeFrame.createFrame($cd522ac88cdb5705$require$opcodes.CLOSE), (err)=>{
                            if (!err) this.ws[$cd522ac88cdb5705$require$kSentClose] = true;
                        });
                    }
                    // Upon either sending or receiving a Close control frame, it is said
                    // that _The WebSocket Closing Handshake is Started_ and that the
                    // WebSocket connection is in the CLOSING state.
                    this.ws[$cd522ac88cdb5705$require$kReadyState] = $cd522ac88cdb5705$require$states.CLOSING;
                    this.ws[$cd522ac88cdb5705$require$kReceivedClose] = true;
                    this.end();
                    return;
                } else if (this.#info.opcode === $cd522ac88cdb5705$require$opcodes.PING) {
                    // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
                    // response, unless it already received a Close frame.
                    // A Pong frame sent in response to a Ping frame must have identical
                    // "Application data"
                    const body = this.consume(payloadLength);
                    if (!this.ws[$cd522ac88cdb5705$require$kReceivedClose]) {
                        const frame = new $cd522ac88cdb5705$require$WebsocketFrameSend(body);
                        this.ws[$cd522ac88cdb5705$require$kResponse].socket.write(frame.createFrame($cd522ac88cdb5705$require$opcodes.PONG));
                        if ($cd522ac88cdb5705$var$channels.ping.hasSubscribers) $cd522ac88cdb5705$var$channels.ping.publish({
                            payload: body
                        });
                    }
                    this.#state = $cd522ac88cdb5705$require$parserStates.INFO;
                    if (this.#byteOffset > 0) continue;
                    else {
                        callback();
                        return;
                    }
                } else if (this.#info.opcode === $cd522ac88cdb5705$require$opcodes.PONG) {
                    // A Pong frame MAY be sent unsolicited.  This serves as a
                    // unidirectional heartbeat.  A response to an unsolicited Pong frame is
                    // not expected.
                    const body = this.consume(payloadLength);
                    if ($cd522ac88cdb5705$var$channels.pong.hasSubscribers) $cd522ac88cdb5705$var$channels.pong.publish({
                        payload: body
                    });
                    if (this.#byteOffset > 0) continue;
                    else {
                        callback();
                        return;
                    }
                }
            } else if (this.#state === $cd522ac88cdb5705$require$parserStates.PAYLOADLENGTH_16) {
                if (this.#byteOffset < 2) return callback();
                const buffer = this.consume(2);
                this.#info.payloadLength = buffer.readUInt16BE(0);
                this.#state = $cd522ac88cdb5705$require$parserStates.READ_DATA;
            } else if (this.#state === $cd522ac88cdb5705$require$parserStates.PAYLOADLENGTH_64) {
                if (this.#byteOffset < 8) return callback();
                const buffer = this.consume(8);
                const upper = buffer.readUInt32BE(0);
                // 2^31 is the maxinimum bytes an arraybuffer can contain
                // on 32-bit systems. Although, on 64-bit systems, this is
                // 2^53-1 bytes.
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
                if (upper > 2 ** 31 - 1) {
                    $cd522ac88cdb5705$require$failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
                    return;
                }
                const lower = buffer.readUInt32BE(4);
                this.#info.payloadLength = (upper << 8) + lower;
                this.#state = $cd522ac88cdb5705$require$parserStates.READ_DATA;
            } else if (this.#state === $cd522ac88cdb5705$require$parserStates.READ_DATA) {
                if (this.#byteOffset < this.#info.payloadLength) // If there is still more data in this chunk that needs to be read
                return callback();
                else if (this.#byteOffset >= this.#info.payloadLength) {
                    // If the server sent multiple frames in a single chunk
                    const body = this.consume(this.#info.payloadLength);
                    this.#fragments.push(body);
                    // If the frame is unfragmented, or a fragmented frame was terminated,
                    // a message was received
                    if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === $cd522ac88cdb5705$require$opcodes.CONTINUATION) {
                        const fullMessage = Buffer.concat(this.#fragments);
                        $cd522ac88cdb5705$require$websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                        this.#info = {};
                        this.#fragments.length = 0;
                    }
                    this.#state = $cd522ac88cdb5705$require$parserStates.INFO;
                }
            }
            if (this.#byteOffset > 0) continue;
            else {
                callback();
                break;
            }
        }
    }
    /**
   * Take n bytes from the buffered Buffers
   * @param {number} n
   * @returns {Buffer|null}
   */ consume(n) {
        if (n > this.#byteOffset) return null;
        else if (n === 0) return $cd522ac88cdb5705$require$emptyBuffer;
        if (this.#buffers[0].length === n) {
            this.#byteOffset -= this.#buffers[0].length;
            return this.#buffers.shift();
        }
        const buffer = Buffer.allocUnsafe(n);
        let offset = 0;
        while(offset !== n){
            const next = this.#buffers[0];
            const { length: length } = next;
            if (length + offset === n) {
                buffer.set(this.#buffers.shift(), offset);
                break;
            } else if (length + offset > n) {
                buffer.set(next.subarray(0, n - offset), offset);
                this.#buffers[0] = next.subarray(n - offset);
                break;
            } else {
                buffer.set(this.#buffers.shift(), offset);
                offset += next.length;
            }
        }
        this.#byteOffset -= n;
        return buffer;
    }
    parseCloseBody(onlyCode, data) {
        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
        /** @type {number|undefined} */ let code;
        if (data.length >= 2) // _The WebSocket Connection Close Code_ is
        // defined as the status code (Section 7.4) contained in the first Close
        // control frame received by the application
        code = data.readUInt16BE(0);
        if (onlyCode) {
            if (!$cd522ac88cdb5705$require$isValidStatusCode(code)) return null;
            return {
                code: code
            };
        }
        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
        /** @type {Buffer} */ let reason = data.subarray(2);
        // Remove BOM
        if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) reason = reason.subarray(3);
        if (code !== undefined && !$cd522ac88cdb5705$require$isValidStatusCode(code)) return null;
        try {
            // TODO: optimize this
            reason = new TextDecoder("utf-8", {
                fatal: true
            }).decode(reason);
        } catch  {
            return null;
        }
        return {
            code: code,
            reason: reason
        };
    }
    get closingInfo() {
        return this.#info.closeInfo;
    }
}
module.exports = {
    ByteParser: $cd522ac88cdb5705$var$ByteParser
};

});




parcelRegister("tRvdu", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Context = void 0;


class $059c360746f4ef84$var$Context {
    /**
     * Hydrate the context from the environment
     */ constructor(){
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
            if ((0, $3B1P3$fs.existsSync)(process.env.GITHUB_EVENT_PATH)) this.payload = JSON.parse((0, $3B1P3$fs.readFileSync)(process.env.GITHUB_EVENT_PATH, {
                encoding: "utf8"
            }));
            else {
                const path = process.env.GITHUB_EVENT_PATH;
                process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${$3B1P3$os.EOL}`);
            }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
    }
    get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), {
            number: (payload.issue || payload.pull_request || payload).number
        });
    }
    get repo() {
        if (process.env.GITHUB_REPOSITORY) {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            return {
                owner: owner,
                repo: repo
            };
        }
        if (this.payload.repository) return {
            owner: this.payload.repository.owner.login,
            repo: this.payload.repository.name
        };
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
    }
}
module.exports.Context = $059c360746f4ef84$var$Context;

});

parcelRegister("eWsme", function(module, exports) {
"use strict";
var $ae0c7ab68007fc51$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $ae0c7ab68007fc51$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $ae0c7ab68007fc51$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $ae0c7ab68007fc51$var$__createBinding(result, mod, k);
    }
    $ae0c7ab68007fc51$var$__setModuleDefault(result, mod);
    return result;
};
var $ae0c7ab68007fc51$var$__awaiter = module.exports && module.exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.getApiBaseUrl = module.exports.getProxyFetch = module.exports.getProxyAgentDispatcher = module.exports.getProxyAgent = module.exports.getAuthString = void 0;

const $ae0c7ab68007fc51$var$httpClient = $ae0c7ab68007fc51$var$__importStar((parcelRequire("cLRC3")));

var $bEavY = parcelRequire("bEavY");
function $ae0c7ab68007fc51$var$getAuthString(token, options) {
    if (!token && !options.auth) throw new Error("Parameter token or opts.auth is required");
    else if (token && options.auth) throw new Error("Parameters token and opts.auth may not both be specified");
    return typeof options.auth === "string" ? options.auth : `token ${token}`;
}
module.exports.getAuthString = $ae0c7ab68007fc51$var$getAuthString;
function $ae0c7ab68007fc51$var$getProxyAgent(destinationUrl) {
    const hc = new $ae0c7ab68007fc51$var$httpClient.HttpClient();
    return hc.getAgent(destinationUrl);
}
module.exports.getProxyAgent = $ae0c7ab68007fc51$var$getProxyAgent;
function $ae0c7ab68007fc51$var$getProxyAgentDispatcher(destinationUrl) {
    const hc = new $ae0c7ab68007fc51$var$httpClient.HttpClient();
    return hc.getAgentDispatcher(destinationUrl);
}
module.exports.getProxyAgentDispatcher = $ae0c7ab68007fc51$var$getProxyAgentDispatcher;
function $ae0c7ab68007fc51$var$getProxyFetch(destinationUrl) {
    const httpDispatcher = $ae0c7ab68007fc51$var$getProxyAgentDispatcher(destinationUrl);
    const proxyFetch = (url, opts)=>$ae0c7ab68007fc51$var$__awaiter(this, void 0, void 0, function*() {
            return (0, $bEavY.fetch)(url, Object.assign(Object.assign({}, opts), {
                dispatcher: httpDispatcher
            }));
        });
    return proxyFetch;
}
module.exports.getProxyFetch = $ae0c7ab68007fc51$var$getProxyFetch;
function $ae0c7ab68007fc51$var$getApiBaseUrl() {
    return process.env["GITHUB_API_URL"] || "https://api.github.com";
}
module.exports.getApiBaseUrl = $ae0c7ab68007fc51$var$getApiBaseUrl;

});

var $8c7cc7c00e6bea0c$exports = {};
"use strict";
var $8c7cc7c00e6bea0c$var$__createBinding = $8c7cc7c00e6bea0c$exports && $8c7cc7c00e6bea0c$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $8c7cc7c00e6bea0c$var$__setModuleDefault = $8c7cc7c00e6bea0c$exports && $8c7cc7c00e6bea0c$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $8c7cc7c00e6bea0c$var$__importStar = $8c7cc7c00e6bea0c$exports && $8c7cc7c00e6bea0c$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $8c7cc7c00e6bea0c$var$__createBinding(result, mod, k);
    }
    $8c7cc7c00e6bea0c$var$__setModuleDefault(result, mod);
    return result;
};
var $8c7cc7c00e6bea0c$var$__awaiter = $8c7cc7c00e6bea0c$exports && $8c7cc7c00e6bea0c$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($8c7cc7c00e6bea0c$exports, "__esModule", {
    value: true
});
$8c7cc7c00e6bea0c$exports.getIDToken = $8c7cc7c00e6bea0c$exports.getState = $8c7cc7c00e6bea0c$exports.saveState = $8c7cc7c00e6bea0c$exports.group = $8c7cc7c00e6bea0c$exports.endGroup = $8c7cc7c00e6bea0c$exports.startGroup = $8c7cc7c00e6bea0c$exports.info = $8c7cc7c00e6bea0c$exports.notice = $8c7cc7c00e6bea0c$exports.warning = $8c7cc7c00e6bea0c$exports.error = $8c7cc7c00e6bea0c$exports.debug = $8c7cc7c00e6bea0c$exports.isDebug = $8c7cc7c00e6bea0c$exports.setFailed = $8c7cc7c00e6bea0c$exports.setCommandEcho = $8c7cc7c00e6bea0c$exports.setOutput = $8c7cc7c00e6bea0c$exports.getBooleanInput = $8c7cc7c00e6bea0c$exports.getMultilineInput = $8c7cc7c00e6bea0c$exports.getInput = $8c7cc7c00e6bea0c$exports.addPath = $8c7cc7c00e6bea0c$exports.setSecret = $8c7cc7c00e6bea0c$exports.exportVariable = $8c7cc7c00e6bea0c$exports.ExitCode = void 0;
var $3ecfdf502cef912d$exports = {};
"use strict";
var $3ecfdf502cef912d$var$__createBinding = $3ecfdf502cef912d$exports && $3ecfdf502cef912d$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $3ecfdf502cef912d$var$__setModuleDefault = $3ecfdf502cef912d$exports && $3ecfdf502cef912d$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $3ecfdf502cef912d$var$__importStar = $3ecfdf502cef912d$exports && $3ecfdf502cef912d$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $3ecfdf502cef912d$var$__createBinding(result, mod, k);
    }
    $3ecfdf502cef912d$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($3ecfdf502cef912d$exports, "__esModule", {
    value: true
});
$3ecfdf502cef912d$exports.issue = $3ecfdf502cef912d$exports.issueCommand = void 0;

const $3ecfdf502cef912d$var$os = $3ecfdf502cef912d$var$__importStar($3B1P3$os);
var $8edc3b90e976de31$exports = {};
"use strict";
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */ Object.defineProperty($8edc3b90e976de31$exports, "__esModule", {
    value: true
});
$8edc3b90e976de31$exports.toCommandProperties = $8edc3b90e976de31$exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */ function $8edc3b90e976de31$var$toCommandValue(input) {
    if (input === null || input === undefined) return "";
    else if (typeof input === "string" || input instanceof String) return input;
    return JSON.stringify(input);
}
$8edc3b90e976de31$exports.toCommandValue = $8edc3b90e976de31$var$toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */ function $8edc3b90e976de31$var$toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) return {};
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
$8edc3b90e976de31$exports.toCommandProperties = $8edc3b90e976de31$var$toCommandProperties;


/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */ function $3ecfdf502cef912d$var$issueCommand(command, properties, message) {
    const cmd = new $3ecfdf502cef912d$var$Command(command, properties, message);
    process.stdout.write(cmd.toString() + $3ecfdf502cef912d$var$os.EOL);
}
$3ecfdf502cef912d$exports.issueCommand = $3ecfdf502cef912d$var$issueCommand;
function $3ecfdf502cef912d$var$issue(name, message = "") {
    $3ecfdf502cef912d$var$issueCommand(name, {}, message);
}
$3ecfdf502cef912d$exports.issue = $3ecfdf502cef912d$var$issue;
const $3ecfdf502cef912d$var$CMD_STRING = "::";
class $3ecfdf502cef912d$var$Command {
    constructor(command, properties, message){
        if (!command) command = "missing.command";
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = $3ecfdf502cef912d$var$CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += " ";
            let first = true;
            for(const key in this.properties)if (this.properties.hasOwnProperty(key)) {
                const val = this.properties[key];
                if (val) {
                    if (first) first = false;
                    else cmdStr += ",";
                    cmdStr += `${key}=${$3ecfdf502cef912d$var$escapeProperty(val)}`;
                }
            }
        }
        cmdStr += `${$3ecfdf502cef912d$var$CMD_STRING}${$3ecfdf502cef912d$var$escapeData(this.message)}`;
        return cmdStr;
    }
}
function $3ecfdf502cef912d$var$escapeData(s) {
    return $8edc3b90e976de31$exports.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
}
function $3ecfdf502cef912d$var$escapeProperty(s) {
    return $8edc3b90e976de31$exports.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
}


var $24012dd272ea9b9a$exports = {};
"use strict";
// For internal use, subject to change.
var $24012dd272ea9b9a$var$__createBinding = $24012dd272ea9b9a$exports && $24012dd272ea9b9a$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $24012dd272ea9b9a$var$__setModuleDefault = $24012dd272ea9b9a$exports && $24012dd272ea9b9a$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $24012dd272ea9b9a$var$__importStar = $24012dd272ea9b9a$exports && $24012dd272ea9b9a$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $24012dd272ea9b9a$var$__createBinding(result, mod, k);
    }
    $24012dd272ea9b9a$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($24012dd272ea9b9a$exports, "__esModule", {
    value: true
});
$24012dd272ea9b9a$exports.prepareKeyValueMessage = $24012dd272ea9b9a$exports.issueFileCommand = void 0;

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */ const $24012dd272ea9b9a$var$fs = $24012dd272ea9b9a$var$__importStar($3B1P3$fs);

const $24012dd272ea9b9a$var$os = $24012dd272ea9b9a$var$__importStar($3B1P3$os);

const $7becf67cc2adf79c$var$rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate
let $7becf67cc2adf79c$var$poolPtr = $7becf67cc2adf79c$var$rnds8Pool.length;
function $7becf67cc2adf79c$export$2e2bcd8739ae039() {
    if ($7becf67cc2adf79c$var$poolPtr > $7becf67cc2adf79c$var$rnds8Pool.length - 16) {
        (0, ($parcel$interopDefault($3B1P3$crypto))).randomFillSync($7becf67cc2adf79c$var$rnds8Pool);
        $7becf67cc2adf79c$var$poolPtr = 0;
    }
    return $7becf67cc2adf79c$var$rnds8Pool.slice($7becf67cc2adf79c$var$poolPtr, $7becf67cc2adf79c$var$poolPtr += 16);
}


var $61444495534721ff$export$2e2bcd8739ae039 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;


function $7d0e7293d0c50d4f$var$validate(uuid) {
    return typeof uuid === "string" && (0, $61444495534721ff$export$2e2bcd8739ae039).test(uuid);
}
var $7d0e7293d0c50d4f$export$2e2bcd8739ae039 = $7d0e7293d0c50d4f$var$validate;


/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const $2f02daec17b608f9$var$byteToHex = [];
for(let i = 0; i < 256; ++i)$2f02daec17b608f9$var$byteToHex.push((i + 0x100).toString(16).substr(1));
function $2f02daec17b608f9$var$stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = ($2f02daec17b608f9$var$byteToHex[arr[offset + 0]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 1]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 2]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 3]] + "-" + $2f02daec17b608f9$var$byteToHex[arr[offset + 4]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 5]] + "-" + $2f02daec17b608f9$var$byteToHex[arr[offset + 6]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 7]] + "-" + $2f02daec17b608f9$var$byteToHex[arr[offset + 8]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 9]] + "-" + $2f02daec17b608f9$var$byteToHex[arr[offset + 10]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 11]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 12]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 13]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 14]] + $2f02daec17b608f9$var$byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, $7d0e7293d0c50d4f$export$2e2bcd8739ae039)(uuid)) throw TypeError("Stringified UUID is invalid");
    return uuid;
}
var $2f02daec17b608f9$export$2e2bcd8739ae039 = $2f02daec17b608f9$var$stringify;


function $bb5fef6ed537e5c8$var$v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || (0, $7becf67cc2adf79c$export$2e2bcd8739ae039))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, $2f02daec17b608f9$export$2e2bcd8739ae039)(rnds);
}
var $bb5fef6ed537e5c8$export$2e2bcd8739ae039 = $bb5fef6ed537e5c8$var$v4;



function $24012dd272ea9b9a$var$issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
    if (!$24012dd272ea9b9a$var$fs.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
    $24012dd272ea9b9a$var$fs.appendFileSync(filePath, `${$8edc3b90e976de31$exports.toCommandValue(message)}${$24012dd272ea9b9a$var$os.EOL}`, {
        encoding: "utf8"
    });
}
$24012dd272ea9b9a$exports.issueFileCommand = $24012dd272ea9b9a$var$issueFileCommand;
function $24012dd272ea9b9a$var$prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${$bb5fef6ed537e5c8$export$2e2bcd8739ae039()}`;
    const convertedValue = $8edc3b90e976de31$exports.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    return `${key}<<${delimiter}${$24012dd272ea9b9a$var$os.EOL}${convertedValue}${$24012dd272ea9b9a$var$os.EOL}${delimiter}`;
}
$24012dd272ea9b9a$exports.prepareKeyValueMessage = $24012dd272ea9b9a$var$prepareKeyValueMessage;




const $8c7cc7c00e6bea0c$var$os = $8c7cc7c00e6bea0c$var$__importStar($3B1P3$os);

const $8c7cc7c00e6bea0c$var$path = $8c7cc7c00e6bea0c$var$__importStar($3B1P3$path);
var $0a8e739db5585665$exports = {};
"use strict";
var $0a8e739db5585665$var$__awaiter = $0a8e739db5585665$exports && $0a8e739db5585665$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($0a8e739db5585665$exports, "__esModule", {
    value: true
});
$0a8e739db5585665$exports.OidcClient = void 0;

var $cLRC3 = parcelRequire("cLRC3");
var $874a3538a4f62aa8$exports = {};
"use strict";
var $874a3538a4f62aa8$var$__awaiter = $874a3538a4f62aa8$exports && $874a3538a4f62aa8$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($874a3538a4f62aa8$exports, "__esModule", {
    value: true
});
$874a3538a4f62aa8$exports.PersonalAccessTokenCredentialHandler = $874a3538a4f62aa8$exports.BearerCredentialHandler = $874a3538a4f62aa8$exports.BasicCredentialHandler = void 0;
class $874a3538a4f62aa8$var$BasicCredentialHandler {
    constructor(username, password){
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) throw Error("The request has no headers");
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return $874a3538a4f62aa8$var$__awaiter(this, void 0, void 0, function*() {
            throw new Error("not implemented");
        });
    }
}
$874a3538a4f62aa8$exports.BasicCredentialHandler = $874a3538a4f62aa8$var$BasicCredentialHandler;
class $874a3538a4f62aa8$var$BearerCredentialHandler {
    constructor(token){
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) throw Error("The request has no headers");
        options.headers["Authorization"] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return $874a3538a4f62aa8$var$__awaiter(this, void 0, void 0, function*() {
            throw new Error("not implemented");
        });
    }
}
$874a3538a4f62aa8$exports.BearerCredentialHandler = $874a3538a4f62aa8$var$BearerCredentialHandler;
class $874a3538a4f62aa8$var$PersonalAccessTokenCredentialHandler {
    constructor(token){
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) throw Error("The request has no headers");
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return $874a3538a4f62aa8$var$__awaiter(this, void 0, void 0, function*() {
            throw new Error("not implemented");
        });
    }
}
$874a3538a4f62aa8$exports.PersonalAccessTokenCredentialHandler = $874a3538a4f62aa8$var$PersonalAccessTokenCredentialHandler;



class $0a8e739db5585665$var$OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new $cLRC3.HttpClient("actions/oidc-client", [
            new $874a3538a4f62aa8$exports.BearerCredentialHandler($0a8e739db5585665$var$OidcClient.getRequestToken())
        ], requestOptions);
    }
    static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return $0a8e739db5585665$var$__awaiter(this, void 0, void 0, function*() {
            const httpclient = $0a8e739db5585665$var$OidcClient.createHttpClient();
            const res = yield httpclient.getJson(id_token_url).catch((error)=>{
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) throw new Error("Response json body do not have ID Token field");
            return id_token;
        });
    }
    static getIDToken(audience) {
        return $0a8e739db5585665$var$__awaiter(this, void 0, void 0, function*() {
            try {
                // New ID Token is requested from action service
                let id_token_url = $0a8e739db5585665$var$OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                $8c7cc7c00e6bea0c$exports.debug(`ID token url is ${id_token_url}`);
                const id_token = yield $0a8e739db5585665$var$OidcClient.getCall(id_token_url);
                $8c7cc7c00e6bea0c$exports.setSecret(id_token);
                return id_token;
            } catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
$0a8e739db5585665$exports.OidcClient = $0a8e739db5585665$var$OidcClient;


/**
 * The code to exit an action
 */ var $8c7cc7c00e6bea0c$var$ExitCode;
(function(ExitCode) {
    /**
     * A code indicating that the action was successful
     */ ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */ ExitCode[ExitCode["Failure"] = 1] = "Failure";
})($8c7cc7c00e6bea0c$var$ExitCode = $8c7cc7c00e6bea0c$exports.ExitCode || ($8c7cc7c00e6bea0c$exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function $8c7cc7c00e6bea0c$var$exportVariable(name, val) {
    const convertedVal = $8edc3b90e976de31$exports.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env["GITHUB_ENV"] || "";
    if (filePath) return $24012dd272ea9b9a$exports.issueFileCommand("ENV", $24012dd272ea9b9a$exports.prepareKeyValueMessage(name, val));
    $3ecfdf502cef912d$exports.issueCommand("set-env", {
        name: name
    }, convertedVal);
}
$8c7cc7c00e6bea0c$exports.exportVariable = $8c7cc7c00e6bea0c$var$exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */ function $8c7cc7c00e6bea0c$var$setSecret(secret) {
    $3ecfdf502cef912d$exports.issueCommand("add-mask", {}, secret);
}
$8c7cc7c00e6bea0c$exports.setSecret = $8c7cc7c00e6bea0c$var$setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */ function $8c7cc7c00e6bea0c$var$addPath(inputPath) {
    const filePath = process.env["GITHUB_PATH"] || "";
    if (filePath) $24012dd272ea9b9a$exports.issueFileCommand("PATH", inputPath);
    else $3ecfdf502cef912d$exports.issueCommand("add-path", {}, inputPath);
    process.env["PATH"] = `${inputPath}${$8c7cc7c00e6bea0c$var$path.delimiter}${process.env["PATH"]}`;
}
$8c7cc7c00e6bea0c$exports.addPath = $8c7cc7c00e6bea0c$var$addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */ function $8c7cc7c00e6bea0c$var$getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
    if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name}`);
    if (options && options.trimWhitespace === false) return val;
    return val.trim();
}
$8c7cc7c00e6bea0c$exports.getInput = $8c7cc7c00e6bea0c$var$getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */ function $8c7cc7c00e6bea0c$var$getMultilineInput(name, options) {
    const inputs = $8c7cc7c00e6bea0c$var$getInput(name, options).split("\n").filter((x)=>x !== "");
    if (options && options.trimWhitespace === false) return inputs;
    return inputs.map((input)=>input.trim());
}
$8c7cc7c00e6bea0c$exports.getMultilineInput = $8c7cc7c00e6bea0c$var$getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */ function $8c7cc7c00e6bea0c$var$getBooleanInput(name, options) {
    const trueValue = [
        "true",
        "True",
        "TRUE"
    ];
    const falseValue = [
        "false",
        "False",
        "FALSE"
    ];
    const val = $8c7cc7c00e6bea0c$var$getInput(name, options);
    if (trueValue.includes(val)) return true;
    if (falseValue.includes(val)) return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` + `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
$8c7cc7c00e6bea0c$exports.getBooleanInput = $8c7cc7c00e6bea0c$var$getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function $8c7cc7c00e6bea0c$var$setOutput(name, value) {
    const filePath = process.env["GITHUB_OUTPUT"] || "";
    if (filePath) return $24012dd272ea9b9a$exports.issueFileCommand("OUTPUT", $24012dd272ea9b9a$exports.prepareKeyValueMessage(name, value));
    process.stdout.write($8c7cc7c00e6bea0c$var$os.EOL);
    $3ecfdf502cef912d$exports.issueCommand("set-output", {
        name: name
    }, $8edc3b90e976de31$exports.toCommandValue(value));
}
$8c7cc7c00e6bea0c$exports.setOutput = $8c7cc7c00e6bea0c$var$setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */ function $8c7cc7c00e6bea0c$var$setCommandEcho(enabled) {
    $3ecfdf502cef912d$exports.issue("echo", enabled ? "on" : "off");
}
$8c7cc7c00e6bea0c$exports.setCommandEcho = $8c7cc7c00e6bea0c$var$setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */ function $8c7cc7c00e6bea0c$var$setFailed(message) {
    process.exitCode = $8c7cc7c00e6bea0c$var$ExitCode.Failure;
    $8c7cc7c00e6bea0c$var$error(message);
}
$8c7cc7c00e6bea0c$exports.setFailed = $8c7cc7c00e6bea0c$var$setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */ function $8c7cc7c00e6bea0c$var$isDebug() {
    return process.env["RUNNER_DEBUG"] === "1";
}
$8c7cc7c00e6bea0c$exports.isDebug = $8c7cc7c00e6bea0c$var$isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */ function $8c7cc7c00e6bea0c$var$debug(message) {
    $3ecfdf502cef912d$exports.issueCommand("debug", {}, message);
}
$8c7cc7c00e6bea0c$exports.debug = $8c7cc7c00e6bea0c$var$debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */ function $8c7cc7c00e6bea0c$var$error(message, properties = {}) {
    $3ecfdf502cef912d$exports.issueCommand("error", $8edc3b90e976de31$exports.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
$8c7cc7c00e6bea0c$exports.error = $8c7cc7c00e6bea0c$var$error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */ function $8c7cc7c00e6bea0c$var$warning(message, properties = {}) {
    $3ecfdf502cef912d$exports.issueCommand("warning", $8edc3b90e976de31$exports.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
$8c7cc7c00e6bea0c$exports.warning = $8c7cc7c00e6bea0c$var$warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */ function $8c7cc7c00e6bea0c$var$notice(message, properties = {}) {
    $3ecfdf502cef912d$exports.issueCommand("notice", $8edc3b90e976de31$exports.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
$8c7cc7c00e6bea0c$exports.notice = $8c7cc7c00e6bea0c$var$notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */ function $8c7cc7c00e6bea0c$var$info(message) {
    process.stdout.write(message + $8c7cc7c00e6bea0c$var$os.EOL);
}
$8c7cc7c00e6bea0c$exports.info = $8c7cc7c00e6bea0c$var$info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */ function $8c7cc7c00e6bea0c$var$startGroup(name) {
    $3ecfdf502cef912d$exports.issue("group", name);
}
$8c7cc7c00e6bea0c$exports.startGroup = $8c7cc7c00e6bea0c$var$startGroup;
/**
 * End an output group.
 */ function $8c7cc7c00e6bea0c$var$endGroup() {
    $3ecfdf502cef912d$exports.issue("endgroup");
}
$8c7cc7c00e6bea0c$exports.endGroup = $8c7cc7c00e6bea0c$var$endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */ function $8c7cc7c00e6bea0c$var$group(name, fn) {
    return $8c7cc7c00e6bea0c$var$__awaiter(this, void 0, void 0, function*() {
        $8c7cc7c00e6bea0c$var$startGroup(name);
        let result;
        try {
            result = yield fn();
        } finally{
            $8c7cc7c00e6bea0c$var$endGroup();
        }
        return result;
    });
}
$8c7cc7c00e6bea0c$exports.group = $8c7cc7c00e6bea0c$var$group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function $8c7cc7c00e6bea0c$var$saveState(name, value) {
    const filePath = process.env["GITHUB_STATE"] || "";
    if (filePath) return $24012dd272ea9b9a$exports.issueFileCommand("STATE", $24012dd272ea9b9a$exports.prepareKeyValueMessage(name, value));
    $3ecfdf502cef912d$exports.issueCommand("save-state", {
        name: name
    }, $8edc3b90e976de31$exports.toCommandValue(value));
}
$8c7cc7c00e6bea0c$exports.saveState = $8c7cc7c00e6bea0c$var$saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */ function $8c7cc7c00e6bea0c$var$getState(name) {
    return process.env[`STATE_${name}`] || "";
}
$8c7cc7c00e6bea0c$exports.getState = $8c7cc7c00e6bea0c$var$getState;
function $8c7cc7c00e6bea0c$var$getIDToken(aud) {
    return $8c7cc7c00e6bea0c$var$__awaiter(this, void 0, void 0, function*() {
        return yield $0a8e739db5585665$exports.OidcClient.getIDToken(aud);
    });
}
$8c7cc7c00e6bea0c$exports.getIDToken = $8c7cc7c00e6bea0c$var$getIDToken;
var $f22ad59e6c74d205$exports = {};
"use strict";
var $f22ad59e6c74d205$var$__awaiter = $f22ad59e6c74d205$exports && $f22ad59e6c74d205$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($f22ad59e6c74d205$exports, "__esModule", {
    value: true
});
$f22ad59e6c74d205$exports.summary = $f22ad59e6c74d205$exports.markdownSummary = $f22ad59e6c74d205$exports.SUMMARY_DOCS_URL = $f22ad59e6c74d205$exports.SUMMARY_ENV_VAR = void 0;


const { access: $f22ad59e6c74d205$var$access, appendFile: $f22ad59e6c74d205$var$appendFile, writeFile: $f22ad59e6c74d205$var$writeFile } = $3B1P3$fs.promises;
$f22ad59e6c74d205$exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
$f22ad59e6c74d205$exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
class $f22ad59e6c74d205$var$Summary {
    constructor(){
        this._buffer = "";
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */ filePath() {
        return $f22ad59e6c74d205$var$__awaiter(this, void 0, void 0, function*() {
            if (this._filePath) return this._filePath;
            const pathFromEnv = process.env[$f22ad59e6c74d205$exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${$f22ad59e6c74d205$exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            try {
                yield $f22ad59e6c74d205$var$access(pathFromEnv, $3B1P3$fs.constants.R_OK | $3B1P3$fs.constants.W_OK);
            } catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */ wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value])=>` ${key}="${value}"`).join("");
        if (!content) return `<${tag}${htmlAttrs}>`;
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */ write(options) {
        return $f22ad59e6c74d205$var$__awaiter(this, void 0, void 0, function*() {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? $f22ad59e6c74d205$var$writeFile : $f22ad59e6c74d205$var$appendFile;
            yield writeFunc(filePath, this._buffer, {
                encoding: "utf8"
            });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */ clear() {
        return $f22ad59e6c74d205$var$__awaiter(this, void 0, void 0, function*() {
            return this.emptyBuffer().write({
                overwrite: true
            });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */ stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */ isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */ emptyBuffer() {
        this._buffer = "";
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */ addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */ addEOL() {
        return this.addRaw($3B1P3$os.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */ addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && {
            lang: lang
        });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */ addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item)=>this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */ addTable(rows) {
        const tableBody = rows.map((row)=>{
            const cells = row.map((cell)=>{
                if (typeof cell === "string") return this.wrap("td", cell);
                const { header: header, data: data, colspan: colspan, rowspan: rowspan } = cell;
                const tag = header ? "th" : "td";
                const attrs = Object.assign(Object.assign({}, colspan && {
                    colspan: colspan
                }), rowspan && {
                    rowspan: rowspan
                });
                return this.wrap(tag, data, attrs);
            }).join("");
            return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */ addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */ addImage(src, alt, options) {
        const { width: width, height: height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && {
            width: width
        }), height && {
            height: height
        });
        const element = this.wrap("img", null, Object.assign({
            src: src,
            alt: alt
        }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */ addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = [
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6"
        ].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */ addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */ addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */ addQuote(text, cite) {
        const attrs = Object.assign({}, cite && {
            cite: cite
        });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */ addLink(text, href) {
        const element = this.wrap("a", text, {
            href: href
        });
        return this.addRaw(element).addEOL();
    }
}
const $f22ad59e6c74d205$var$_summary = new $f22ad59e6c74d205$var$Summary();
/**
 * @deprecated use `core.summary`
 */ $f22ad59e6c74d205$exports.markdownSummary = $f22ad59e6c74d205$var$_summary;
$f22ad59e6c74d205$exports.summary = $f22ad59e6c74d205$var$_summary;


Object.defineProperty($8c7cc7c00e6bea0c$exports, "summary", {
    enumerable: true,
    get: function() {
        return $f22ad59e6c74d205$exports.summary;
    }
});

Object.defineProperty($8c7cc7c00e6bea0c$exports, "markdownSummary", {
    enumerable: true,
    get: function() {
        return $f22ad59e6c74d205$exports.markdownSummary;
    }
});
var $da8ef66be96b8d68$exports = {};
"use strict";
var $da8ef66be96b8d68$var$__createBinding = $da8ef66be96b8d68$exports && $da8ef66be96b8d68$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $da8ef66be96b8d68$var$__setModuleDefault = $da8ef66be96b8d68$exports && $da8ef66be96b8d68$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $da8ef66be96b8d68$var$__importStar = $da8ef66be96b8d68$exports && $da8ef66be96b8d68$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $da8ef66be96b8d68$var$__createBinding(result, mod, k);
    }
    $da8ef66be96b8d68$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($da8ef66be96b8d68$exports, "__esModule", {
    value: true
});
$da8ef66be96b8d68$exports.toPlatformPath = $da8ef66be96b8d68$exports.toWin32Path = $da8ef66be96b8d68$exports.toPosixPath = void 0;

const $da8ef66be96b8d68$var$path = $da8ef66be96b8d68$var$__importStar($3B1P3$path);
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */ function $da8ef66be96b8d68$var$toPosixPath(pth) {
    return pth.replace(/[\\]/g, "/");
}
$da8ef66be96b8d68$exports.toPosixPath = $da8ef66be96b8d68$var$toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */ function $da8ef66be96b8d68$var$toWin32Path(pth) {
    return pth.replace(/[/]/g, "\\");
}
$da8ef66be96b8d68$exports.toWin32Path = $da8ef66be96b8d68$var$toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */ function $da8ef66be96b8d68$var$toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, $da8ef66be96b8d68$var$path.sep);
}
$da8ef66be96b8d68$exports.toPlatformPath = $da8ef66be96b8d68$var$toPlatformPath;


Object.defineProperty($8c7cc7c00e6bea0c$exports, "toPosixPath", {
    enumerable: true,
    get: function() {
        return $da8ef66be96b8d68$exports.toPosixPath;
    }
});
Object.defineProperty($8c7cc7c00e6bea0c$exports, "toWin32Path", {
    enumerable: true,
    get: function() {
        return $da8ef66be96b8d68$exports.toWin32Path;
    }
});
Object.defineProperty($8c7cc7c00e6bea0c$exports, "toPlatformPath", {
    enumerable: true,
    get: function() {
        return $da8ef66be96b8d68$exports.toPlatformPath;
    }
});


var $b2ffea015edc5d5f$exports = {};
"use strict";
var $b2ffea015edc5d5f$var$__createBinding = $b2ffea015edc5d5f$exports && $b2ffea015edc5d5f$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $b2ffea015edc5d5f$var$__setModuleDefault = $b2ffea015edc5d5f$exports && $b2ffea015edc5d5f$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $b2ffea015edc5d5f$var$__importStar = $b2ffea015edc5d5f$exports && $b2ffea015edc5d5f$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $b2ffea015edc5d5f$var$__createBinding(result, mod, k);
    }
    $b2ffea015edc5d5f$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($b2ffea015edc5d5f$exports, "__esModule", {
    value: true
});
$b2ffea015edc5d5f$exports.getOctokit = $b2ffea015edc5d5f$exports.context = void 0;

const $b2ffea015edc5d5f$var$Context = $b2ffea015edc5d5f$var$__importStar((parcelRequire("tRvdu")));
var $34a39b9cfdd3c6a2$exports = {};
"use strict";
var $34a39b9cfdd3c6a2$var$__createBinding = $34a39b9cfdd3c6a2$exports && $34a39b9cfdd3c6a2$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $34a39b9cfdd3c6a2$var$__setModuleDefault = $34a39b9cfdd3c6a2$exports && $34a39b9cfdd3c6a2$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $34a39b9cfdd3c6a2$var$__importStar = $34a39b9cfdd3c6a2$exports && $34a39b9cfdd3c6a2$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $34a39b9cfdd3c6a2$var$__createBinding(result, mod, k);
    }
    $34a39b9cfdd3c6a2$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($34a39b9cfdd3c6a2$exports, "__esModule", {
    value: true
});
$34a39b9cfdd3c6a2$exports.getOctokitOptions = $34a39b9cfdd3c6a2$exports.GitHub = $34a39b9cfdd3c6a2$exports.defaults = $34a39b9cfdd3c6a2$exports.context = void 0;

const $34a39b9cfdd3c6a2$var$Context = $34a39b9cfdd3c6a2$var$__importStar((parcelRequire("tRvdu")));

const $34a39b9cfdd3c6a2$var$Utils = $34a39b9cfdd3c6a2$var$__importStar((parcelRequire("eWsme")));
// pkg/dist-src/index.js
function $54242adf02630d3d$export$7935961ef7719cb0() {
    if (typeof navigator === "object" && "userAgent" in navigator) return navigator.userAgent;
    if (typeof process === "object" && "version" in process) return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
    return "<environment undetectable>";
}


var $0a93a511d39a81c4$exports = {};
var $fae842d03e907b82$exports = {};
$fae842d03e907b82$exports = $fae842d03e907b82$var$register;
function $fae842d03e907b82$var$register(state, name, method, options) {
    if (typeof method !== "function") throw new Error("method for before hook must be a function");
    if (!options) options = {};
    if (Array.isArray(name)) return name.reverse().reduce(function(callback, name) {
        return $fae842d03e907b82$var$register.bind(null, state, name, callback, options);
    }, method)();
    return Promise.resolve().then(function() {
        if (!state.registry[name]) return method(options);
        return state.registry[name].reduce(function(method, registered) {
            return registered.hook.bind(null, method, options);
        }, method)();
    });
}


var $f7886b14e9c69088$exports = {};
$f7886b14e9c69088$exports = $f7886b14e9c69088$var$addHook;
function $f7886b14e9c69088$var$addHook(state, kind, name, hook) {
    var orig = hook;
    if (!state.registry[name]) state.registry[name] = [];
    if (kind === "before") hook = function(method, options) {
        return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
    };
    if (kind === "after") hook = function(method, options) {
        var result;
        return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
        }).then(function() {
            return result;
        });
    };
    if (kind === "error") hook = function(method, options) {
        return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
            return orig(error, options);
        });
    };
    state.registry[name].push({
        hook: hook,
        orig: orig
    });
}


var $6aaa8e406107daaf$exports = {};
$6aaa8e406107daaf$exports = $6aaa8e406107daaf$var$removeHook;
function $6aaa8e406107daaf$var$removeHook(state, name, method) {
    if (!state.registry[name]) return;
    var index = state.registry[name].map(function(registered) {
        return registered.orig;
    }).indexOf(method);
    if (index === -1) return;
    state.registry[name].splice(index, 1);
}


// bind with array of arguments: https://stackoverflow.com/a/21792913
var $0a93a511d39a81c4$var$bind = Function.bind;
var $0a93a511d39a81c4$var$bindable = $0a93a511d39a81c4$var$bind.bind($0a93a511d39a81c4$var$bind);
function $0a93a511d39a81c4$var$bindApi(hook, state, name) {
    var removeHookRef = $0a93a511d39a81c4$var$bindable($6aaa8e406107daaf$exports, null).apply(null, name ? [
        state,
        name
    ] : [
        state
    ]);
    hook.api = {
        remove: removeHookRef
    };
    hook.remove = removeHookRef;
    [
        "before",
        "error",
        "after",
        "wrap"
    ].forEach(function(kind) {
        var args = name ? [
            state,
            kind,
            name
        ] : [
            state,
            kind
        ];
        hook[kind] = hook.api[kind] = $0a93a511d39a81c4$var$bindable($f7886b14e9c69088$exports, null).apply(null, args);
    });
}
function $0a93a511d39a81c4$var$HookSingular() {
    var singularHookName = "h";
    var singularHookState = {
        registry: {}
    };
    var singularHook = $fae842d03e907b82$exports.bind(null, singularHookState, singularHookName);
    $0a93a511d39a81c4$var$bindApi(singularHook, singularHookState, singularHookName);
    return singularHook;
}
function $0a93a511d39a81c4$var$HookCollection() {
    var state = {
        registry: {}
    };
    var hook = $fae842d03e907b82$exports.bind(null, state);
    $0a93a511d39a81c4$var$bindApi(hook, state);
    return hook;
}
var $0a93a511d39a81c4$var$collectionHookDeprecationMessageDisplayed = false;
function $0a93a511d39a81c4$var$Hook() {
    if (!$0a93a511d39a81c4$var$collectionHookDeprecationMessageDisplayed) {
        console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
        $0a93a511d39a81c4$var$collectionHookDeprecationMessageDisplayed = true;
    }
    return $0a93a511d39a81c4$var$HookCollection();
}
$0a93a511d39a81c4$var$Hook.Singular = $0a93a511d39a81c4$var$HookSingular.bind();
$0a93a511d39a81c4$var$Hook.Collection = $0a93a511d39a81c4$var$HookCollection.bind();
$0a93a511d39a81c4$exports = $0a93a511d39a81c4$var$Hook;
// expose constructors as a named property for TypeScript
$0a93a511d39a81c4$exports.Hook = $0a93a511d39a81c4$var$Hook;
$0a93a511d39a81c4$exports.Singular = $0a93a511d39a81c4$var$Hook.Singular;
$0a93a511d39a81c4$exports.Collection = $0a93a511d39a81c4$var$Hook.Collection;



function $c67859953cb4fc7e$export$425260add75dc677(object) {
    if (!object) return {};
    return Object.keys(object).reduce((newObj, key)=>{
        newObj[key.toLowerCase()] = object[key];
        return newObj;
    }, {});
}


/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ function $b293229275f92b63$var$isObject(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
}
function $b293229275f92b63$export$53b83ca8eaab0383(o) {
    var ctor, prot;
    if ($b293229275f92b63$var$isObject(o) === false) return false;
    // If has modified constructor
    ctor = o.constructor;
    if (ctor === undefined) return true;
    // If has modified prototype
    prot = ctor.prototype;
    if ($b293229275f92b63$var$isObject(prot) === false) return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) return false;
    // Most likely a plain Object
    return true;
}


function $76201426892e2c5b$export$dd702b3c8240390c(defaults, options) {
    const result = Object.assign({}, defaults);
    Object.keys(options).forEach((key)=>{
        if ((0, $b293229275f92b63$export$53b83ca8eaab0383)(options[key])) {
            if (!(key in defaults)) Object.assign(result, {
                [key]: options[key]
            });
            else result[key] = $76201426892e2c5b$export$dd702b3c8240390c(defaults[key], options[key]);
        } else Object.assign(result, {
            [key]: options[key]
        });
    });
    return result;
}


function $09f8d16f3e2c2deb$export$f36f7bb171c0963e(obj) {
    for(const key in obj)if (obj[key] === void 0) delete obj[key];
    return obj;
}


function $c23ddbb56ea63338$export$4950aa0f605343fb(defaults, route, options) {
    if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? {
            method: method,
            url: url
        } : {
            url: method
        }, options);
    } else options = Object.assign({}, route);
    options.headers = (0, $c67859953cb4fc7e$export$425260add75dc677)(options.headers);
    (0, $09f8d16f3e2c2deb$export$f36f7bb171c0963e)(options);
    (0, $09f8d16f3e2c2deb$export$f36f7bb171c0963e)(options.headers);
    const mergedOptions = (0, $76201426892e2c5b$export$dd702b3c8240390c)(defaults || {}, options);
    if (options.url === "/graphql") {
        var _defaults_mediaType_previews;
        if (defaults && ((_defaults_mediaType_previews = defaults.mediaType.previews) === null || _defaults_mediaType_previews === void 0 ? void 0 : _defaults_mediaType_previews.length)) mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview)=>!mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
        mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview)=>preview.replace(/-preview/, ""));
    }
    return mergedOptions;
}


function $c0f9824d92fb90ac$export$35931de892707090(url, parameters) {
    const separator = /\?/.test(url) ? "&" : "?";
    const names = Object.keys(parameters);
    if (names.length === 0) return url;
    return url + separator + names.map((name)=>{
        if (name === "q") return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        return `${name}=${encodeURIComponent(parameters[name])}`;
    }).join("&");
}


const $9af2b7f58873966f$var$urlVariableRegex = /\{[^}]+\}/g;
function $9af2b7f58873966f$var$removeNonChars(variableName) {
    return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function $9af2b7f58873966f$export$7ac48c959809d49(url) {
    const matches = url.match($9af2b7f58873966f$var$urlVariableRegex);
    if (!matches) return [];
    return matches.map($9af2b7f58873966f$var$removeNonChars).reduce((a, b)=>a.concat(b), []);
}


function $348ba7f94185410d$export$30a06c8d3562193f(object, keysToOmit) {
    return Object.keys(object).filter((option)=>!keysToOmit.includes(option)).reduce((obj, key)=>{
        obj[key] = object[key];
        return obj;
    }, {});
}


function $62e3360244d98167$var$encodeReserved(str) {
    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        return part;
    }).join("");
}
function $62e3360244d98167$var$encodeUnreserved(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
function $62e3360244d98167$var$encodeValue(operator, value, key) {
    value = operator === "+" || operator === "#" ? $62e3360244d98167$var$encodeReserved(value) : $62e3360244d98167$var$encodeUnreserved(value);
    if (key) return $62e3360244d98167$var$encodeUnreserved(key) + "=" + value;
    else return value;
}
function $62e3360244d98167$var$isDefined(value) {
    return value !== void 0 && value !== null;
}
function $62e3360244d98167$var$isKeyOperator(operator) {
    return operator === ";" || operator === "&" || operator === "?";
}
function $62e3360244d98167$var$getValues(context, operator, key, modifier) {
    var value = context[key], result = [];
    if ($62e3360244d98167$var$isDefined(value) && value !== "") {
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
            value = value.toString();
            if (modifier && modifier !== "*") value = value.substring(0, parseInt(modifier, 10));
            result.push($62e3360244d98167$var$encodeValue(operator, value, $62e3360244d98167$var$isKeyOperator(operator) ? key : ""));
        } else if (modifier === "*") {
            if (Array.isArray(value)) value.filter($62e3360244d98167$var$isDefined).forEach(function(value2) {
                result.push($62e3360244d98167$var$encodeValue(operator, value2, $62e3360244d98167$var$isKeyOperator(operator) ? key : ""));
            });
            else Object.keys(value).forEach(function(k) {
                if ($62e3360244d98167$var$isDefined(value[k])) result.push($62e3360244d98167$var$encodeValue(operator, value[k], k));
            });
        } else {
            const tmp = [];
            if (Array.isArray(value)) value.filter($62e3360244d98167$var$isDefined).forEach(function(value2) {
                tmp.push($62e3360244d98167$var$encodeValue(operator, value2));
            });
            else Object.keys(value).forEach(function(k) {
                if ($62e3360244d98167$var$isDefined(value[k])) {
                    tmp.push($62e3360244d98167$var$encodeUnreserved(k));
                    tmp.push($62e3360244d98167$var$encodeValue(operator, value[k].toString()));
                }
            });
            if ($62e3360244d98167$var$isKeyOperator(operator)) result.push($62e3360244d98167$var$encodeUnreserved(key) + "=" + tmp.join(","));
            else if (tmp.length !== 0) result.push(tmp.join(","));
        }
    } else {
        if (operator === ";") {
            if ($62e3360244d98167$var$isDefined(value)) result.push($62e3360244d98167$var$encodeUnreserved(key));
        } else if (value === "" && (operator === "&" || operator === "?")) result.push($62e3360244d98167$var$encodeUnreserved(key) + "=");
        else if (value === "") result.push("");
    }
    return result;
}
function $62e3360244d98167$export$7a5253c0f62e0150(template) {
    return {
        expand: $62e3360244d98167$var$expand.bind(null, template)
    };
}
function $62e3360244d98167$var$expand(template, context) {
    var operators = [
        "+",
        "#",
        ".",
        "/",
        ";",
        "?",
        "&"
    ];
    return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
        if (expression) {
            let operator = "";
            const values = [];
            if (operators.indexOf(expression.charAt(0)) !== -1) {
                operator = expression.charAt(0);
                expression = expression.substr(1);
            }
            expression.split(/,/g).forEach(function(variable) {
                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                values.push($62e3360244d98167$var$getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
            });
            if (operator && operator !== "+") {
                var separator = ",";
                if (operator === "?") separator = "&";
                else if (operator !== "#") separator = operator;
                return (values.length !== 0 ? operator : "") + values.join(separator);
            } else return values.join(",");
        } else return $62e3360244d98167$var$encodeReserved(literal);
    });
}


function $78737495cd80c420$export$98e6a39c04603d36(options) {
    let method = options.method.toUpperCase();
    let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
    let headers = Object.assign({}, options.headers);
    let body;
    let parameters = (0, $348ba7f94185410d$export$30a06c8d3562193f)(options, [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "mediaType"
    ]);
    const urlVariableNames = (0, $9af2b7f58873966f$export$7ac48c959809d49)(url);
    url = (0, $62e3360244d98167$export$7a5253c0f62e0150)(url).expand(parameters);
    if (!/^http/.test(url)) url = options.baseUrl + url;
    const omittedParameters = Object.keys(options).filter((option)=>urlVariableNames.includes(option)).concat("baseUrl");
    const remainingParameters = (0, $348ba7f94185410d$export$30a06c8d3562193f)(parameters, omittedParameters);
    const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
    if (!isBinaryRequest) {
        var _options_mediaType_previews;
        if (options.mediaType.format) headers.accept = headers.accept.split(/,/).map((format)=>format.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
        if (url.endsWith("/graphql")) {
            if ((_options_mediaType_previews = options.mediaType.previews) === null || _options_mediaType_previews === void 0 ? void 0 : _options_mediaType_previews.length) {
                const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
                headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview)=>{
                    const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
                    return `application/vnd.github.${preview}-preview${format}`;
                }).join(",");
            }
        }
    }
    if ([
        "GET",
        "HEAD"
    ].includes(method)) url = (0, $c0f9824d92fb90ac$export$35931de892707090)(url, remainingParameters);
    else {
        if ("data" in remainingParameters) body = remainingParameters.data;
        else if (Object.keys(remainingParameters).length) body = remainingParameters;
    }
    if (!headers["content-type"] && typeof body !== "undefined") headers["content-type"] = "application/json; charset=utf-8";
    if ([
        "PATCH",
        "PUT"
    ].includes(method) && typeof body === "undefined") body = "";
    return Object.assign({
        method: method,
        url: url,
        headers: headers
    }, typeof body !== "undefined" ? {
        body: body
    } : null, options.request ? {
        request: options.request
    } : null);
}


function $9a266da4a0ce567d$export$cad87164d6e13823(defaults, route, options) {
    return (0, $78737495cd80c420$export$98e6a39c04603d36)((0, $c23ddbb56ea63338$export$4950aa0f605343fb)(defaults, route, options));
}




function $c39cb395ecd9b5af$export$4df9c0969a9e0160(oldDefaults, newDefaults) {
    const DEFAULTS = (0, $c23ddbb56ea63338$export$4950aa0f605343fb)(oldDefaults, newDefaults);
    const endpoint = (0, $9a266da4a0ce567d$export$cad87164d6e13823).bind(null, DEFAULTS);
    return Object.assign(endpoint, {
        DEFAULTS: DEFAULTS,
        defaults: $c39cb395ecd9b5af$export$4df9c0969a9e0160.bind(null, DEFAULTS),
        merge: (0, $c23ddbb56ea63338$export$4950aa0f605343fb).bind(null, DEFAULTS),
        parse: $78737495cd80c420$export$98e6a39c04603d36
    });
}



const $115a64f7ee26966c$export$a4ad2735b021c132 = "9.0.1";


const $dcaa242efede6837$var$userAgent = `octokit-endpoint.js/${(0, $115a64f7ee26966c$export$a4ad2735b021c132)} ${(0, $54242adf02630d3d$export$7935961ef7719cb0)()}`;
const $dcaa242efede6837$export$f484e977a69c6ba6 = {
    method: "GET",
    baseUrl: "https://api.github.com",
    headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": $dcaa242efede6837$var$userAgent
    },
    mediaType: {
        format: ""
    }
};


const $2f44ae37d543cff7$export$125e2b775860041f = (0, $c39cb395ecd9b5af$export$4df9c0969a9e0160)(null, (0, $dcaa242efede6837$export$f484e977a69c6ba6));



const $fc9e5eb17339decb$export$a4ad2735b021c132 = "8.1.4";



class $f21435d3efab1819$export$d5e40bdbb672dd52 extends Error {
    constructor(message){
        super(message); // Maintains proper stack trace (only available on V8)
        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
        this.name = "Deprecation";
    }
}


var $ce4aa74c0894da8e$exports = {};
var $6cc7b8104a34f7f8$exports = {};
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
$6cc7b8104a34f7f8$exports = $6cc7b8104a34f7f8$var$wrappy;
function $6cc7b8104a34f7f8$var$wrappy(fn, cb) {
    if (fn && cb) return $6cc7b8104a34f7f8$var$wrappy(fn)(cb);
    if (typeof fn !== "function") throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
    });
    return wrapper;
    function wrapper() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        var ret = fn.apply(this, args);
        var cb = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb) Object.keys(cb).forEach(function(k) {
            ret[k] = cb[k];
        });
        return ret;
    }
}


$ce4aa74c0894da8e$exports = $6cc7b8104a34f7f8$exports($ce4aa74c0894da8e$var$once);
$ce4aa74c0894da8e$exports.strict = $6cc7b8104a34f7f8$exports($ce4aa74c0894da8e$var$onceStrict);
$ce4aa74c0894da8e$var$once.proto = $ce4aa74c0894da8e$var$once(function() {
    Object.defineProperty(Function.prototype, "once", {
        value: function() {
            return $ce4aa74c0894da8e$var$once(this);
        },
        configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
            return $ce4aa74c0894da8e$var$onceStrict(this);
        },
        configurable: true
    });
});
function $ce4aa74c0894da8e$var$once(fn) {
    var f = function() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
}
function $ce4aa74c0894da8e$var$onceStrict(fn) {
    var f = function() {
        if (f.called) throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    var name = fn.name || "Function wrapped with `once`";
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f;
}


const $48eb7c6150c68d9d$var$logOnceCode = (0, (/*@__PURE__*/$parcel$interopDefault($ce4aa74c0894da8e$exports)))((deprecation)=>console.warn(deprecation));
const $48eb7c6150c68d9d$var$logOnceHeaders = (0, (/*@__PURE__*/$parcel$interopDefault($ce4aa74c0894da8e$exports)))((deprecation)=>console.warn(deprecation));
class $48eb7c6150c68d9d$export$43ee7d0e4f429743 extends Error {
    constructor(message, statusCode, options){
        super(message);
        if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") headers = options.headers;
        if ("response" in options) {
            this.response = options.response;
            headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
        });
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
            get () {
                $48eb7c6150c68d9d$var$logOnceCode(new (0, $f21435d3efab1819$export$d5e40bdbb672dd52)("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
                return statusCode;
            }
        });
        Object.defineProperty(this, "headers", {
            get () {
                $48eb7c6150c68d9d$var$logOnceHeaders(new (0, $f21435d3efab1819$export$d5e40bdbb672dd52)("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
                return headers || {};
            }
        });
    }
}


function $80fc4f35218014a8$export$2e2bcd8739ae039(response) {
    return response.arrayBuffer();
}


function $bc74449881b0aa70$export$2e2bcd8739ae039(requestOptions) {
    var _requestOptions_request, _requestOptions_request1, _requestOptions_request2;
    const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
    const parseSuccessResponseBody = ((_requestOptions_request = requestOptions.request) === null || _requestOptions_request === void 0 ? void 0 : _requestOptions_request.parseSuccessResponseBody) !== false;
    if ((0, $b293229275f92b63$export$53b83ca8eaab0383)(requestOptions.body) || Array.isArray(requestOptions.body)) requestOptions.body = JSON.stringify(requestOptions.body);
    let headers = {};
    let status;
    let url;
    let { fetch: fetch } = globalThis;
    if ((_requestOptions_request1 = requestOptions.request) === null || _requestOptions_request1 === void 0 ? void 0 : _requestOptions_request1.fetch) fetch = requestOptions.request.fetch;
    if (!fetch) throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");
    return fetch(requestOptions.url, {
        method: requestOptions.method,
        body: requestOptions.body,
        headers: requestOptions.headers,
        signal: (_requestOptions_request2 = requestOptions.request) === null || _requestOptions_request2 === void 0 ? void 0 : _requestOptions_request2.signal,
        // duplex must be set if request.body is ReadableStream or Async Iterables.
        // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
        ...requestOptions.body && {
            duplex: "half"
        }
    }).then(async (response)=>{
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers)headers[keyAndValue[0]] = keyAndValue[1];
        if ("deprecation" in headers) {
            const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
            const deprecationLink = matches && matches.pop();
            log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
        }
        if (status === 204 || status === 205) return;
        if (requestOptions.method === "HEAD") {
            if (status < 400) return;
            throw new (0, $48eb7c6150c68d9d$export$43ee7d0e4f429743)(response.statusText, status, {
                response: {
                    url: url,
                    status: status,
                    headers: headers,
                    data: void 0
                },
                request: requestOptions
            });
        }
        if (status === 304) throw new (0, $48eb7c6150c68d9d$export$43ee7d0e4f429743)("Not modified", status, {
            response: {
                url: url,
                status: status,
                headers: headers,
                data: await $bc74449881b0aa70$var$getResponseData(response)
            },
            request: requestOptions
        });
        if (status >= 400) {
            const data = await $bc74449881b0aa70$var$getResponseData(response);
            const error = new (0, $48eb7c6150c68d9d$export$43ee7d0e4f429743)($bc74449881b0aa70$var$toErrorMessage(data), status, {
                response: {
                    url: url,
                    status: status,
                    headers: headers,
                    data: data
                },
                request: requestOptions
            });
            throw error;
        }
        return parseSuccessResponseBody ? await $bc74449881b0aa70$var$getResponseData(response) : response.body;
    }).then((data)=>{
        return {
            status: status,
            url: url,
            headers: headers,
            data: data
        };
    }).catch((error)=>{
        if (error instanceof (0, $48eb7c6150c68d9d$export$43ee7d0e4f429743)) throw error;
        else if (error.name === "AbortError") throw error;
        let message = error.message;
        if (error.name === "TypeError" && "cause" in error) {
            if (error.cause instanceof Error) message = error.cause.message;
            else if (typeof error.cause === "string") message = error.cause;
        }
        throw new (0, $48eb7c6150c68d9d$export$43ee7d0e4f429743)(message, 500, {
            request: requestOptions
        });
    });
}
async function $bc74449881b0aa70$var$getResponseData(response) {
    const contentType = response.headers.get("content-type");
    if (/application\/json/.test(contentType)) return response.json();
    if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) return response.text();
    return (0, $80fc4f35218014a8$export$2e2bcd8739ae039)(response);
}
function $bc74449881b0aa70$var$toErrorMessage(data) {
    if (typeof data === "string") return data;
    if ("message" in data) {
        if (Array.isArray(data.errors)) return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
        return data.message;
    }
    return `Unknown error: ${JSON.stringify(data)}`;
}


function $df0bc54c206bfdb9$export$2e2bcd8739ae039(oldEndpoint, newDefaults) {
    const endpoint = oldEndpoint.defaults(newDefaults);
    const newApi = function(route, parameters) {
        const endpointOptions = endpoint.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) return (0, $bc74449881b0aa70$export$2e2bcd8739ae039)(endpoint.parse(endpointOptions));
        const request = (route2, parameters2)=>{
            return (0, $bc74449881b0aa70$export$2e2bcd8739ae039)(endpoint.parse(endpoint.merge(route2, parameters2)));
        };
        Object.assign(request, {
            endpoint: endpoint,
            defaults: $df0bc54c206bfdb9$export$2e2bcd8739ae039.bind(null, endpoint)
        });
        return endpointOptions.request.hook(request, endpointOptions);
    };
    return Object.assign(newApi, {
        endpoint: endpoint,
        defaults: $df0bc54c206bfdb9$export$2e2bcd8739ae039.bind(null, endpoint)
    });
}


const $e3f5fad3b05ea053$export$b5fe3f66a567bec0 = (0, $df0bc54c206bfdb9$export$2e2bcd8739ae039)((0, $2f44ae37d543cff7$export$125e2b775860041f), {
    headers: {
        "user-agent": `octokit-request.js/${(0, $fc9e5eb17339decb$export$a4ad2735b021c132)} ${(0, $54242adf02630d3d$export$7935961ef7719cb0)()}`
    }
});


// pkg/dist-src/index.js


// pkg/dist-src/version.js
var $60ddf0afc740d123$var$VERSION = "7.0.2";
// pkg/dist-src/error.js
function $60ddf0afc740d123$var$_buildMessageForResponseErrors(data) {
    return `Request failed due to following response errors:
` + data.errors.map((e)=>` - ${e.message}`).join("\n");
}
var $60ddf0afc740d123$export$d19deff0ec585725 = class extends Error {
    constructor(request2, headers, response){
        super($60ddf0afc740d123$var$_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
    }
};
// pkg/dist-src/graphql.js
var $60ddf0afc740d123$var$NON_VARIABLE_OPTIONS = [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "query",
    "mediaType"
];
var $60ddf0afc740d123$var$FORBIDDEN_VARIABLE_OPTIONS = [
    "query",
    "method",
    "url"
];
var $60ddf0afc740d123$var$GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function $60ddf0afc740d123$var$graphql(request2, query, options) {
    if (options) {
        if (typeof query === "string" && "query" in options) return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
        for(const key in options){
            if (!$60ddf0afc740d123$var$FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;
            return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
        }
    }
    const parsedOptions = typeof query === "string" ? Object.assign({
        query: query
    }, options) : query;
    const requestOptions = Object.keys(parsedOptions).reduce((result, key)=>{
        if ($60ddf0afc740d123$var$NON_VARIABLE_OPTIONS.includes(key)) {
            result[key] = parsedOptions[key];
            return result;
        }
        if (!result.variables) result.variables = {};
        result.variables[key] = parsedOptions[key];
        return result;
    }, {});
    const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
    if ($60ddf0afc740d123$var$GHES_V3_SUFFIX_REGEX.test(baseUrl)) requestOptions.url = baseUrl.replace($60ddf0afc740d123$var$GHES_V3_SUFFIX_REGEX, "/api/graphql");
    return request2(requestOptions).then((response)=>{
        if (response.data.errors) {
            const headers = {};
            for (const key of Object.keys(response.headers))headers[key] = response.headers[key];
            throw new $60ddf0afc740d123$export$d19deff0ec585725(requestOptions, headers, response.data);
        }
        return response.data.data;
    });
}
// pkg/dist-src/with-defaults.js
function $60ddf0afc740d123$var$withDefaults(request2, newDefaults) {
    const newRequest = request2.defaults(newDefaults);
    const newApi = (query, options)=>{
        return $60ddf0afc740d123$var$graphql(newRequest, query, options);
    };
    return Object.assign(newApi, {
        defaults: $60ddf0afc740d123$var$withDefaults.bind(null, newRequest),
        endpoint: newRequest.endpoint
    });
}
// pkg/dist-src/index.js
var $60ddf0afc740d123$export$1eb4e7c0ed67b035 = $60ddf0afc740d123$var$withDefaults((0, $e3f5fad3b05ea053$export$b5fe3f66a567bec0), {
    headers: {
        "user-agent": `octokit-graphql.js/${$60ddf0afc740d123$var$VERSION} ${(0, $54242adf02630d3d$export$7935961ef7719cb0)()}`
    },
    method: "POST",
    url: "/graphql"
});
function $60ddf0afc740d123$export$9eb07bf38af78249(customRequest) {
    return $60ddf0afc740d123$var$withDefaults(customRequest, {
        method: "POST",
        url: "/graphql"
    });
}


const $dbceb4c261800e7a$var$REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
const $dbceb4c261800e7a$var$REGEX_IS_INSTALLATION = /^ghs_/;
const $dbceb4c261800e7a$var$REGEX_IS_USER_TO_SERVER = /^ghu_/;
async function $dbceb4c261800e7a$export$73693bad9f5880b0(token) {
    const isApp = token.split(/\./).length === 3;
    const isInstallation = $dbceb4c261800e7a$var$REGEX_IS_INSTALLATION_LEGACY.test(token) || $dbceb4c261800e7a$var$REGEX_IS_INSTALLATION.test(token);
    const isUserToServer = $dbceb4c261800e7a$var$REGEX_IS_USER_TO_SERVER.test(token);
    const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
    return {
        type: "token",
        token: token,
        tokenType: tokenType
    };
}


function $52421f5a43aa3ff8$export$aa3ffe13abc35cf8(token) {
    if (token.split(/\./).length === 3) return `bearer ${token}`;
    return `token ${token}`;
}


async function $f41ff32f8fcb1420$export$1062a250c78723ea(token, request, route, parameters) {
    const endpoint = request.endpoint.merge(route, parameters);
    endpoint.headers.authorization = (0, $52421f5a43aa3ff8$export$aa3ffe13abc35cf8)(token);
    return request(endpoint);
}


const $930020f2c59aa639$export$acf0006d85231cb6 = function createTokenAuth2(token) {
    if (!token) throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
    if (typeof token !== "string") throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
    token = token.replace(/^(token|bearer) +/i, "");
    return Object.assign((0, $dbceb4c261800e7a$export$73693bad9f5880b0).bind(null, token), {
        hook: (0, $f41ff32f8fcb1420$export$1062a250c78723ea).bind(null, token)
    });
};


// pkg/dist-src/version.js
var $54b3cc8c9f7e5ec5$var$VERSION = "5.0.1";
// pkg/dist-src/index.js
var $54b3cc8c9f7e5ec5$export$d19f1ac68c042717 = class {
    static #_ = this.VERSION = $54b3cc8c9f7e5ec5$var$VERSION;
    static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
            constructor(...args){
                const options = args[0] || {};
                if (typeof defaults === "function") {
                    super(defaults(options));
                    return;
                }
                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
                    userAgent: `${options.userAgent} ${defaults.userAgent}`
                } : null));
            }
        };
        return OctokitWithDefaults;
    }
    static #_2 = this.plugins = [];
    /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */ static plugin(...newPlugins) {
        const currentPlugins = this.plugins;
        const NewOctokit = class extends this {
            static #_ = this.plugins = currentPlugins.concat(newPlugins.filter((plugin)=>!currentPlugins.includes(plugin)));
        };
        return NewOctokit;
    }
    constructor(options = {}){
        const hook = new (0, $0a93a511d39a81c4$exports.Collection)();
        const requestDefaults = {
            baseUrl: (0, $e3f5fad3b05ea053$export$b5fe3f66a567bec0).endpoint.DEFAULTS.baseUrl,
            headers: {},
            request: Object.assign({}, options.request, {
                // @ts-ignore internal usage only, no need to type
                hook: hook.bind(null, "request")
            }),
            mediaType: {
                previews: [],
                format: ""
            }
        };
        requestDefaults.headers["user-agent"] = [
            options.userAgent,
            `octokit-core.js/${$54b3cc8c9f7e5ec5$var$VERSION} ${(0, $54242adf02630d3d$export$7935961ef7719cb0)()}`
        ].filter(Boolean).join(" ");
        if (options.baseUrl) requestDefaults.baseUrl = options.baseUrl;
        if (options.previews) requestDefaults.mediaType.previews = options.previews;
        if (options.timeZone) requestDefaults.headers["time-zone"] = options.timeZone;
        this.request = (0, $e3f5fad3b05ea053$export$b5fe3f66a567bec0).defaults(requestDefaults);
        this.graphql = (0, $60ddf0afc740d123$export$9eb07bf38af78249)(this.request).defaults(requestDefaults);
        this.log = Object.assign({
            debug: ()=>{},
            info: ()=>{},
            warn: console.warn.bind(console),
            error: console.error.bind(console)
        }, options.log);
        this.hook = hook;
        if (!options.authStrategy) {
            if (!options.auth) this.auth = async ()=>({
                    type: "unauthenticated"
                });
            else {
                const auth = (0, $930020f2c59aa639$export$acf0006d85231cb6)(options.auth);
                hook.wrap("request", auth.hook);
                this.auth = auth;
            }
        } else {
            const { authStrategy: authStrategy, ...otherOptions } = options;
            const auth = authStrategy(Object.assign({
                request: this.request,
                log: this.log,
                // we pass the current octokit instance as well as its constructor options
                // to allow for authentication strategies that return a new octokit instance
                // that shares the same internal state as the current one. The original
                // requirement for this was the "event-octokit" authentication strategy
                // of https://github.com/probot/octokit-auth-probot.
                octokit: this,
                octokitOptions: otherOptions
            }, options.auth));
            hook.wrap("request", auth.hook);
            this.auth = auth;
        }
        const classConstructor = this.constructor;
        classConstructor.plugins.forEach((plugin)=>{
            Object.assign(this, plugin(this, options));
        });
    }
};


const $44493116c13d7e12$export$a4ad2735b021c132 = "10.0.1";


const $e1915e859240105f$var$Endpoints = {
    actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [
            "POST /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        addCustomLabelsToSelfHostedRunnerForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgVariable: [
            "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        approveWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
        ],
        cancelWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
        ],
        createEnvironmentVariable: [
            "POST /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        createOrUpdateEnvironmentSecret: [
            "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        createOrUpdateOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        createOrgVariable: [
            "POST /orgs/{org}/actions/variables"
        ],
        createRegistrationTokenForOrg: [
            "POST /orgs/{org}/actions/runners/registration-token"
        ],
        createRegistrationTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/registration-token"
        ],
        createRemoveTokenForOrg: [
            "POST /orgs/{org}/actions/runners/remove-token"
        ],
        createRemoveTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/remove-token"
        ],
        createRepoVariable: [
            "POST /repos/{owner}/{repo}/actions/variables"
        ],
        createWorkflowDispatch: [
            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
        ],
        deleteActionsCacheById: [
            "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
        ],
        deleteActionsCacheByKey: [
            "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
        ],
        deleteArtifact: [
            "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        ],
        deleteEnvironmentSecret: [
            "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        deleteEnvironmentVariable: [
            "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        deleteOrgSecret: [
            "DELETE /orgs/{org}/actions/secrets/{secret_name}"
        ],
        deleteOrgVariable: [
            "DELETE /orgs/{org}/actions/variables/{name}"
        ],
        deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        deleteRepoVariable: [
            "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
        ],
        deleteSelfHostedRunnerFromOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}"
        ],
        deleteSelfHostedRunnerFromRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        deleteWorkflowRun: [
            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"
        ],
        deleteWorkflowRunLogs: [
            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        disableSelectedRepositoryGithubActionsOrganization: [
            "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        disableWorkflow: [
            "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
        ],
        downloadArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
        ],
        downloadJobLogsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
        ],
        downloadWorkflowRunAttemptLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
        ],
        downloadWorkflowRunLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        enableSelectedRepositoryGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        enableWorkflow: [
            "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
        ],
        generateRunnerJitconfigForOrg: [
            "POST /orgs/{org}/actions/runners/generate-jitconfig"
        ],
        generateRunnerJitconfigForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
        ],
        getActionsCacheList: [
            "GET /repos/{owner}/{repo}/actions/caches"
        ],
        getActionsCacheUsage: [
            "GET /repos/{owner}/{repo}/actions/cache/usage"
        ],
        getActionsCacheUsageByRepoForOrg: [
            "GET /orgs/{org}/actions/cache/usage-by-repository"
        ],
        getActionsCacheUsageForOrg: [
            "GET /orgs/{org}/actions/cache/usage"
        ],
        getAllowedActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/selected-actions"
        ],
        getAllowedActionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        getArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        ],
        getEnvironmentPublicKey: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
        ],
        getEnvironmentSecret: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        getEnvironmentVariable: [
            "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [
            "GET /orgs/{org}/actions/permissions/workflow"
        ],
        getGithubActionsDefaultWorkflowPermissionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        getGithubActionsPermissionsOrganization: [
            "GET /orgs/{org}/actions/permissions"
        ],
        getGithubActionsPermissionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions"
        ],
        getJobForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}"
        ],
        getOrgPublicKey: [
            "GET /orgs/{org}/actions/secrets/public-key"
        ],
        getOrgSecret: [
            "GET /orgs/{org}/actions/secrets/{secret_name}"
        ],
        getOrgVariable: [
            "GET /orgs/{org}/actions/variables/{name}"
        ],
        getPendingDeploymentsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        getRepoPermissions: [
            "GET /repos/{owner}/{repo}/actions/permissions",
            {},
            {
                renamed: [
                    "actions",
                    "getGithubActionsPermissionsRepository"
                ]
            }
        ],
        getRepoPublicKey: [
            "GET /repos/{owner}/{repo}/actions/secrets/public-key"
        ],
        getRepoSecret: [
            "GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        getRepoVariable: [
            "GET /repos/{owner}/{repo}/actions/variables/{name}"
        ],
        getReviewsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
        ],
        getSelfHostedRunnerForOrg: [
            "GET /orgs/{org}/actions/runners/{runner_id}"
        ],
        getSelfHostedRunnerForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        getWorkflow: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"
        ],
        getWorkflowAccessToRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/access"
        ],
        getWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}"
        ],
        getWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
        ],
        getWorkflowRunUsage: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
        ],
        getWorkflowUsage: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
        ],
        listArtifactsForRepo: [
            "GET /repos/{owner}/{repo}/actions/artifacts"
        ],
        listEnvironmentSecrets: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
        ],
        listEnvironmentVariables: [
            "GET /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        listJobsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
        ],
        listJobsForWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
        ],
        listLabelsForSelfHostedRunnerForOrg: [
            "GET /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        listLabelsForSelfHostedRunnerForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        listOrgSecrets: [
            "GET /orgs/{org}/actions/secrets"
        ],
        listOrgVariables: [
            "GET /orgs/{org}/actions/variables"
        ],
        listRepoOrganizationSecrets: [
            "GET /repos/{owner}/{repo}/actions/organization-secrets"
        ],
        listRepoOrganizationVariables: [
            "GET /repos/{owner}/{repo}/actions/organization-variables"
        ],
        listRepoSecrets: [
            "GET /repos/{owner}/{repo}/actions/secrets"
        ],
        listRepoVariables: [
            "GET /repos/{owner}/{repo}/actions/variables"
        ],
        listRepoWorkflows: [
            "GET /repos/{owner}/{repo}/actions/workflows"
        ],
        listRunnerApplicationsForOrg: [
            "GET /orgs/{org}/actions/runners/downloads"
        ],
        listRunnerApplicationsForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/downloads"
        ],
        listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        listSelectedReposForOrgVariable: [
            "GET /orgs/{org}/actions/variables/{name}/repositories"
        ],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/repositories"
        ],
        listSelfHostedRunnersForOrg: [
            "GET /orgs/{org}/actions/runners"
        ],
        listSelfHostedRunnersForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners"
        ],
        listWorkflowRunArtifacts: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
        ],
        listWorkflowRuns: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
        ],
        listWorkflowRunsForRepo: [
            "GET /repos/{owner}/{repo}/actions/runs"
        ],
        reRunJobForWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
        ],
        reRunWorkflow: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"
        ],
        reRunWorkflowFailedJobs: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        removeCustomLabelFromSelfHostedRunnerForOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeCustomLabelFromSelfHostedRunnerForRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgVariable: [
            "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        reviewCustomGatesForRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
        ],
        reviewPendingDeploymentsForRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        setAllowedActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/selected-actions"
        ],
        setAllowedActionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        setCustomLabelsForSelfHostedRunnerForOrg: [
            "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        setCustomLabelsForSelfHostedRunnerForRepo: [
            "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/workflow"
        ],
        setGithubActionsDefaultWorkflowPermissionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        setGithubActionsPermissionsOrganization: [
            "PUT /orgs/{org}/actions/permissions"
        ],
        setGithubActionsPermissionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions"
        ],
        setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgVariable: [
            "PUT /orgs/{org}/actions/variables/{name}/repositories"
        ],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories"
        ],
        setWorkflowAccessToRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/access"
        ],
        updateEnvironmentVariable: [
            "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        updateOrgVariable: [
            "PATCH /orgs/{org}/actions/variables/{name}"
        ],
        updateRepoVariable: [
            "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
        ]
    },
    activity: {
        checkRepoIsStarredByAuthenticatedUser: [
            "GET /user/starred/{owner}/{repo}"
        ],
        deleteRepoSubscription: [
            "DELETE /repos/{owner}/{repo}/subscription"
        ],
        deleteThreadSubscription: [
            "DELETE /notifications/threads/{thread_id}/subscription"
        ],
        getFeeds: [
            "GET /feeds"
        ],
        getRepoSubscription: [
            "GET /repos/{owner}/{repo}/subscription"
        ],
        getThread: [
            "GET /notifications/threads/{thread_id}"
        ],
        getThreadSubscriptionForAuthenticatedUser: [
            "GET /notifications/threads/{thread_id}/subscription"
        ],
        listEventsForAuthenticatedUser: [
            "GET /users/{username}/events"
        ],
        listNotificationsForAuthenticatedUser: [
            "GET /notifications"
        ],
        listOrgEventsForAuthenticatedUser: [
            "GET /users/{username}/events/orgs/{org}"
        ],
        listPublicEvents: [
            "GET /events"
        ],
        listPublicEventsForRepoNetwork: [
            "GET /networks/{owner}/{repo}/events"
        ],
        listPublicEventsForUser: [
            "GET /users/{username}/events/public"
        ],
        listPublicOrgEvents: [
            "GET /orgs/{org}/events"
        ],
        listReceivedEventsForUser: [
            "GET /users/{username}/received_events"
        ],
        listReceivedPublicEventsForUser: [
            "GET /users/{username}/received_events/public"
        ],
        listRepoEvents: [
            "GET /repos/{owner}/{repo}/events"
        ],
        listRepoNotificationsForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/notifications"
        ],
        listReposStarredByAuthenticatedUser: [
            "GET /user/starred"
        ],
        listReposStarredByUser: [
            "GET /users/{username}/starred"
        ],
        listReposWatchedByUser: [
            "GET /users/{username}/subscriptions"
        ],
        listStargazersForRepo: [
            "GET /repos/{owner}/{repo}/stargazers"
        ],
        listWatchedReposForAuthenticatedUser: [
            "GET /user/subscriptions"
        ],
        listWatchersForRepo: [
            "GET /repos/{owner}/{repo}/subscribers"
        ],
        markNotificationsAsRead: [
            "PUT /notifications"
        ],
        markRepoNotificationsAsRead: [
            "PUT /repos/{owner}/{repo}/notifications"
        ],
        markThreadAsRead: [
            "PATCH /notifications/threads/{thread_id}"
        ],
        setRepoSubscription: [
            "PUT /repos/{owner}/{repo}/subscription"
        ],
        setThreadSubscription: [
            "PUT /notifications/threads/{thread_id}/subscription"
        ],
        starRepoForAuthenticatedUser: [
            "PUT /user/starred/{owner}/{repo}"
        ],
        unstarRepoForAuthenticatedUser: [
            "DELETE /user/starred/{owner}/{repo}"
        ]
    },
    apps: {
        addRepoToInstallation: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            {
                renamed: [
                    "apps",
                    "addRepoToInstallationForAuthenticatedUser"
                ]
            }
        ],
        addRepoToInstallationForAuthenticatedUser: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        checkToken: [
            "POST /applications/{client_id}/token"
        ],
        createFromManifest: [
            "POST /app-manifests/{code}/conversions"
        ],
        createInstallationAccessToken: [
            "POST /app/installations/{installation_id}/access_tokens"
        ],
        deleteAuthorization: [
            "DELETE /applications/{client_id}/grant"
        ],
        deleteInstallation: [
            "DELETE /app/installations/{installation_id}"
        ],
        deleteToken: [
            "DELETE /applications/{client_id}/token"
        ],
        getAuthenticated: [
            "GET /app"
        ],
        getBySlug: [
            "GET /apps/{app_slug}"
        ],
        getInstallation: [
            "GET /app/installations/{installation_id}"
        ],
        getOrgInstallation: [
            "GET /orgs/{org}/installation"
        ],
        getRepoInstallation: [
            "GET /repos/{owner}/{repo}/installation"
        ],
        getSubscriptionPlanForAccount: [
            "GET /marketplace_listing/accounts/{account_id}"
        ],
        getSubscriptionPlanForAccountStubbed: [
            "GET /marketplace_listing/stubbed/accounts/{account_id}"
        ],
        getUserInstallation: [
            "GET /users/{username}/installation"
        ],
        getWebhookConfigForApp: [
            "GET /app/hook/config"
        ],
        getWebhookDelivery: [
            "GET /app/hook/deliveries/{delivery_id}"
        ],
        listAccountsForPlan: [
            "GET /marketplace_listing/plans/{plan_id}/accounts"
        ],
        listAccountsForPlanStubbed: [
            "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
        ],
        listInstallationReposForAuthenticatedUser: [
            "GET /user/installations/{installation_id}/repositories"
        ],
        listInstallationRequestsForAuthenticatedApp: [
            "GET /app/installation-requests"
        ],
        listInstallations: [
            "GET /app/installations"
        ],
        listInstallationsForAuthenticatedUser: [
            "GET /user/installations"
        ],
        listPlans: [
            "GET /marketplace_listing/plans"
        ],
        listPlansStubbed: [
            "GET /marketplace_listing/stubbed/plans"
        ],
        listReposAccessibleToInstallation: [
            "GET /installation/repositories"
        ],
        listSubscriptionsForAuthenticatedUser: [
            "GET /user/marketplace_purchases"
        ],
        listSubscriptionsForAuthenticatedUserStubbed: [
            "GET /user/marketplace_purchases/stubbed"
        ],
        listWebhookDeliveries: [
            "GET /app/hook/deliveries"
        ],
        redeliverWebhookDelivery: [
            "POST /app/hook/deliveries/{delivery_id}/attempts"
        ],
        removeRepoFromInstallation: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            {
                renamed: [
                    "apps",
                    "removeRepoFromInstallationForAuthenticatedUser"
                ]
            }
        ],
        removeRepoFromInstallationForAuthenticatedUser: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        resetToken: [
            "PATCH /applications/{client_id}/token"
        ],
        revokeInstallationAccessToken: [
            "DELETE /installation/token"
        ],
        scopeToken: [
            "POST /applications/{client_id}/token/scoped"
        ],
        suspendInstallation: [
            "PUT /app/installations/{installation_id}/suspended"
        ],
        unsuspendInstallation: [
            "DELETE /app/installations/{installation_id}/suspended"
        ],
        updateWebhookConfigForApp: [
            "PATCH /app/hook/config"
        ]
    },
    billing: {
        getGithubActionsBillingOrg: [
            "GET /orgs/{org}/settings/billing/actions"
        ],
        getGithubActionsBillingUser: [
            "GET /users/{username}/settings/billing/actions"
        ],
        getGithubPackagesBillingOrg: [
            "GET /orgs/{org}/settings/billing/packages"
        ],
        getGithubPackagesBillingUser: [
            "GET /users/{username}/settings/billing/packages"
        ],
        getSharedStorageBillingOrg: [
            "GET /orgs/{org}/settings/billing/shared-storage"
        ],
        getSharedStorageBillingUser: [
            "GET /users/{username}/settings/billing/shared-storage"
        ]
    },
    checks: {
        create: [
            "POST /repos/{owner}/{repo}/check-runs"
        ],
        createSuite: [
            "POST /repos/{owner}/{repo}/check-suites"
        ],
        get: [
            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}"
        ],
        getSuite: [
            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"
        ],
        listAnnotations: [
            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
        ],
        listForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/check-runs"
        ],
        listForSuite: [
            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
        ],
        listSuitesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/check-suites"
        ],
        rerequestRun: [
            "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
        ],
        rerequestSuite: [
            "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
        ],
        setSuitesPreferences: [
            "PATCH /repos/{owner}/{repo}/check-suites/preferences"
        ],
        update: [
            "PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"
        ]
    },
    codeScanning: {
        deleteAnalysis: [
            "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
        ],
        getAlert: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
            {},
            {
                renamedParameters: {
                    alert_id: "alert_number"
                }
            }
        ],
        getAnalysis: [
            "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
        ],
        getCodeqlDatabase: [
            "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
        ],
        getDefaultSetup: [
            "GET /repos/{owner}/{repo}/code-scanning/default-setup"
        ],
        getSarif: [
            "GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"
        ],
        listAlertInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
        ],
        listAlertsForOrg: [
            "GET /orgs/{org}/code-scanning/alerts"
        ],
        listAlertsForRepo: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts"
        ],
        listAlertsInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
            {},
            {
                renamed: [
                    "codeScanning",
                    "listAlertInstances"
                ]
            }
        ],
        listCodeqlDatabases: [
            "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
        ],
        listRecentAnalyses: [
            "GET /repos/{owner}/{repo}/code-scanning/analyses"
        ],
        updateAlert: [
            "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        ],
        updateDefaultSetup: [
            "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
        ],
        uploadSarif: [
            "POST /repos/{owner}/{repo}/code-scanning/sarifs"
        ]
    },
    codesOfConduct: {
        getAllCodesOfConduct: [
            "GET /codes_of_conduct"
        ],
        getConductCode: [
            "GET /codes_of_conduct/{key}"
        ]
    },
    codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [
            "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        codespaceMachinesForAuthenticatedUser: [
            "GET /user/codespaces/{codespace_name}/machines"
        ],
        createForAuthenticatedUser: [
            "POST /user/codespaces"
        ],
        createOrUpdateOrgSecret: [
            "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateSecretForAuthenticatedUser: [
            "PUT /user/codespaces/secrets/{secret_name}"
        ],
        createWithPrForAuthenticatedUser: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
        ],
        createWithRepoForAuthenticatedUser: [
            "POST /repos/{owner}/{repo}/codespaces"
        ],
        deleteForAuthenticatedUser: [
            "DELETE /user/codespaces/{codespace_name}"
        ],
        deleteFromOrganization: [
            "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
        ],
        deleteOrgSecret: [
            "DELETE /orgs/{org}/codespaces/secrets/{secret_name}"
        ],
        deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        deleteSecretForAuthenticatedUser: [
            "DELETE /user/codespaces/secrets/{secret_name}"
        ],
        exportForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/exports"
        ],
        getCodespacesForUserInOrg: [
            "GET /orgs/{org}/members/{username}/codespaces"
        ],
        getExportDetailsForAuthenticatedUser: [
            "GET /user/codespaces/{codespace_name}/exports/{export_id}"
        ],
        getForAuthenticatedUser: [
            "GET /user/codespaces/{codespace_name}"
        ],
        getOrgPublicKey: [
            "GET /orgs/{org}/codespaces/secrets/public-key"
        ],
        getOrgSecret: [
            "GET /orgs/{org}/codespaces/secrets/{secret_name}"
        ],
        getPublicKeyForAuthenticatedUser: [
            "GET /user/codespaces/secrets/public-key"
        ],
        getRepoPublicKey: [
            "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
        ],
        getRepoSecret: [
            "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        getSecretForAuthenticatedUser: [
            "GET /user/codespaces/secrets/{secret_name}"
        ],
        listDevcontainersInRepositoryForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces/devcontainers"
        ],
        listForAuthenticatedUser: [
            "GET /user/codespaces"
        ],
        listInOrganization: [
            "GET /orgs/{org}/codespaces",
            {},
            {
                renamedParameters: {
                    org_id: "org"
                }
            }
        ],
        listInRepositoryForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces"
        ],
        listOrgSecrets: [
            "GET /orgs/{org}/codespaces/secrets"
        ],
        listRepoSecrets: [
            "GET /repos/{owner}/{repo}/codespaces/secrets"
        ],
        listRepositoriesForSecretForAuthenticatedUser: [
            "GET /user/codespaces/secrets/{secret_name}/repositories"
        ],
        listSecretsForAuthenticatedUser: [
            "GET /user/codespaces/secrets"
        ],
        listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        preFlightWithRepoForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces/new"
        ],
        publishForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/publish"
        ],
        removeRepositoryForSecretForAuthenticatedUser: [
            "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        repoMachinesForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces/machines"
        ],
        setRepositoriesForSecretForAuthenticatedUser: [
            "PUT /user/codespaces/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        startForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/start"
        ],
        stopForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/stop"
        ],
        stopInOrganization: [
            "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
        ],
        updateForAuthenticatedUser: [
            "PATCH /user/codespaces/{codespace_name}"
        ]
    },
    copilot: {
        addCopilotForBusinessSeatsForTeams: [
            "POST /orgs/{org}/copilot/billing/selected_teams"
        ],
        addCopilotForBusinessSeatsForUsers: [
            "POST /orgs/{org}/copilot/billing/selected_users"
        ],
        cancelCopilotSeatAssignmentForTeams: [
            "DELETE /orgs/{org}/copilot/billing/selected_teams"
        ],
        cancelCopilotSeatAssignmentForUsers: [
            "DELETE /orgs/{org}/copilot/billing/selected_users"
        ],
        getCopilotOrganizationDetails: [
            "GET /orgs/{org}/copilot/billing"
        ],
        getCopilotSeatAssignmentDetailsForUser: [
            "GET /orgs/{org}/members/{username}/copilot"
        ],
        listCopilotSeats: [
            "GET /orgs/{org}/copilot/billing/seats"
        ]
    },
    dependabot: {
        addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        createOrUpdateOrgSecret: [
            "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        deleteOrgSecret: [
            "DELETE /orgs/{org}/dependabot/secrets/{secret_name}"
        ],
        deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        getAlert: [
            "GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
        ],
        getOrgPublicKey: [
            "GET /orgs/{org}/dependabot/secrets/public-key"
        ],
        getOrgSecret: [
            "GET /orgs/{org}/dependabot/secrets/{secret_name}"
        ],
        getRepoPublicKey: [
            "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
        ],
        getRepoSecret: [
            "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        listAlertsForEnterprise: [
            "GET /enterprises/{enterprise}/dependabot/alerts"
        ],
        listAlertsForOrg: [
            "GET /orgs/{org}/dependabot/alerts"
        ],
        listAlertsForRepo: [
            "GET /repos/{owner}/{repo}/dependabot/alerts"
        ],
        listOrgSecrets: [
            "GET /orgs/{org}/dependabot/secrets"
        ],
        listRepoSecrets: [
            "GET /repos/{owner}/{repo}/dependabot/secrets"
        ],
        listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        updateAlert: [
            "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
        ]
    },
    dependencyGraph: {
        createRepositorySnapshot: [
            "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
        ],
        diffRange: [
            "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
        ],
        exportSbom: [
            "GET /repos/{owner}/{repo}/dependency-graph/sbom"
        ]
    },
    emojis: {
        get: [
            "GET /emojis"
        ]
    },
    gists: {
        checkIsStarred: [
            "GET /gists/{gist_id}/star"
        ],
        create: [
            "POST /gists"
        ],
        createComment: [
            "POST /gists/{gist_id}/comments"
        ],
        delete: [
            "DELETE /gists/{gist_id}"
        ],
        deleteComment: [
            "DELETE /gists/{gist_id}/comments/{comment_id}"
        ],
        fork: [
            "POST /gists/{gist_id}/forks"
        ],
        get: [
            "GET /gists/{gist_id}"
        ],
        getComment: [
            "GET /gists/{gist_id}/comments/{comment_id}"
        ],
        getRevision: [
            "GET /gists/{gist_id}/{sha}"
        ],
        list: [
            "GET /gists"
        ],
        listComments: [
            "GET /gists/{gist_id}/comments"
        ],
        listCommits: [
            "GET /gists/{gist_id}/commits"
        ],
        listForUser: [
            "GET /users/{username}/gists"
        ],
        listForks: [
            "GET /gists/{gist_id}/forks"
        ],
        listPublic: [
            "GET /gists/public"
        ],
        listStarred: [
            "GET /gists/starred"
        ],
        star: [
            "PUT /gists/{gist_id}/star"
        ],
        unstar: [
            "DELETE /gists/{gist_id}/star"
        ],
        update: [
            "PATCH /gists/{gist_id}"
        ],
        updateComment: [
            "PATCH /gists/{gist_id}/comments/{comment_id}"
        ]
    },
    git: {
        createBlob: [
            "POST /repos/{owner}/{repo}/git/blobs"
        ],
        createCommit: [
            "POST /repos/{owner}/{repo}/git/commits"
        ],
        createRef: [
            "POST /repos/{owner}/{repo}/git/refs"
        ],
        createTag: [
            "POST /repos/{owner}/{repo}/git/tags"
        ],
        createTree: [
            "POST /repos/{owner}/{repo}/git/trees"
        ],
        deleteRef: [
            "DELETE /repos/{owner}/{repo}/git/refs/{ref}"
        ],
        getBlob: [
            "GET /repos/{owner}/{repo}/git/blobs/{file_sha}"
        ],
        getCommit: [
            "GET /repos/{owner}/{repo}/git/commits/{commit_sha}"
        ],
        getRef: [
            "GET /repos/{owner}/{repo}/git/ref/{ref}"
        ],
        getTag: [
            "GET /repos/{owner}/{repo}/git/tags/{tag_sha}"
        ],
        getTree: [
            "GET /repos/{owner}/{repo}/git/trees/{tree_sha}"
        ],
        listMatchingRefs: [
            "GET /repos/{owner}/{repo}/git/matching-refs/{ref}"
        ],
        updateRef: [
            "PATCH /repos/{owner}/{repo}/git/refs/{ref}"
        ]
    },
    gitignore: {
        getAllTemplates: [
            "GET /gitignore/templates"
        ],
        getTemplate: [
            "GET /gitignore/templates/{name}"
        ]
    },
    interactions: {
        getRestrictionsForAuthenticatedUser: [
            "GET /user/interaction-limits"
        ],
        getRestrictionsForOrg: [
            "GET /orgs/{org}/interaction-limits"
        ],
        getRestrictionsForRepo: [
            "GET /repos/{owner}/{repo}/interaction-limits"
        ],
        getRestrictionsForYourPublicRepos: [
            "GET /user/interaction-limits",
            {},
            {
                renamed: [
                    "interactions",
                    "getRestrictionsForAuthenticatedUser"
                ]
            }
        ],
        removeRestrictionsForAuthenticatedUser: [
            "DELETE /user/interaction-limits"
        ],
        removeRestrictionsForOrg: [
            "DELETE /orgs/{org}/interaction-limits"
        ],
        removeRestrictionsForRepo: [
            "DELETE /repos/{owner}/{repo}/interaction-limits"
        ],
        removeRestrictionsForYourPublicRepos: [
            "DELETE /user/interaction-limits",
            {},
            {
                renamed: [
                    "interactions",
                    "removeRestrictionsForAuthenticatedUser"
                ]
            }
        ],
        setRestrictionsForAuthenticatedUser: [
            "PUT /user/interaction-limits"
        ],
        setRestrictionsForOrg: [
            "PUT /orgs/{org}/interaction-limits"
        ],
        setRestrictionsForRepo: [
            "PUT /repos/{owner}/{repo}/interaction-limits"
        ],
        setRestrictionsForYourPublicRepos: [
            "PUT /user/interaction-limits",
            {},
            {
                renamed: [
                    "interactions",
                    "setRestrictionsForAuthenticatedUser"
                ]
            }
        ]
    },
    issues: {
        addAssignees: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        addLabels: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        checkUserCanBeAssigned: [
            "GET /repos/{owner}/{repo}/assignees/{assignee}"
        ],
        checkUserCanBeAssignedToIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
        ],
        create: [
            "POST /repos/{owner}/{repo}/issues"
        ],
        createComment: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
        ],
        createLabel: [
            "POST /repos/{owner}/{repo}/labels"
        ],
        createMilestone: [
            "POST /repos/{owner}/{repo}/milestones"
        ],
        deleteComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
        ],
        deleteLabel: [
            "DELETE /repos/{owner}/{repo}/labels/{name}"
        ],
        deleteMilestone: [
            "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
        ],
        get: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}"
        ],
        getComment: [
            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}"
        ],
        getEvent: [
            "GET /repos/{owner}/{repo}/issues/events/{event_id}"
        ],
        getLabel: [
            "GET /repos/{owner}/{repo}/labels/{name}"
        ],
        getMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}"
        ],
        list: [
            "GET /issues"
        ],
        listAssignees: [
            "GET /repos/{owner}/{repo}/assignees"
        ],
        listComments: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/comments"
        ],
        listCommentsForRepo: [
            "GET /repos/{owner}/{repo}/issues/comments"
        ],
        listEvents: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/events"
        ],
        listEventsForRepo: [
            "GET /repos/{owner}/{repo}/issues/events"
        ],
        listEventsForTimeline: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
        ],
        listForAuthenticatedUser: [
            "GET /user/issues"
        ],
        listForOrg: [
            "GET /orgs/{org}/issues"
        ],
        listForRepo: [
            "GET /repos/{owner}/{repo}/issues"
        ],
        listLabelsForMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
        ],
        listLabelsForRepo: [
            "GET /repos/{owner}/{repo}/labels"
        ],
        listLabelsOnIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        listMilestones: [
            "GET /repos/{owner}/{repo}/milestones"
        ],
        lock: [
            "PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"
        ],
        removeAllLabels: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        removeAssignees: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        removeLabel: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
        ],
        setLabels: [
            "PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        unlock: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"
        ],
        update: [
            "PATCH /repos/{owner}/{repo}/issues/{issue_number}"
        ],
        updateComment: [
            "PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"
        ],
        updateLabel: [
            "PATCH /repos/{owner}/{repo}/labels/{name}"
        ],
        updateMilestone: [
            "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
        ]
    },
    licenses: {
        get: [
            "GET /licenses/{license}"
        ],
        getAllCommonlyUsed: [
            "GET /licenses"
        ],
        getForRepo: [
            "GET /repos/{owner}/{repo}/license"
        ]
    },
    markdown: {
        render: [
            "POST /markdown"
        ],
        renderRaw: [
            "POST /markdown/raw",
            {
                headers: {
                    "content-type": "text/plain; charset=utf-8"
                }
            }
        ]
    },
    meta: {
        get: [
            "GET /meta"
        ],
        getAllVersions: [
            "GET /versions"
        ],
        getOctocat: [
            "GET /octocat"
        ],
        getZen: [
            "GET /zen"
        ],
        root: [
            "GET /"
        ]
    },
    migrations: {
        cancelImport: [
            "DELETE /repos/{owner}/{repo}/import"
        ],
        deleteArchiveForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/archive"
        ],
        deleteArchiveForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/archive"
        ],
        downloadArchiveForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/archive"
        ],
        getArchiveForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/archive"
        ],
        getCommitAuthors: [
            "GET /repos/{owner}/{repo}/import/authors"
        ],
        getImportStatus: [
            "GET /repos/{owner}/{repo}/import"
        ],
        getLargeFiles: [
            "GET /repos/{owner}/{repo}/import/large_files"
        ],
        getStatusForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}"
        ],
        getStatusForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}"
        ],
        listForAuthenticatedUser: [
            "GET /user/migrations"
        ],
        listForOrg: [
            "GET /orgs/{org}/migrations"
        ],
        listReposForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/repositories"
        ],
        listReposForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/repositories"
        ],
        listReposForUser: [
            "GET /user/migrations/{migration_id}/repositories",
            {},
            {
                renamed: [
                    "migrations",
                    "listReposForAuthenticatedUser"
                ]
            }
        ],
        mapCommitAuthor: [
            "PATCH /repos/{owner}/{repo}/import/authors/{author_id}"
        ],
        setLfsPreference: [
            "PATCH /repos/{owner}/{repo}/import/lfs"
        ],
        startForAuthenticatedUser: [
            "POST /user/migrations"
        ],
        startForOrg: [
            "POST /orgs/{org}/migrations"
        ],
        startImport: [
            "PUT /repos/{owner}/{repo}/import"
        ],
        unlockRepoForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        unlockRepoForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        updateImport: [
            "PATCH /repos/{owner}/{repo}/import"
        ]
    },
    orgs: {
        addSecurityManagerTeam: [
            "PUT /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        blockUser: [
            "PUT /orgs/{org}/blocks/{username}"
        ],
        cancelInvitation: [
            "DELETE /orgs/{org}/invitations/{invitation_id}"
        ],
        checkBlockedUser: [
            "GET /orgs/{org}/blocks/{username}"
        ],
        checkMembershipForUser: [
            "GET /orgs/{org}/members/{username}"
        ],
        checkPublicMembershipForUser: [
            "GET /orgs/{org}/public_members/{username}"
        ],
        convertMemberToOutsideCollaborator: [
            "PUT /orgs/{org}/outside_collaborators/{username}"
        ],
        createInvitation: [
            "POST /orgs/{org}/invitations"
        ],
        createWebhook: [
            "POST /orgs/{org}/hooks"
        ],
        delete: [
            "DELETE /orgs/{org}"
        ],
        deleteWebhook: [
            "DELETE /orgs/{org}/hooks/{hook_id}"
        ],
        enableOrDisableSecurityProductOnAllOrgRepos: [
            "POST /orgs/{org}/{security_product}/{enablement}"
        ],
        get: [
            "GET /orgs/{org}"
        ],
        getMembershipForAuthenticatedUser: [
            "GET /user/memberships/orgs/{org}"
        ],
        getMembershipForUser: [
            "GET /orgs/{org}/memberships/{username}"
        ],
        getWebhook: [
            "GET /orgs/{org}/hooks/{hook_id}"
        ],
        getWebhookConfigForOrg: [
            "GET /orgs/{org}/hooks/{hook_id}/config"
        ],
        getWebhookDelivery: [
            "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        list: [
            "GET /organizations"
        ],
        listAppInstallations: [
            "GET /orgs/{org}/installations"
        ],
        listBlockedUsers: [
            "GET /orgs/{org}/blocks"
        ],
        listFailedInvitations: [
            "GET /orgs/{org}/failed_invitations"
        ],
        listForAuthenticatedUser: [
            "GET /user/orgs"
        ],
        listForUser: [
            "GET /users/{username}/orgs"
        ],
        listInvitationTeams: [
            "GET /orgs/{org}/invitations/{invitation_id}/teams"
        ],
        listMembers: [
            "GET /orgs/{org}/members"
        ],
        listMembershipsForAuthenticatedUser: [
            "GET /user/memberships/orgs"
        ],
        listOutsideCollaborators: [
            "GET /orgs/{org}/outside_collaborators"
        ],
        listPatGrantRepositories: [
            "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
        ],
        listPatGrantRequestRepositories: [
            "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
        ],
        listPatGrantRequests: [
            "GET /orgs/{org}/personal-access-token-requests"
        ],
        listPatGrants: [
            "GET /orgs/{org}/personal-access-tokens"
        ],
        listPendingInvitations: [
            "GET /orgs/{org}/invitations"
        ],
        listPublicMembers: [
            "GET /orgs/{org}/public_members"
        ],
        listSecurityManagerTeams: [
            "GET /orgs/{org}/security-managers"
        ],
        listWebhookDeliveries: [
            "GET /orgs/{org}/hooks/{hook_id}/deliveries"
        ],
        listWebhooks: [
            "GET /orgs/{org}/hooks"
        ],
        pingWebhook: [
            "POST /orgs/{org}/hooks/{hook_id}/pings"
        ],
        redeliverWebhookDelivery: [
            "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeMember: [
            "DELETE /orgs/{org}/members/{username}"
        ],
        removeMembershipForUser: [
            "DELETE /orgs/{org}/memberships/{username}"
        ],
        removeOutsideCollaborator: [
            "DELETE /orgs/{org}/outside_collaborators/{username}"
        ],
        removePublicMembershipForAuthenticatedUser: [
            "DELETE /orgs/{org}/public_members/{username}"
        ],
        removeSecurityManagerTeam: [
            "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        reviewPatGrantRequest: [
            "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
        ],
        reviewPatGrantRequestsInBulk: [
            "POST /orgs/{org}/personal-access-token-requests"
        ],
        setMembershipForUser: [
            "PUT /orgs/{org}/memberships/{username}"
        ],
        setPublicMembershipForAuthenticatedUser: [
            "PUT /orgs/{org}/public_members/{username}"
        ],
        unblockUser: [
            "DELETE /orgs/{org}/blocks/{username}"
        ],
        update: [
            "PATCH /orgs/{org}"
        ],
        updateMembershipForAuthenticatedUser: [
            "PATCH /user/memberships/orgs/{org}"
        ],
        updatePatAccess: [
            "POST /orgs/{org}/personal-access-tokens/{pat_id}"
        ],
        updatePatAccesses: [
            "POST /orgs/{org}/personal-access-tokens"
        ],
        updateWebhook: [
            "PATCH /orgs/{org}/hooks/{hook_id}"
        ],
        updateWebhookConfigForOrg: [
            "PATCH /orgs/{org}/hooks/{hook_id}/config"
        ]
    },
    packages: {
        deletePackageForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}"
        ],
        deletePackageForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        deletePackageForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}"
        ],
        deletePackageVersionForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
            {},
            {
                renamed: [
                    "packages",
                    "getAllPackageVersionsForPackageOwnedByOrg"
                ]
            }
        ],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions",
            {},
            {
                renamed: [
                    "packages",
                    "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
                ]
            }
        ],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions"
        ],
        getPackageForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}"
        ],
        getPackageForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        getPackageForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}"
        ],
        getPackageVersionForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        listDockerMigrationConflictingPackagesForAuthenticatedUser: [
            "GET /user/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForOrganization: [
            "GET /orgs/{org}/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForUser: [
            "GET /users/{username}/docker/conflicts"
        ],
        listPackagesForAuthenticatedUser: [
            "GET /user/packages"
        ],
        listPackagesForOrganization: [
            "GET /orgs/{org}/packages"
        ],
        listPackagesForUser: [
            "GET /users/{username}/packages"
        ],
        restorePackageForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageVersionForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ]
    },
    projects: {
        addCollaborator: [
            "PUT /projects/{project_id}/collaborators/{username}"
        ],
        createCard: [
            "POST /projects/columns/{column_id}/cards"
        ],
        createColumn: [
            "POST /projects/{project_id}/columns"
        ],
        createForAuthenticatedUser: [
            "POST /user/projects"
        ],
        createForOrg: [
            "POST /orgs/{org}/projects"
        ],
        createForRepo: [
            "POST /repos/{owner}/{repo}/projects"
        ],
        delete: [
            "DELETE /projects/{project_id}"
        ],
        deleteCard: [
            "DELETE /projects/columns/cards/{card_id}"
        ],
        deleteColumn: [
            "DELETE /projects/columns/{column_id}"
        ],
        get: [
            "GET /projects/{project_id}"
        ],
        getCard: [
            "GET /projects/columns/cards/{card_id}"
        ],
        getColumn: [
            "GET /projects/columns/{column_id}"
        ],
        getPermissionForUser: [
            "GET /projects/{project_id}/collaborators/{username}/permission"
        ],
        listCards: [
            "GET /projects/columns/{column_id}/cards"
        ],
        listCollaborators: [
            "GET /projects/{project_id}/collaborators"
        ],
        listColumns: [
            "GET /projects/{project_id}/columns"
        ],
        listForOrg: [
            "GET /orgs/{org}/projects"
        ],
        listForRepo: [
            "GET /repos/{owner}/{repo}/projects"
        ],
        listForUser: [
            "GET /users/{username}/projects"
        ],
        moveCard: [
            "POST /projects/columns/cards/{card_id}/moves"
        ],
        moveColumn: [
            "POST /projects/columns/{column_id}/moves"
        ],
        removeCollaborator: [
            "DELETE /projects/{project_id}/collaborators/{username}"
        ],
        update: [
            "PATCH /projects/{project_id}"
        ],
        updateCard: [
            "PATCH /projects/columns/cards/{card_id}"
        ],
        updateColumn: [
            "PATCH /projects/columns/{column_id}"
        ]
    },
    pulls: {
        checkIfMerged: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"
        ],
        create: [
            "POST /repos/{owner}/{repo}/pulls"
        ],
        createReplyForReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
        ],
        createReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"
        ],
        createReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        deletePendingReview: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        deleteReviewComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ],
        dismissReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
        ],
        get: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}"
        ],
        getReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        getReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ],
        list: [
            "GET /repos/{owner}/{repo}/pulls"
        ],
        listCommentsForReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
        ],
        listCommits: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"
        ],
        listFiles: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/files"
        ],
        listRequestedReviewers: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        listReviewComments: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        listReviewCommentsForRepo: [
            "GET /repos/{owner}/{repo}/pulls/comments"
        ],
        listReviews: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"
        ],
        merge: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"
        ],
        removeRequestedReviewers: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        requestReviewers: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        submitReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
        ],
        update: [
            "PATCH /repos/{owner}/{repo}/pulls/{pull_number}"
        ],
        updateBranch: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
        ],
        updateReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        updateReviewComment: [
            "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ]
    },
    rateLimit: {
        get: [
            "GET /rate_limit"
        ]
    },
    reactions: {
        createForCommitComment: [
            "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        createForIssue: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
        ],
        createForIssueComment: [
            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        createForPullRequestReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        createForRelease: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        createForTeamDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        createForTeamDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ],
        deleteForCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForIssue: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
        ],
        deleteForIssueComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForPullRequestComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForRelease: [
            "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussion: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussionComment: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
        ],
        listForCommitComment: [
            "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        listForIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"
        ],
        listForIssueComment: [
            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        listForPullRequestReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        listForRelease: [
            "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        listForTeamDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        listForTeamDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ]
    },
    repos: {
        acceptInvitation: [
            "PATCH /user/repository_invitations/{invitation_id}",
            {},
            {
                renamed: [
                    "repos",
                    "acceptInvitationForAuthenticatedUser"
                ]
            }
        ],
        acceptInvitationForAuthenticatedUser: [
            "PATCH /user/repository_invitations/{invitation_id}"
        ],
        addAppAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            {
                mapToData: "apps"
            }
        ],
        addCollaborator: [
            "PUT /repos/{owner}/{repo}/collaborators/{username}"
        ],
        addStatusCheckContexts: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            {
                mapToData: "contexts"
            }
        ],
        addTeamAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            {
                mapToData: "teams"
            }
        ],
        addUserAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            {
                mapToData: "users"
            }
        ],
        checkAutomatedSecurityFixes: [
            "GET /repos/{owner}/{repo}/automated-security-fixes"
        ],
        checkCollaborator: [
            "GET /repos/{owner}/{repo}/collaborators/{username}"
        ],
        checkVulnerabilityAlerts: [
            "GET /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        codeownersErrors: [
            "GET /repos/{owner}/{repo}/codeowners/errors"
        ],
        compareCommits: [
            "GET /repos/{owner}/{repo}/compare/{base}...{head}"
        ],
        compareCommitsWithBasehead: [
            "GET /repos/{owner}/{repo}/compare/{basehead}"
        ],
        createAutolink: [
            "POST /repos/{owner}/{repo}/autolinks"
        ],
        createCommitComment: [
            "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        createCommitSignatureProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        createCommitStatus: [
            "POST /repos/{owner}/{repo}/statuses/{sha}"
        ],
        createDeployKey: [
            "POST /repos/{owner}/{repo}/keys"
        ],
        createDeployment: [
            "POST /repos/{owner}/{repo}/deployments"
        ],
        createDeploymentBranchPolicy: [
            "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        createDeploymentProtectionRule: [
            "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        createDeploymentStatus: [
            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        createDispatchEvent: [
            "POST /repos/{owner}/{repo}/dispatches"
        ],
        createForAuthenticatedUser: [
            "POST /user/repos"
        ],
        createFork: [
            "POST /repos/{owner}/{repo}/forks"
        ],
        createInOrg: [
            "POST /orgs/{org}/repos"
        ],
        createOrUpdateEnvironment: [
            "PUT /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        createOrUpdateFileContents: [
            "PUT /repos/{owner}/{repo}/contents/{path}"
        ],
        createOrgRuleset: [
            "POST /orgs/{org}/rulesets"
        ],
        createPagesDeployment: [
            "POST /repos/{owner}/{repo}/pages/deployment"
        ],
        createPagesSite: [
            "POST /repos/{owner}/{repo}/pages"
        ],
        createRelease: [
            "POST /repos/{owner}/{repo}/releases"
        ],
        createRepoRuleset: [
            "POST /repos/{owner}/{repo}/rulesets"
        ],
        createTagProtection: [
            "POST /repos/{owner}/{repo}/tags/protection"
        ],
        createUsingTemplate: [
            "POST /repos/{template_owner}/{template_repo}/generate"
        ],
        createWebhook: [
            "POST /repos/{owner}/{repo}/hooks"
        ],
        declineInvitation: [
            "DELETE /user/repository_invitations/{invitation_id}",
            {},
            {
                renamed: [
                    "repos",
                    "declineInvitationForAuthenticatedUser"
                ]
            }
        ],
        declineInvitationForAuthenticatedUser: [
            "DELETE /user/repository_invitations/{invitation_id}"
        ],
        delete: [
            "DELETE /repos/{owner}/{repo}"
        ],
        deleteAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        deleteAdminBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        deleteAnEnvironment: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        deleteAutolink: [
            "DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"
        ],
        deleteBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        deleteCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}"
        ],
        deleteCommitSignatureProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        deleteDeployKey: [
            "DELETE /repos/{owner}/{repo}/keys/{key_id}"
        ],
        deleteDeployment: [
            "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
        ],
        deleteDeploymentBranchPolicy: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        deleteFile: [
            "DELETE /repos/{owner}/{repo}/contents/{path}"
        ],
        deleteInvitation: [
            "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        deleteOrgRuleset: [
            "DELETE /orgs/{org}/rulesets/{ruleset_id}"
        ],
        deletePagesSite: [
            "DELETE /repos/{owner}/{repo}/pages"
        ],
        deletePullRequestReviewProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        deleteRelease: [
            "DELETE /repos/{owner}/{repo}/releases/{release_id}"
        ],
        deleteReleaseAsset: [
            "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        deleteRepoRuleset: [
            "DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"
        ],
        deleteTagProtection: [
            "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
        ],
        deleteWebhook: [
            "DELETE /repos/{owner}/{repo}/hooks/{hook_id}"
        ],
        disableAutomatedSecurityFixes: [
            "DELETE /repos/{owner}/{repo}/automated-security-fixes"
        ],
        disableDeploymentProtectionRule: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        disablePrivateVulnerabilityReporting: [
            "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        disableVulnerabilityAlerts: [
            "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        downloadArchive: [
            "GET /repos/{owner}/{repo}/zipball/{ref}",
            {},
            {
                renamed: [
                    "repos",
                    "downloadZipballArchive"
                ]
            }
        ],
        downloadTarballArchive: [
            "GET /repos/{owner}/{repo}/tarball/{ref}"
        ],
        downloadZipballArchive: [
            "GET /repos/{owner}/{repo}/zipball/{ref}"
        ],
        enableAutomatedSecurityFixes: [
            "PUT /repos/{owner}/{repo}/automated-security-fixes"
        ],
        enablePrivateVulnerabilityReporting: [
            "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        enableVulnerabilityAlerts: [
            "PUT /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        generateReleaseNotes: [
            "POST /repos/{owner}/{repo}/releases/generate-notes"
        ],
        get: [
            "GET /repos/{owner}/{repo}"
        ],
        getAccessRestrictions: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        getAdminBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        getAllDeploymentProtectionRules: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        getAllEnvironments: [
            "GET /repos/{owner}/{repo}/environments"
        ],
        getAllStatusCheckContexts: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        ],
        getAllTopics: [
            "GET /repos/{owner}/{repo}/topics"
        ],
        getAppsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        ],
        getAutolink: [
            "GET /repos/{owner}/{repo}/autolinks/{autolink_id}"
        ],
        getBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}"
        ],
        getBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        getBranchRules: [
            "GET /repos/{owner}/{repo}/rules/branches/{branch}"
        ],
        getClones: [
            "GET /repos/{owner}/{repo}/traffic/clones"
        ],
        getCodeFrequencyStats: [
            "GET /repos/{owner}/{repo}/stats/code_frequency"
        ],
        getCollaboratorPermissionLevel: [
            "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
        ],
        getCombinedStatusForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/status"
        ],
        getCommit: [
            "GET /repos/{owner}/{repo}/commits/{ref}"
        ],
        getCommitActivityStats: [
            "GET /repos/{owner}/{repo}/stats/commit_activity"
        ],
        getCommitComment: [
            "GET /repos/{owner}/{repo}/comments/{comment_id}"
        ],
        getCommitSignatureProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        getCommunityProfileMetrics: [
            "GET /repos/{owner}/{repo}/community/profile"
        ],
        getContent: [
            "GET /repos/{owner}/{repo}/contents/{path}"
        ],
        getContributorsStats: [
            "GET /repos/{owner}/{repo}/stats/contributors"
        ],
        getCustomDeploymentProtectionRule: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        getDeployKey: [
            "GET /repos/{owner}/{repo}/keys/{key_id}"
        ],
        getDeployment: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}"
        ],
        getDeploymentBranchPolicy: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        getDeploymentStatus: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
        ],
        getEnvironment: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        getLatestPagesBuild: [
            "GET /repos/{owner}/{repo}/pages/builds/latest"
        ],
        getLatestRelease: [
            "GET /repos/{owner}/{repo}/releases/latest"
        ],
        getOrgRuleset: [
            "GET /orgs/{org}/rulesets/{ruleset_id}"
        ],
        getOrgRulesets: [
            "GET /orgs/{org}/rulesets"
        ],
        getPages: [
            "GET /repos/{owner}/{repo}/pages"
        ],
        getPagesBuild: [
            "GET /repos/{owner}/{repo}/pages/builds/{build_id}"
        ],
        getPagesHealthCheck: [
            "GET /repos/{owner}/{repo}/pages/health"
        ],
        getParticipationStats: [
            "GET /repos/{owner}/{repo}/stats/participation"
        ],
        getPullRequestReviewProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        getPunchCardStats: [
            "GET /repos/{owner}/{repo}/stats/punch_card"
        ],
        getReadme: [
            "GET /repos/{owner}/{repo}/readme"
        ],
        getReadmeInDirectory: [
            "GET /repos/{owner}/{repo}/readme/{dir}"
        ],
        getRelease: [
            "GET /repos/{owner}/{repo}/releases/{release_id}"
        ],
        getReleaseAsset: [
            "GET /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        getReleaseByTag: [
            "GET /repos/{owner}/{repo}/releases/tags/{tag}"
        ],
        getRepoRuleset: [
            "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"
        ],
        getRepoRulesets: [
            "GET /repos/{owner}/{repo}/rulesets"
        ],
        getStatusChecksProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        getTeamsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        ],
        getTopPaths: [
            "GET /repos/{owner}/{repo}/traffic/popular/paths"
        ],
        getTopReferrers: [
            "GET /repos/{owner}/{repo}/traffic/popular/referrers"
        ],
        getUsersWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        ],
        getViews: [
            "GET /repos/{owner}/{repo}/traffic/views"
        ],
        getWebhook: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}"
        ],
        getWebhookConfigForRepo: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        getWebhookDelivery: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        listActivities: [
            "GET /repos/{owner}/{repo}/activity"
        ],
        listAutolinks: [
            "GET /repos/{owner}/{repo}/autolinks"
        ],
        listBranches: [
            "GET /repos/{owner}/{repo}/branches"
        ],
        listBranchesForHeadCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
        ],
        listCollaborators: [
            "GET /repos/{owner}/{repo}/collaborators"
        ],
        listCommentsForCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        listCommitCommentsForRepo: [
            "GET /repos/{owner}/{repo}/comments"
        ],
        listCommitStatusesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
        ],
        listCommits: [
            "GET /repos/{owner}/{repo}/commits"
        ],
        listContributors: [
            "GET /repos/{owner}/{repo}/contributors"
        ],
        listCustomDeploymentRuleIntegrations: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
        ],
        listDeployKeys: [
            "GET /repos/{owner}/{repo}/keys"
        ],
        listDeploymentBranchPolicies: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        listDeploymentStatuses: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        listDeployments: [
            "GET /repos/{owner}/{repo}/deployments"
        ],
        listForAuthenticatedUser: [
            "GET /user/repos"
        ],
        listForOrg: [
            "GET /orgs/{org}/repos"
        ],
        listForUser: [
            "GET /users/{username}/repos"
        ],
        listForks: [
            "GET /repos/{owner}/{repo}/forks"
        ],
        listInvitations: [
            "GET /repos/{owner}/{repo}/invitations"
        ],
        listInvitationsForAuthenticatedUser: [
            "GET /user/repository_invitations"
        ],
        listLanguages: [
            "GET /repos/{owner}/{repo}/languages"
        ],
        listPagesBuilds: [
            "GET /repos/{owner}/{repo}/pages/builds"
        ],
        listPublic: [
            "GET /repositories"
        ],
        listPullRequestsAssociatedWithCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
        ],
        listReleaseAssets: [
            "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
        ],
        listReleases: [
            "GET /repos/{owner}/{repo}/releases"
        ],
        listTagProtection: [
            "GET /repos/{owner}/{repo}/tags/protection"
        ],
        listTags: [
            "GET /repos/{owner}/{repo}/tags"
        ],
        listTeams: [
            "GET /repos/{owner}/{repo}/teams"
        ],
        listWebhookDeliveries: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
        ],
        listWebhooks: [
            "GET /repos/{owner}/{repo}/hooks"
        ],
        merge: [
            "POST /repos/{owner}/{repo}/merges"
        ],
        mergeUpstream: [
            "POST /repos/{owner}/{repo}/merge-upstream"
        ],
        pingWebhook: [
            "POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"
        ],
        redeliverWebhookDelivery: [
            "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeAppAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            {
                mapToData: "apps"
            }
        ],
        removeCollaborator: [
            "DELETE /repos/{owner}/{repo}/collaborators/{username}"
        ],
        removeStatusCheckContexts: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            {
                mapToData: "contexts"
            }
        ],
        removeStatusCheckProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        removeTeamAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            {
                mapToData: "teams"
            }
        ],
        removeUserAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            {
                mapToData: "users"
            }
        ],
        renameBranch: [
            "POST /repos/{owner}/{repo}/branches/{branch}/rename"
        ],
        replaceAllTopics: [
            "PUT /repos/{owner}/{repo}/topics"
        ],
        requestPagesBuild: [
            "POST /repos/{owner}/{repo}/pages/builds"
        ],
        setAdminBranchProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        setAppAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            {
                mapToData: "apps"
            }
        ],
        setStatusCheckContexts: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            {
                mapToData: "contexts"
            }
        ],
        setTeamAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            {
                mapToData: "teams"
            }
        ],
        setUserAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            {
                mapToData: "users"
            }
        ],
        testPushWebhook: [
            "POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"
        ],
        transfer: [
            "POST /repos/{owner}/{repo}/transfer"
        ],
        update: [
            "PATCH /repos/{owner}/{repo}"
        ],
        updateBranchProtection: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        updateCommitComment: [
            "PATCH /repos/{owner}/{repo}/comments/{comment_id}"
        ],
        updateDeploymentBranchPolicy: [
            "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        updateInformationAboutPagesSite: [
            "PUT /repos/{owner}/{repo}/pages"
        ],
        updateInvitation: [
            "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        updateOrgRuleset: [
            "PUT /orgs/{org}/rulesets/{ruleset_id}"
        ],
        updatePullRequestReviewProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        updateRelease: [
            "PATCH /repos/{owner}/{repo}/releases/{release_id}"
        ],
        updateReleaseAsset: [
            "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        updateRepoRuleset: [
            "PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"
        ],
        updateStatusCheckPotection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
            {},
            {
                renamed: [
                    "repos",
                    "updateStatusCheckProtection"
                ]
            }
        ],
        updateStatusCheckProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        updateWebhook: [
            "PATCH /repos/{owner}/{repo}/hooks/{hook_id}"
        ],
        updateWebhookConfigForRepo: [
            "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        uploadReleaseAsset: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
            {
                baseUrl: "https://uploads.github.com"
            }
        ]
    },
    search: {
        code: [
            "GET /search/code"
        ],
        commits: [
            "GET /search/commits"
        ],
        issuesAndPullRequests: [
            "GET /search/issues"
        ],
        labels: [
            "GET /search/labels"
        ],
        repos: [
            "GET /search/repositories"
        ],
        topics: [
            "GET /search/topics"
        ],
        users: [
            "GET /search/users"
        ]
    },
    secretScanning: {
        getAlert: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ],
        listAlertsForEnterprise: [
            "GET /enterprises/{enterprise}/secret-scanning/alerts"
        ],
        listAlertsForOrg: [
            "GET /orgs/{org}/secret-scanning/alerts"
        ],
        listAlertsForRepo: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts"
        ],
        listLocationsForAlert: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
        ],
        updateAlert: [
            "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ]
    },
    securityAdvisories: {
        createPrivateVulnerabilityReport: [
            "POST /repos/{owner}/{repo}/security-advisories/reports"
        ],
        createRepositoryAdvisory: [
            "POST /repos/{owner}/{repo}/security-advisories"
        ],
        createRepositoryAdvisoryCveRequest: [
            "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
        ],
        getGlobalAdvisory: [
            "GET /advisories/{ghsa_id}"
        ],
        getRepositoryAdvisory: [
            "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ],
        listGlobalAdvisories: [
            "GET /advisories"
        ],
        listOrgRepositoryAdvisories: [
            "GET /orgs/{org}/security-advisories"
        ],
        listRepositoryAdvisories: [
            "GET /repos/{owner}/{repo}/security-advisories"
        ],
        updateRepositoryAdvisory: [
            "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ]
    },
    teams: {
        addOrUpdateMembershipForUserInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        addOrUpdateProjectPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        addOrUpdateRepoPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        checkPermissionsForProjectInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        checkPermissionsForRepoInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        create: [
            "POST /orgs/{org}/teams"
        ],
        createDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        createDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions"
        ],
        deleteDiscussionCommentInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        deleteDiscussionInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        deleteInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}"
        ],
        getByName: [
            "GET /orgs/{org}/teams/{team_slug}"
        ],
        getDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        getDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        getMembershipForUserInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        list: [
            "GET /orgs/{org}/teams"
        ],
        listChildInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/teams"
        ],
        listDiscussionCommentsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        listDiscussionsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions"
        ],
        listForAuthenticatedUser: [
            "GET /user/teams"
        ],
        listMembersInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/members"
        ],
        listPendingInvitationsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/invitations"
        ],
        listProjectsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects"
        ],
        listReposInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/repos"
        ],
        removeMembershipForUserInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        removeProjectInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        removeRepoInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        updateDiscussionCommentInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        updateDiscussionInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        updateInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}"
        ]
    },
    users: {
        addEmailForAuthenticated: [
            "POST /user/emails",
            {},
            {
                renamed: [
                    "users",
                    "addEmailForAuthenticatedUser"
                ]
            }
        ],
        addEmailForAuthenticatedUser: [
            "POST /user/emails"
        ],
        addSocialAccountForAuthenticatedUser: [
            "POST /user/social_accounts"
        ],
        block: [
            "PUT /user/blocks/{username}"
        ],
        checkBlocked: [
            "GET /user/blocks/{username}"
        ],
        checkFollowingForUser: [
            "GET /users/{username}/following/{target_user}"
        ],
        checkPersonIsFollowedByAuthenticated: [
            "GET /user/following/{username}"
        ],
        createGpgKeyForAuthenticated: [
            "POST /user/gpg_keys",
            {},
            {
                renamed: [
                    "users",
                    "createGpgKeyForAuthenticatedUser"
                ]
            }
        ],
        createGpgKeyForAuthenticatedUser: [
            "POST /user/gpg_keys"
        ],
        createPublicSshKeyForAuthenticated: [
            "POST /user/keys",
            {},
            {
                renamed: [
                    "users",
                    "createPublicSshKeyForAuthenticatedUser"
                ]
            }
        ],
        createPublicSshKeyForAuthenticatedUser: [
            "POST /user/keys"
        ],
        createSshSigningKeyForAuthenticatedUser: [
            "POST /user/ssh_signing_keys"
        ],
        deleteEmailForAuthenticated: [
            "DELETE /user/emails",
            {},
            {
                renamed: [
                    "users",
                    "deleteEmailForAuthenticatedUser"
                ]
            }
        ],
        deleteEmailForAuthenticatedUser: [
            "DELETE /user/emails"
        ],
        deleteGpgKeyForAuthenticated: [
            "DELETE /user/gpg_keys/{gpg_key_id}",
            {},
            {
                renamed: [
                    "users",
                    "deleteGpgKeyForAuthenticatedUser"
                ]
            }
        ],
        deleteGpgKeyForAuthenticatedUser: [
            "DELETE /user/gpg_keys/{gpg_key_id}"
        ],
        deletePublicSshKeyForAuthenticated: [
            "DELETE /user/keys/{key_id}",
            {},
            {
                renamed: [
                    "users",
                    "deletePublicSshKeyForAuthenticatedUser"
                ]
            }
        ],
        deletePublicSshKeyForAuthenticatedUser: [
            "DELETE /user/keys/{key_id}"
        ],
        deleteSocialAccountForAuthenticatedUser: [
            "DELETE /user/social_accounts"
        ],
        deleteSshSigningKeyForAuthenticatedUser: [
            "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        follow: [
            "PUT /user/following/{username}"
        ],
        getAuthenticated: [
            "GET /user"
        ],
        getByUsername: [
            "GET /users/{username}"
        ],
        getContextForUser: [
            "GET /users/{username}/hovercard"
        ],
        getGpgKeyForAuthenticated: [
            "GET /user/gpg_keys/{gpg_key_id}",
            {},
            {
                renamed: [
                    "users",
                    "getGpgKeyForAuthenticatedUser"
                ]
            }
        ],
        getGpgKeyForAuthenticatedUser: [
            "GET /user/gpg_keys/{gpg_key_id}"
        ],
        getPublicSshKeyForAuthenticated: [
            "GET /user/keys/{key_id}",
            {},
            {
                renamed: [
                    "users",
                    "getPublicSshKeyForAuthenticatedUser"
                ]
            }
        ],
        getPublicSshKeyForAuthenticatedUser: [
            "GET /user/keys/{key_id}"
        ],
        getSshSigningKeyForAuthenticatedUser: [
            "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        list: [
            "GET /users"
        ],
        listBlockedByAuthenticated: [
            "GET /user/blocks",
            {},
            {
                renamed: [
                    "users",
                    "listBlockedByAuthenticatedUser"
                ]
            }
        ],
        listBlockedByAuthenticatedUser: [
            "GET /user/blocks"
        ],
        listEmailsForAuthenticated: [
            "GET /user/emails",
            {},
            {
                renamed: [
                    "users",
                    "listEmailsForAuthenticatedUser"
                ]
            }
        ],
        listEmailsForAuthenticatedUser: [
            "GET /user/emails"
        ],
        listFollowedByAuthenticated: [
            "GET /user/following",
            {},
            {
                renamed: [
                    "users",
                    "listFollowedByAuthenticatedUser"
                ]
            }
        ],
        listFollowedByAuthenticatedUser: [
            "GET /user/following"
        ],
        listFollowersForAuthenticatedUser: [
            "GET /user/followers"
        ],
        listFollowersForUser: [
            "GET /users/{username}/followers"
        ],
        listFollowingForUser: [
            "GET /users/{username}/following"
        ],
        listGpgKeysForAuthenticated: [
            "GET /user/gpg_keys",
            {},
            {
                renamed: [
                    "users",
                    "listGpgKeysForAuthenticatedUser"
                ]
            }
        ],
        listGpgKeysForAuthenticatedUser: [
            "GET /user/gpg_keys"
        ],
        listGpgKeysForUser: [
            "GET /users/{username}/gpg_keys"
        ],
        listPublicEmailsForAuthenticated: [
            "GET /user/public_emails",
            {},
            {
                renamed: [
                    "users",
                    "listPublicEmailsForAuthenticatedUser"
                ]
            }
        ],
        listPublicEmailsForAuthenticatedUser: [
            "GET /user/public_emails"
        ],
        listPublicKeysForUser: [
            "GET /users/{username}/keys"
        ],
        listPublicSshKeysForAuthenticated: [
            "GET /user/keys",
            {},
            {
                renamed: [
                    "users",
                    "listPublicSshKeysForAuthenticatedUser"
                ]
            }
        ],
        listPublicSshKeysForAuthenticatedUser: [
            "GET /user/keys"
        ],
        listSocialAccountsForAuthenticatedUser: [
            "GET /user/social_accounts"
        ],
        listSocialAccountsForUser: [
            "GET /users/{username}/social_accounts"
        ],
        listSshSigningKeysForAuthenticatedUser: [
            "GET /user/ssh_signing_keys"
        ],
        listSshSigningKeysForUser: [
            "GET /users/{username}/ssh_signing_keys"
        ],
        setPrimaryEmailVisibilityForAuthenticated: [
            "PATCH /user/email/visibility",
            {},
            {
                renamed: [
                    "users",
                    "setPrimaryEmailVisibilityForAuthenticatedUser"
                ]
            }
        ],
        setPrimaryEmailVisibilityForAuthenticatedUser: [
            "PATCH /user/email/visibility"
        ],
        unblock: [
            "DELETE /user/blocks/{username}"
        ],
        unfollow: [
            "DELETE /user/following/{username}"
        ],
        updateAuthenticated: [
            "PATCH /user"
        ]
    }
};
var $e1915e859240105f$export$2e2bcd8739ae039 = $e1915e859240105f$var$Endpoints;


const $1800a1563b61ce45$var$endpointMethodsMap = /* @__PURE__ */ new Map();
for (const [scope, endpoints] of Object.entries((0, $e1915e859240105f$export$2e2bcd8739ae039)))for (const [methodName, endpoint] of Object.entries(endpoints)){
    const [route, defaults, decorations] = endpoint;
    const [method, url] = route.split(/ /);
    const endpointDefaults = Object.assign({
        method: method,
        url: url
    }, defaults);
    if (!$1800a1563b61ce45$var$endpointMethodsMap.has(scope)) $1800a1563b61ce45$var$endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
    $1800a1563b61ce45$var$endpointMethodsMap.get(scope).set(methodName, {
        scope: scope,
        methodName: methodName,
        endpointDefaults: endpointDefaults,
        decorations: decorations
    });
}
const $1800a1563b61ce45$var$handler = {
    has ({ scope: scope }, methodName) {
        return $1800a1563b61ce45$var$endpointMethodsMap.get(scope).has(methodName);
    },
    getOwnPropertyDescriptor (target, methodName) {
        return {
            value: this.get(target, methodName),
            // ensures method is in the cache
            configurable: true,
            writable: true,
            enumerable: true
        };
    },
    defineProperty (target, methodName, descriptor) {
        Object.defineProperty(target.cache, methodName, descriptor);
        return true;
    },
    deleteProperty (target, methodName) {
        delete target.cache[methodName];
        return true;
    },
    ownKeys ({ scope: scope }) {
        return [
            ...$1800a1563b61ce45$var$endpointMethodsMap.get(scope).keys()
        ];
    },
    set (target, methodName, value) {
        return target.cache[methodName] = value;
    },
    get ({ octokit: octokit, scope: scope, cache: cache }, methodName) {
        if (cache[methodName]) return cache[methodName];
        const method = $1800a1563b61ce45$var$endpointMethodsMap.get(scope).get(methodName);
        if (!method) return void 0;
        const { endpointDefaults: endpointDefaults, decorations: decorations } = method;
        if (decorations) cache[methodName] = $1800a1563b61ce45$var$decorate(octokit, scope, methodName, endpointDefaults, decorations);
        else cache[methodName] = octokit.request.defaults(endpointDefaults);
        return cache[methodName];
    }
};
function $1800a1563b61ce45$export$3b214893ba7a03d2(octokit) {
    const newMethods = {};
    for (const scope of $1800a1563b61ce45$var$endpointMethodsMap.keys())newMethods[scope] = new Proxy({
        octokit: octokit,
        scope: scope,
        cache: {}
    }, $1800a1563b61ce45$var$handler);
    return newMethods;
}
function $1800a1563b61ce45$var$decorate(octokit, scope, methodName, defaults, decorations) {
    const requestWithDefaults = octokit.request.defaults(defaults);
    function withDecorations(...args) {
        let options = requestWithDefaults.endpoint.merge(...args);
        if (decorations.mapToData) {
            options = Object.assign({}, options, {
                data: options[decorations.mapToData],
                [decorations.mapToData]: void 0
            });
            return requestWithDefaults(options);
        }
        if (decorations.renamed) {
            const [newScope, newMethodName] = decorations.renamed;
            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
        }
        if (decorations.deprecated) octokit.log.warn(decorations.deprecated);
        if (decorations.renamedParameters) {
            const options2 = requestWithDefaults.endpoint.merge(...args);
            for (const [name, alias] of Object.entries(decorations.renamedParameters))if (name in options2) {
                octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
                if (!(alias in options2)) options2[alias] = options2[name];
                delete options2[name];
            }
            return requestWithDefaults(options2);
        }
        return requestWithDefaults(...args);
    }
    return Object.assign(withDecorations, requestWithDefaults);
}


function $e7dda3806616b632$export$a1fe24cc78039d62(octokit) {
    const api = (0, $1800a1563b61ce45$export$3b214893ba7a03d2)(octokit);
    return {
        rest: api
    };
}
$e7dda3806616b632$export$a1fe24cc78039d62.VERSION = (0, $44493116c13d7e12$export$a4ad2735b021c132);
function $e7dda3806616b632$export$fb02754b3672af31(octokit) {
    const api = (0, $1800a1563b61ce45$export$3b214893ba7a03d2)(octokit);
    return {
        ...api,
        rest: api
    };
}
$e7dda3806616b632$export$fb02754b3672af31.VERSION = (0, $44493116c13d7e12$export$a4ad2735b021c132);


// pkg/dist-src/version.js
var $db1342f2dd9071a2$var$VERSION = "9.0.0";
// pkg/dist-src/normalize-paginated-list-response.js
function $db1342f2dd9071a2$var$normalizePaginatedListResponse(response) {
    if (!response.data) return {
        ...response,
        data: []
    };
    const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
    if (!responseNeedsNormalization) return response;
    const incompleteResults = response.data.incomplete_results;
    const repositorySelection = response.data.repository_selection;
    const totalCount = response.data.total_count;
    delete response.data.incomplete_results;
    delete response.data.repository_selection;
    delete response.data.total_count;
    const namespaceKey = Object.keys(response.data)[0];
    const data = response.data[namespaceKey];
    response.data = data;
    if (typeof incompleteResults !== "undefined") response.data.incomplete_results = incompleteResults;
    if (typeof repositorySelection !== "undefined") response.data.repository_selection = repositorySelection;
    response.data.total_count = totalCount;
    return response;
}
// pkg/dist-src/iterator.js
function $db1342f2dd9071a2$var$iterator(octokit, route, parameters) {
    const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
    const requestMethod = typeof route === "function" ? route : octokit.request;
    const method = options.method;
    const headers = options.headers;
    let url = options.url;
    return {
        [Symbol.asyncIterator]: ()=>({
                async next () {
                    if (!url) return {
                        done: true
                    };
                    try {
                        const response = await requestMethod({
                            method: method,
                            url: url,
                            headers: headers
                        });
                        const normalizedResponse = $db1342f2dd9071a2$var$normalizePaginatedListResponse(response);
                        url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
                        return {
                            value: normalizedResponse
                        };
                    } catch (error) {
                        if (error.status !== 409) throw error;
                        url = "";
                        return {
                            value: {
                                status: 200,
                                headers: {},
                                data: []
                            }
                        };
                    }
                }
            })
    };
}
// pkg/dist-src/paginate.js
function $db1342f2dd9071a2$var$paginate(octokit, route, parameters, mapFn) {
    if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
    }
    return $db1342f2dd9071a2$var$gather(octokit, [], $db1342f2dd9071a2$var$iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
}
function $db1342f2dd9071a2$var$gather(octokit, results, iterator2, mapFn) {
    return iterator2.next().then((result)=>{
        if (result.done) return results;
        let earlyExit = false;
        function done() {
            earlyExit = true;
        }
        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
        if (earlyExit) return results;
        return $db1342f2dd9071a2$var$gather(octokit, results, iterator2, mapFn);
    });
}
// pkg/dist-src/compose-paginate.js
var $db1342f2dd9071a2$export$44fe6ff56a1118b0 = Object.assign($db1342f2dd9071a2$var$paginate, {
    iterator: $db1342f2dd9071a2$var$iterator
});
// pkg/dist-src/generated/paginating-endpoints.js
var $db1342f2dd9071a2$export$f72c3e329f772158 = [
    "GET /advisories",
    "GET /app/hook/deliveries",
    "GET /app/installation-requests",
    "GET /app/installations",
    "GET /assignments/{assignment_id}/accepted_assignments",
    "GET /classrooms",
    "GET /classrooms/{classroom_id}/assignments",
    "GET /enterprises/{enterprise}/dependabot/alerts",
    "GET /enterprises/{enterprise}/secret-scanning/alerts",
    "GET /events",
    "GET /gists",
    "GET /gists/public",
    "GET /gists/starred",
    "GET /gists/{gist_id}/comments",
    "GET /gists/{gist_id}/commits",
    "GET /gists/{gist_id}/forks",
    "GET /installation/repositories",
    "GET /issues",
    "GET /licenses",
    "GET /marketplace_listing/plans",
    "GET /marketplace_listing/plans/{plan_id}/accounts",
    "GET /marketplace_listing/stubbed/plans",
    "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
    "GET /networks/{owner}/{repo}/events",
    "GET /notifications",
    "GET /organizations",
    "GET /orgs/{org}/actions/cache/usage-by-repository",
    "GET /orgs/{org}/actions/permissions/repositories",
    "GET /orgs/{org}/actions/runners",
    "GET /orgs/{org}/actions/secrets",
    "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
    "GET /orgs/{org}/actions/variables",
    "GET /orgs/{org}/actions/variables/{name}/repositories",
    "GET /orgs/{org}/blocks",
    "GET /orgs/{org}/code-scanning/alerts",
    "GET /orgs/{org}/codespaces",
    "GET /orgs/{org}/codespaces/secrets",
    "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
    "GET /orgs/{org}/copilot/billing/seats",
    "GET /orgs/{org}/dependabot/alerts",
    "GET /orgs/{org}/dependabot/secrets",
    "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
    "GET /orgs/{org}/events",
    "GET /orgs/{org}/failed_invitations",
    "GET /orgs/{org}/hooks",
    "GET /orgs/{org}/hooks/{hook_id}/deliveries",
    "GET /orgs/{org}/installations",
    "GET /orgs/{org}/invitations",
    "GET /orgs/{org}/invitations/{invitation_id}/teams",
    "GET /orgs/{org}/issues",
    "GET /orgs/{org}/members",
    "GET /orgs/{org}/members/{username}/codespaces",
    "GET /orgs/{org}/migrations",
    "GET /orgs/{org}/migrations/{migration_id}/repositories",
    "GET /orgs/{org}/outside_collaborators",
    "GET /orgs/{org}/packages",
    "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
    "GET /orgs/{org}/personal-access-token-requests",
    "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
    "GET /orgs/{org}/personal-access-tokens",
    "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
    "GET /orgs/{org}/projects",
    "GET /orgs/{org}/public_members",
    "GET /orgs/{org}/repos",
    "GET /orgs/{org}/rulesets",
    "GET /orgs/{org}/secret-scanning/alerts",
    "GET /orgs/{org}/security-advisories",
    "GET /orgs/{org}/teams",
    "GET /orgs/{org}/teams/{team_slug}/discussions",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
    "GET /orgs/{org}/teams/{team_slug}/invitations",
    "GET /orgs/{org}/teams/{team_slug}/members",
    "GET /orgs/{org}/teams/{team_slug}/projects",
    "GET /orgs/{org}/teams/{team_slug}/repos",
    "GET /orgs/{org}/teams/{team_slug}/teams",
    "GET /projects/columns/{column_id}/cards",
    "GET /projects/{project_id}/collaborators",
    "GET /projects/{project_id}/columns",
    "GET /repos/{owner}/{repo}/actions/artifacts",
    "GET /repos/{owner}/{repo}/actions/caches",
    "GET /repos/{owner}/{repo}/actions/organization-secrets",
    "GET /repos/{owner}/{repo}/actions/organization-variables",
    "GET /repos/{owner}/{repo}/actions/runners",
    "GET /repos/{owner}/{repo}/actions/runs",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
    "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
    "GET /repos/{owner}/{repo}/actions/secrets",
    "GET /repos/{owner}/{repo}/actions/variables",
    "GET /repos/{owner}/{repo}/actions/workflows",
    "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
    "GET /repos/{owner}/{repo}/activity",
    "GET /repos/{owner}/{repo}/assignees",
    "GET /repos/{owner}/{repo}/branches",
    "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
    "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
    "GET /repos/{owner}/{repo}/code-scanning/alerts",
    "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
    "GET /repos/{owner}/{repo}/code-scanning/analyses",
    "GET /repos/{owner}/{repo}/codespaces",
    "GET /repos/{owner}/{repo}/codespaces/devcontainers",
    "GET /repos/{owner}/{repo}/codespaces/secrets",
    "GET /repos/{owner}/{repo}/collaborators",
    "GET /repos/{owner}/{repo}/comments",
    "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/commits",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
    "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
    "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
    "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
    "GET /repos/{owner}/{repo}/commits/{ref}/status",
    "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
    "GET /repos/{owner}/{repo}/contributors",
    "GET /repos/{owner}/{repo}/dependabot/alerts",
    "GET /repos/{owner}/{repo}/dependabot/secrets",
    "GET /repos/{owner}/{repo}/deployments",
    "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
    "GET /repos/{owner}/{repo}/environments",
    "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
    "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
    "GET /repos/{owner}/{repo}/events",
    "GET /repos/{owner}/{repo}/forks",
    "GET /repos/{owner}/{repo}/hooks",
    "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
    "GET /repos/{owner}/{repo}/invitations",
    "GET /repos/{owner}/{repo}/issues",
    "GET /repos/{owner}/{repo}/issues/comments",
    "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/issues/events",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
    "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
    "GET /repos/{owner}/{repo}/keys",
    "GET /repos/{owner}/{repo}/labels",
    "GET /repos/{owner}/{repo}/milestones",
    "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
    "GET /repos/{owner}/{repo}/notifications",
    "GET /repos/{owner}/{repo}/pages/builds",
    "GET /repos/{owner}/{repo}/projects",
    "GET /repos/{owner}/{repo}/pulls",
    "GET /repos/{owner}/{repo}/pulls/comments",
    "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
    "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
    "GET /repos/{owner}/{repo}/releases",
    "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
    "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
    "GET /repos/{owner}/{repo}/rules/branches/{branch}",
    "GET /repos/{owner}/{repo}/rulesets",
    "GET /repos/{owner}/{repo}/secret-scanning/alerts",
    "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
    "GET /repos/{owner}/{repo}/security-advisories",
    "GET /repos/{owner}/{repo}/stargazers",
    "GET /repos/{owner}/{repo}/subscribers",
    "GET /repos/{owner}/{repo}/tags",
    "GET /repos/{owner}/{repo}/teams",
    "GET /repos/{owner}/{repo}/topics",
    "GET /repositories",
    "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
    "GET /repositories/{repository_id}/environments/{environment_name}/variables",
    "GET /search/code",
    "GET /search/commits",
    "GET /search/issues",
    "GET /search/labels",
    "GET /search/repositories",
    "GET /search/topics",
    "GET /search/users",
    "GET /teams/{team_id}/discussions",
    "GET /teams/{team_id}/discussions/{discussion_number}/comments",
    "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
    "GET /teams/{team_id}/invitations",
    "GET /teams/{team_id}/members",
    "GET /teams/{team_id}/projects",
    "GET /teams/{team_id}/repos",
    "GET /teams/{team_id}/teams",
    "GET /user/blocks",
    "GET /user/codespaces",
    "GET /user/codespaces/secrets",
    "GET /user/emails",
    "GET /user/followers",
    "GET /user/following",
    "GET /user/gpg_keys",
    "GET /user/installations",
    "GET /user/installations/{installation_id}/repositories",
    "GET /user/issues",
    "GET /user/keys",
    "GET /user/marketplace_purchases",
    "GET /user/marketplace_purchases/stubbed",
    "GET /user/memberships/orgs",
    "GET /user/migrations",
    "GET /user/migrations/{migration_id}/repositories",
    "GET /user/orgs",
    "GET /user/packages",
    "GET /user/packages/{package_type}/{package_name}/versions",
    "GET /user/public_emails",
    "GET /user/repos",
    "GET /user/repository_invitations",
    "GET /user/social_accounts",
    "GET /user/ssh_signing_keys",
    "GET /user/starred",
    "GET /user/subscriptions",
    "GET /user/teams",
    "GET /users",
    "GET /users/{username}/events",
    "GET /users/{username}/events/orgs/{org}",
    "GET /users/{username}/events/public",
    "GET /users/{username}/followers",
    "GET /users/{username}/following",
    "GET /users/{username}/gists",
    "GET /users/{username}/gpg_keys",
    "GET /users/{username}/keys",
    "GET /users/{username}/orgs",
    "GET /users/{username}/packages",
    "GET /users/{username}/projects",
    "GET /users/{username}/received_events",
    "GET /users/{username}/received_events/public",
    "GET /users/{username}/repos",
    "GET /users/{username}/social_accounts",
    "GET /users/{username}/ssh_signing_keys",
    "GET /users/{username}/starred",
    "GET /users/{username}/subscriptions"
];
// pkg/dist-src/paginating-endpoints.js
function $db1342f2dd9071a2$export$d31615f298c9ee6(arg) {
    if (typeof arg === "string") return $db1342f2dd9071a2$export$f72c3e329f772158.includes(arg);
    else return false;
}
// pkg/dist-src/index.js
function $db1342f2dd9071a2$export$d8def7ab7602fc50(octokit) {
    return {
        paginate: Object.assign($db1342f2dd9071a2$var$paginate.bind(null, octokit), {
            iterator: $db1342f2dd9071a2$var$iterator.bind(null, octokit)
        })
    };
}
$db1342f2dd9071a2$export$d8def7ab7602fc50.VERSION = $db1342f2dd9071a2$var$VERSION;


$34a39b9cfdd3c6a2$exports.context = new $34a39b9cfdd3c6a2$var$Context.Context();
const $34a39b9cfdd3c6a2$var$baseUrl = $34a39b9cfdd3c6a2$var$Utils.getApiBaseUrl();
$34a39b9cfdd3c6a2$exports.defaults = {
    baseUrl: $34a39b9cfdd3c6a2$var$baseUrl,
    request: {
        agent: $34a39b9cfdd3c6a2$var$Utils.getProxyAgent($34a39b9cfdd3c6a2$var$baseUrl),
        fetch: $34a39b9cfdd3c6a2$var$Utils.getProxyFetch($34a39b9cfdd3c6a2$var$baseUrl)
    }
};
$34a39b9cfdd3c6a2$exports.GitHub = $54b3cc8c9f7e5ec5$export$d19f1ac68c042717.plugin($e7dda3806616b632$export$a1fe24cc78039d62, $db1342f2dd9071a2$export$d8def7ab7602fc50).defaults($34a39b9cfdd3c6a2$exports.defaults);
/**
 * Convience function to correctly format Octokit Options to pass into the constructor.
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */ function $34a39b9cfdd3c6a2$var$getOctokitOptions(token, options) {
    const opts = Object.assign({}, options || {}); // Shallow clone - don't mutate the object provided by the caller
    // Auth
    const auth = $34a39b9cfdd3c6a2$var$Utils.getAuthString(token, opts);
    if (auth) opts.auth = auth;
    return opts;
}
$34a39b9cfdd3c6a2$exports.getOctokitOptions = $34a39b9cfdd3c6a2$var$getOctokitOptions;


$b2ffea015edc5d5f$exports.context = new $b2ffea015edc5d5f$var$Context.Context();
/**
 * Returns a hydrated octokit ready to use for GitHub Actions
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */ function $b2ffea015edc5d5f$var$getOctokit(token, options, ...additionalPlugins) {
    const GitHubWithPlugins = $34a39b9cfdd3c6a2$exports.GitHub.plugin(...additionalPlugins);
    return new GitHubWithPlugins((0, $34a39b9cfdd3c6a2$exports.getOctokitOptions)(token, options));
}
$b2ffea015edc5d5f$exports.getOctokit = $b2ffea015edc5d5f$var$getOctokit;



const $60f95bdd24cab3fa$var$exportVariable = (key, val)=>{
    $8c7cc7c00e6bea0c$exports.exportVariable(key, val);
    $8c7cc7c00e6bea0c$exports.setOutput(key, val);
    console.log(key, val);
};
try {
    var $60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift_match, $60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift, $60f95bdd24cab3fa$var$_readFileSync_match_pop_split, $60f95bdd24cab3fa$var$_readFileSync_match_pop, $60f95bdd24cab3fa$var$_readFileSync_match, $60f95bdd24cab3fa$var$_readFileSync, $60f95bdd24cab3fa$var$_github_context_payload_pull_request;
    let version = $8c7cc7c00e6bea0c$exports.getInput("version") || "";
    if (!version) $8c7cc7c00e6bea0c$exports.setFailed("version is required");
    if (!version.match(/\d+\.\d+/) && (0, $3B1P3$fs.existsSync)(version)) version = (($60f95bdd24cab3fa$var$_readFileSync = (0, $3B1P3$fs.readFileSync)(version, "utf8")) === null || $60f95bdd24cab3fa$var$_readFileSync === void 0 ? void 0 : ($60f95bdd24cab3fa$var$_readFileSync_match = $60f95bdd24cab3fa$var$_readFileSync.match(/FROM\s+.+:(.+)/)) === null || $60f95bdd24cab3fa$var$_readFileSync_match === void 0 ? void 0 : ($60f95bdd24cab3fa$var$_readFileSync_match_pop = $60f95bdd24cab3fa$var$_readFileSync_match.pop()) === null || $60f95bdd24cab3fa$var$_readFileSync_match_pop === void 0 ? void 0 : ($60f95bdd24cab3fa$var$_readFileSync_match_pop_split = $60f95bdd24cab3fa$var$_readFileSync_match_pop.split("-")) === null || $60f95bdd24cab3fa$var$_readFileSync_match_pop_split === void 0 ? void 0 : ($60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift = $60f95bdd24cab3fa$var$_readFileSync_match_pop_split.shift()) === null || $60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift === void 0 ? void 0 : ($60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift_match = $60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift.match(/[0-9.]+/)) === null || $60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift_match === void 0 ? void 0 : $60f95bdd24cab3fa$var$_readFileSync_match_pop_split_shift_match.shift()) || "";
    if (!version) $8c7cc7c00e6bea0c$exports.setFailed(`Unexpected version "${version}" must be something like "2.1" or path to Dockerfile like "./Dockerfile"`);
    // Described in readme, context section
    const commit = $b2ffea015edc5d5f$exports.context.eventName === "pull_request" ? ($60f95bdd24cab3fa$var$_github_context_payload_pull_request = $b2ffea015edc5d5f$exports.context.payload.pull_request) === null || $60f95bdd24cab3fa$var$_github_context_payload_pull_request === void 0 ? void 0 : $60f95bdd24cab3fa$var$_github_context_payload_pull_request.head.sha : $b2ffea015edc5d5f$exports.context.sha;
    const branch = (process.env.GITHUB_HEAD_REF || $b2ffea015edc5d5f$exports.context.ref).split("/").pop();
    const num = $b2ffea015edc5d5f$exports.context.runNumber;
    const sha = commit.substring(0, 7);
    $60f95bdd24cab3fa$var$exportVariable("GITHUB_SHA_SHORT", sha);
    $60f95bdd24cab3fa$var$exportVariable("GITHUB_BRANCH_SLUG", branch);
    $60f95bdd24cab3fa$var$exportVariable("VERSION", `${version}.${num}-${sha}-${branch}`);
} catch (error) {
    $8c7cc7c00e6bea0c$exports.setFailed(error.message);
}


